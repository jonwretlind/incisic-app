{"ast":null,"code":"/*!\n * @fileOverview Finance Excel Rate Formula Javascript Equivalent\n * @version 1.0.0\n *\n * @author Burak Arslan @kucukharf http://www.github.com/kucukharf\n * @license\n * Copyright (c) 2010-2018 Burak Arslan\n * Licensed under Creative Commons (CC) license\n * @usage RATE($periods, $payment, $present, $future, $type, $guess)\n */\nfunction RATE(periods, payment, present, future, type, guess) {\n  guess = guess === undefined ? 0.01 : guess;\n  future = future === undefined ? 0 : future;\n  type = type === undefined ? 0 : type; // Set maximum epsilon for end of iteration\n\n  var epsMax = 1e-10; // Set maximum number of iterations\n\n  var iterMax = 100; // Implement Newton's method\n\n  var y,\n      y0,\n      y1,\n      x0,\n      x1 = 0,\n      f = 0,\n      i = 0;\n  var rate = guess;\n\n  if (Math.abs(rate) < epsMax) {\n    y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n  } else {\n    f = Math.exp(periods * Math.log(1 + rate));\n    y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n  }\n\n  y0 = present + payment * periods + future;\n  y1 = present * f + payment * (1 / rate + type) * (f - 1) + future;\n  i = x0 = 0;\n  x1 = rate;\n\n  while (Math.abs(y0 - y1) > epsMax && i < iterMax) {\n    rate = (y1 * x0 - y0 * x1) / (y1 - y0);\n    x0 = x1;\n    x1 = rate;\n\n    if (Math.abs(rate) < epsMax) {\n      y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n    } else {\n      f = Math.exp(periods * Math.log(1 + rate));\n      y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n    }\n\n    y0 = y1;\n    y1 = y;\n    ++i;\n  }\n\n  return rate;\n}\n\n;\nexport default RATE;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/rate.js"],"names":["RATE","periods","payment","present","future","type","guess","undefined","epsMax","iterMax","y","y0","y1","x0","x1","f","i","rate","Math","abs","exp","log"],"mappings":"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","sourcesContent":["/*!\n * @fileOverview Finance Excel Rate Formula Javascript Equivalent\n * @version 1.0.0\n *\n * @author Burak Arslan @kucukharf http://www.github.com/kucukharf\n * @license\n * Copyright (c) 2010-2018 Burak Arslan\n * Licensed under Creative Commons (CC) license\n * @usage RATE($periods, $payment, $present, $future, $type, $guess)\n */\n\nfunction RATE(periods, payment, present, future, type, guess) {\n    guess = (guess === undefined) ? 0.01 : guess;\n    future = (future === undefined) ? 0 : future;\n    type = (type === undefined) ? 0 : type;\n\n    // Set maximum epsilon for end of iteration\n    var epsMax = 1e-10;\n\n    // Set maximum number of iterations\n    var iterMax = 100;\n\n    // Implement Newton's method\n    var y, y0, y1, x0, x1 = 0,\n      f = 0,\n      i = 0;\n    var rate = guess;\n    if (Math.abs(rate) < epsMax) {\n      y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n    } else {\n      f = Math.exp(periods * Math.log(1 + rate));\n      y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n    }\n    y0 = present + payment * periods + future;\n    y1 = present * f + payment * (1 / rate + type) * (f - 1) + future;\n    i = x0 = 0;\n    x1 = rate;\n    while ((Math.abs(y0 - y1) > epsMax) && (i < iterMax)) {\n      rate = (y1 * x0 - y0 * x1) / (y1 - y0);\n      x0 = x1;\n      x1 = rate;\n        if (Math.abs(rate) < epsMax) {\n          y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;\n        } else {\n          f = Math.exp(periods * Math.log(1 + rate));\n          y = present * f + payment * (1 / rate + type) * (f - 1) + future;\n        }\n      y0 = y1;\n      y1 = y;\n      ++i;\n    }\n    return rate;\n};\nexport default RATE;\n"]},"metadata":{},"sourceType":"module"}