{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _jsx = require(\"../utils/jsx\");\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction convertCases(nodes, context, needle) {\n  if (nodes.length === 0) {\n    return _babelTypes.default.identifier('null');\n  }\n\n  const node = nodes[0];\n  const consequent = context.staticBlock(childContext => {\n    const children = (0, _visitors.visitExpressions)(node.block.nodes, childContext);\n\n    if (children.length === 1) {\n      return children[0];\n    }\n\n    if (children.length === 0) {\n      return _babelTypes.default.identifier('null');\n    }\n\n    return (0, _jsx.buildJSXFragment)(children);\n  });\n\n  if (node.expr === 'default') {\n    return consequent;\n  }\n\n  const test = _babelTypes.default.binaryExpression('===', needle, (0, _parseExpression.default)(node.expr, context));\n\n  const alternate = convertCases(nodes.slice(1), context, needle);\n  return _babelTypes.default.conditionalExpression(test, consequent, alternate);\n}\n\nconst ConditionalVisitor = {\n  expression(node, context) {\n    const needle = (0, _parseExpression.default)(node.expr, context);\n    const id = _babelTypes.default.asIdentifier(needle) || context.declareVariable('const', context.generateUidIdentifier('case_variable').name).id;\n    const cases = convertCases(node.block.nodes, context, id);\n\n    if (!_babelTypes.default.isIdentifier(needle)) {\n      return _babelTypes.default.sequenceExpression([_babelTypes.default.assignmentExpression('=', id, needle), cases]);\n    }\n\n    return cases;\n  }\n\n};\nvar _default = ConditionalVisitor;\nexports.default = _default;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/visitors/Case.js"],"names":["Object","defineProperty","exports","value","default","_parseExpression","_interopRequireDefault","require","_jsx","_babelTypes","_visitors","obj","__esModule","convertCases","nodes","context","needle","length","identifier","node","consequent","staticBlock","childContext","children","visitExpressions","block","buildJSXFragment","expr","test","binaryExpression","alternate","slice","conditionalExpression","ConditionalVisitor","expression","id","asIdentifier","declareVariable","generateUidIdentifier","name","cases","isIdentifier","sequenceExpression","assignmentExpression","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _jsx = require(\"../utils/jsx\");\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction convertCases(nodes, context, needle) {\n  if (nodes.length === 0) {\n    return _babelTypes.default.identifier('null');\n  }\n\n  const node = nodes[0];\n  const consequent = context.staticBlock(childContext => {\n    const children = (0, _visitors.visitExpressions)(node.block.nodes, childContext);\n\n    if (children.length === 1) {\n      return children[0];\n    }\n\n    if (children.length === 0) {\n      return _babelTypes.default.identifier('null');\n    }\n\n    return (0, _jsx.buildJSXFragment)(children);\n  });\n\n  if (node.expr === 'default') {\n    return consequent;\n  }\n\n  const test = _babelTypes.default.binaryExpression('===', needle, (0, _parseExpression.default)(node.expr, context));\n\n  const alternate = convertCases(nodes.slice(1), context, needle);\n  return _babelTypes.default.conditionalExpression(test, consequent, alternate);\n}\n\nconst ConditionalVisitor = {\n  expression(node, context) {\n    const needle = (0, _parseExpression.default)(node.expr, context);\n    const id = _babelTypes.default.asIdentifier(needle) || context.declareVariable('const', context.generateUidIdentifier('case_variable').name).id;\n    const cases = convertCases(node.block.nodes, context, id);\n\n    if (!_babelTypes.default.isIdentifier(needle)) {\n      return _babelTypes.default.sequenceExpression([_babelTypes.default.assignmentExpression('=', id, needle), cases]);\n    }\n\n    return cases;\n  }\n\n};\nvar _default = ConditionalVisitor;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}