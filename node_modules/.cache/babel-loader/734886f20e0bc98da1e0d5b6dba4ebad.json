{"ast":null,"code":"// +++++++++++++++++++++++++ //\n// Mathematical Calculations //\n// +++++++++++++++++++++++++ //\nfunction MathFuncts() {\n  //calc management fee\n  this.mngFee = function (pBOY, pannPay, pmngFee) {\n    return (pBOY + pannPay) * pmngFee;\n  }; // End-of-Year Balance Calculation //\n\n\n  this.balEOY = function (pBOY, pannPay, pmngFee, pEconData, tyrs) {\n    if (tyrs < 1) {\n      tyrs = 1;\n    }\n\n    ; // take out management fee at END of the year\n\n    this.myBalance = (pBOY + pannPay) * Math.pow(1 + pEconData / 1, tyrs) - (pBOY + pannPay) * pmngFee; //console.log(\"myBalance is: \" + myBalance + \" | Year: \" + tyrs);\n\n    return this.myBalance;\n  };\n\n  this.averageYield = function ($, sumOfYields, numYears, theTable, annPay, BOYBalance) {\n    if (debug) console.log(\"CALCULATE AVERAGE YIELD: \", sumOfYields, numYears, theTable, annPay, BOYBalance);\n    avgYield = sumOfYields / numYears;\n    $('.' + theTable + '-yields div.avgYield').html(\"<p>Average Yield: \" + avgYield.toFixed(2) + \"% </p>\");\n\n    if (avgYield <= 0) {\n      $('.' + theTable + '-yields div.avgYield').css({\n        backgroundColor: '#f2a2a2'\n      });\n    }\n\n    ;\n    this.fantasyPVonIR(avgYield, annPay, numYears, BOYBalance[0]);\n    $('.' + theTable + '-yields div.avgYield').append(\"<p style='font-size:0.7em;'>If True, Total Value Would Be: $\" + this.fantasyPV.toLocaleString() + \" </p>\");\n  };\n\n  this.fantasyPVonIR = function (avgROR, annPay, numYears, pBOYBalance) {\n    // calculate the value of the account,\n    // IF Average ROR was true...\n    var avgROR = avgROR / 100;\n    this.fantasyPV = Math.round((1 + avgROR) * annPay * (Math.pow(1 + avgROR, numYears) - 1) / avgROR + pBOYBalance * Math.pow(1 + avgROR, numYears));\n    return this.fantasyPV;\n  };\n\n  this.calcReturn = function (initVal, endVal) {\n    this.theReturn = Math.abs((initVal - endVal) / initVal);\n    return this.theReturn;\n  };\n\n  this.calcPVonIR = function (IR, annPay, numYears, pBOYBalance) {\n    this.myCalcPVonIR = Math.round((1 + IR) * annPay * ((Math.pow(1 + IR, numYears) - 1) / IR) + pBOYBalance * Math.pow(1 + IR / 1, numYears)); //alert(Number(this.myCalcPVonIR));\n\n    return this.myCalcPVonIR;\n  };\n\n  this.calcSimpleFV = function (IR, annPay, numYears, pBOYBalance) {\n    this.mySimpleFV = Math.round(pBOYBalance * Math.pow(1 + IR, numYears)) + annPay * numYears;\n    return this.mySimpleFV;\n  };\n\n  this.calcSimpleFVBOY = function (IR, annPay, numYears, pBOYBalance, i) {\n    if (i == 0) {\n      pBOYBalance += annPay;\n      numYears--;\n    }\n\n    ;\n    this.mySimpleFVBOY = annPay + Math.round(pBOYBalance * (1 + IR) ** numYears);\n    return this.mySimpleFVBOY;\n  }; // generate a random number within a range\n\n\n  this.randomGen = function (hi, lo) {\n    var guess = Math.random() * (hi - lo) + lo;\n    return guess;\n  }; // these functions recalculate table values\n  // when annual contribution/payment has been changed\n  //add a function to handle refresh buttons\n\n\n  this.recalcBtn = function () {\n    console.log('RECALC');\n    recalcvalues.recalc(RORTableArray);\n  };\n\n  this.toggleBtn = function (x) {\n    var selector = \".ann-pay-table .recalc-btn, #annPayInput-\" + x + \", #annPayAmt-\" + x + \", #editBtn-\" + x + \", #recalcBtn-\" + x;\n    $(selector).toggle();\n  };\n\n  this.changeVal = function (newVal, id) {\n    console.log(\"Value Changed to: \" + newVal + \" in field: \" + id);\n    var idArr = id.split(\"-\");\n    console.log('Row: ' + idArr[1]);\n    RORTableArray[4 + 6 * idArr[1]] = newVal;\n    recalcvalues.recalc(RORTableArray, newVal, idArr[1]);\n  };\n\n  this.clearTable = function (pBOYBalance) {\n    dispNewBal = pBOYBalance ^ 0;\n    totMngFee = (dispNewBal + annPay) * mngFee;\n    $('.output-data-row').remove();\n  };\n\n  this.clearValues = function () {\n    newBalance = new Number(BOY);\n    myBalance = new Number(0);\n    BOYBalance = [];\n    EOYBalance = [];\n    sumOfYields = null;\n    dispNewBal = null;\n    yrFromStart = null;\n  };\n\n  this.weightedAvg = function () {}; // ++++++++++++++++++++++ //\n  // Goal-Seeking Functions //\n  // ++++++++++++++++++++++ //\n\n\n  this.actualYield = function (theTable, idx) {\n    //console.log (\"actualYield() called by: \" + this.actualYield.caller);\n    if (BOYBalance.length) {\n      var BOYidx = BOYBalance.length - 1;\n      var BOYBal = Number(BOYBalance[0]);\n    }\n\n    ;\n    console.log(\"idx=\" + idx, \"BOYBal=\" + BOYBal); // deal with \"zero\" bug....\n\n    if (BOYBal <= 1) BOYBal = 1;\n\n    if (BOYBal <= 10 && numYears >= 10) {\n      BOYBal = 10; // seed a number so that larger calcs work\n    }\n\n    ; //endif \"zero\" bug\n\n    var IR = 0; // let's tweak accuracy depending on total of account values\n    // tolerance is a percentage of the target.\n\n    var tolerance = Number();\n\n    switch (true) {\n      case newBalance >= 1 && newBalance < 5000:\n        tolerance = .001;\n        break;\n\n      case newBalance >= 5000 && newBalance < 10000:\n        tolerance = .005;\n        break;\n\n      case newBalance >= 10000 && newBalance < 50000:\n        tolerance = .007;\n        break;\n\n      case newBalance >= 50000 && newBalance < 200000:\n        tolerance = .02;\n        break;\n\n      case newBalance >= 200000 && newBalance < 500000:\n        tolerance = .025;\n        break;\n\n      case newBalance >= 500000 && newBalance < 1000000:\n        tolerance = .03;\n        break;\n\n      case newBalance >= 1000000 && newBalance < 2500000:\n        tolerance = .04;\n        break;\n\n      case newBalance >= 2500000 && newBalance < 5000000:\n        tolerance = .05;\n        break;\n\n      case newBalance > 5000000:\n        tolerance = .055;\n        break;\n\n      default:\n        tolerance = .007;\n        break;\n    }\n\n    ; // end switch\n\n    var guessCounter = 0; // set a counter to track number of guesses\n\n    var guessLimit = 0.25;\n    var hi = guessLimit,\n        lo = guessLimit * -1; //set initial range of random numbers to test\n\n    GSResult = null;\n\n    do {\n      // first, store the values for lo and hi into hiTest and loTest to compare\n      var hiTest = hi,\n          loTest = lo;\n      var flag = true; //reset flag each guess\n\n      var median = (hi + lo) / 2; // generate a new random IR within a range to test\n      //console.log(mathfuncts.randomGen(hi, lo));\n\n      IR = mathfuncts.randomGen(hi, lo); // prevent hi and lo from switching places...\n\n      switch (true) {\n        case hi < lo:\n          flag = false;\n          hi = hiTest;\n          break;\n\n        case lo > hi:\n          flag = false;\n          lo = loTest;\n          break;\n      }\n\n      ; // need to tweak things for big, ridiculous numbers\n\n      switch (true) {\n        case newBalance >= 100000 && numYears < 500000:\n          var adj = .0000001;\n          break;\n\n        case newBalance >= 500000 && numYears < 1000000:\n          var adj = .00000001;\n          break;\n\n        case newBalance >= 1000000 && numYears < 5000000:\n          var adj = .000000001;\n          break;\n\n        case newBalance >= 5000000 && numYears < 10000000:\n          var adj = .0000000001;\n          break;\n\n        case newBalance >= 10000000:\n          var adj = .00000000001;\n          break;\n\n        default:\n          var adj = .0000001;\n          break;\n      }\n\n      var breakFlag = 0; // only run the calculations if the guess is in proper range\n\n      if (flag === true) {\n        GSResultTest = GSResult; // run the goalSeek on beginning balance\n        // to test IR | pass null to the beginning balance\n\n        mathfuncts.goalSeekROR(IR, annPay, numYears, null);\n\n        if (GSResult > 0 && GSResultTest > 0 && !isNaN(GSResult)) {\n          //  we don't count it if GSResult < 0, NaN\n          guessCounter += 1;\n          var targetNumberLowerLimit = BOYBal - newBalance.toFixed(2) * (tolerance / 100 + numYears * adj);\n          var targetNumberUpperLimit = BOYBal + newBalance.toFixed(2) * (tolerance / 100 + numYears * adj);\n          if (GSResultTest !== null) GSResultTest = GSResultTest.toFixed(4);\n\n          if (GSResult !== null) {\n            if (GSResult.toFixed(4) == GSResultTest) breakFlag = 1;\n          }\n\n          ;\n\n          function debugMsg() {\n            var whichTable; // For Debugging..\n\n            switch (idx) {\n              case 0:\n                whichTable = \"STOCKS\";\n                break;\n\n              case 1:\n                whichTable = \"BONDS\";\n                break;\n\n              case 2:\n                whichTable = \"TREASURIES\";\n                break;\n\n              case 3:\n                whichTable = \"COMPOSITE\";\n                break;\n\n              default:\n                //\n                break;\n            }\n\n            ; // / debugging...\n\n            try {\n              console.log(guessCounter + \" : [\" + whichTable + \"] IR: \" + (IR * 100).toFixed(2) + \" -> GSResult: \" + GSResult.toFixed(4) + \" || Hi: \" + (hi * 100).toFixed(4) + \" | Lo: \" + (lo * 100).toFixed(4) + \" | distance: \" + (hiTest - loTest).toFixed(4) + \" --> BREAKFLAG = \" + breakFlag);\n            } catch (e) {\n              console.log(\"----> ERROR in GSResult: \" + GSResult + \" or IR: \" + IR * 100 + \">>>> || Hi: \" + (hi * 100).toFixed(4) + \" | Lo: \" + (lo * 100).toFixed(4));\n            }\n\n            console.log(\"GSResultTest: \" + GSResultTest + \" | targetLow: \" + targetNumberLowerLimit + \",  targetHi: \" + targetNumberUpperLimit + \" || median: \" + (median * 100).toFixed(4) + \" hiTest: \" + (hiTest * 100).toFixed(4) + \", loTest: \" + (loTest * 100).toFixed(4));\n            console.log('----------------------------------------------------------------------------------------------------------------------');\n          }\n\n          ;\n          if (debug) debugMsg(); // narrow hi/lo range of random numbers to generate on next iteration based on guessed number\n\n          if (IR < median) {\n            if (GSResult > targetNumberLowerLimit && IR > loTest && IR < hiTest) {\n              lo = IR;\n            }\n\n            ;\n          } else {\n            if (GSResult < targetNumberUpperLimit && IR < hiTest && IR > loTest) {\n              hi = IR;\n            }\n\n            ;\n          }\n\n          ; // check to see if the hi and lo are too close and need to be adjusted upwards to find the target zone,\n          // no further than the limits\n\n          if (hiTest - loTest < 0.001 && hi - lo > -0.001) {\n            lo -= .005;\n            hi += .005;\n            console.log('too close!');\n          }\n\n          ;\n          if (hi > guessLimit) hi = guessLimit;\n          if (lo < guessLimit * -1) lo = guessLimit * -1;\n        }\n\n        ;\n      }\n\n      ;\n      var inRange = false;\n\n      if ((!(GSResult > targetNumberLowerLimit && GSResult < targetNumberUpperLimit) || isNaN(GSResult) || GSResult === null) && guessCounter < 5000) {\n        inRange = true;\n      }\n\n      ;\n    } while (inRange == true || inRange == true && breakFlag == 1); // end do/while loop\n\n\n    hi = guessLimit, lo = guessLimit * -1; //reset initial range of random numbers to test\n\n    actROR = IR * 100;\n    console.log(\"===========================================================\");\n    console.log(\"ACTUAL ROR = \" + actROR.toFixed(2) + \"%\");\n    console.log(\"===========================================================\");\n    console.log(\" \");\n    $('.' + theTable + '-yields div.actYield').html(\"<p style='font-weight: bold;'>ACTUAL Yield: \" + actROR.toFixed(2) + \"% </p>\");\n\n    if (actROR <= 0) {\n      $('.' + theTable + '-yields div.actYield').css({\n        backgroundColor: '#f2a2a2'\n      });\n    }\n\n    ;\n    return actROR;\n  };\n\n  this.goalSeekROR = function (IR, annPay, numYears, pBeginningBal) {\n    const GS = new GSeek(); // need to tweak things for big, ridiculous numbers\n\n    switch (true) {\n      case numYears > 20 && numYears < 40:\n        var tol = 1.5;\n        var maxIt = 10000000;\n        break;\n\n      case numYears >= 40:\n        var tol = 3;\n        var maxIt = 100000000;\n        break;\n\n      default:\n        var tol = .75;\n        var maxIt = 100000;\n        break;\n    }\n\n    GSResult = GS.goalSeek({\n      Func: mathfuncts.calcPVonIR,\n      aFuncParams: [IR, annPay, numYears, pBeginningBal],\n      oFuncArgTarget: {\n        Position: 3\n      },\n      Goal: newBalance,\n      Tol: tol,\n      maxIter: maxIt\n    });\n    return GSResult;\n  };\n} // end class MathFuncts\n\n/* =========================================================\n   ================= GOAL SEEKING FUNCTIONS ================\n   ========================================================= */\n\n\nfunction GSeek() {\n  this.goalSeek = function (oParams) {\n    var g, Y, Y1, OldTarget;\n    oParams.Tol = oParams.Tol || 0.001 * Goal;\n    oParams.maxIter = oParams.maxIter || 1000; //Iterate through the guesses\n\n    for (var i = 0; i < oParams.maxIter; i++) {\n      //define the root of the function as the error\n      Y = oParams.Func.apply(oParams.This, oParams.aFuncParams) - oParams.Goal; //was our initial guess a good one?\n\n      if (Math.abs(Y) <= oParams.Tol) {\n        return oParams.aFuncParams[oParams.oFuncArgTarget.Position];\n      } else {\n        OldTarget = oParams.aFuncParams[oParams.oFuncArgTarget.Position];\n        oParams.aFuncParams[oParams.oFuncArgTarget.Position] = OldTarget + Y;\n        Y1 = oParams.Func.apply(oParams.This, oParams.aFuncParams) - oParams.Goal;\n        g = (Y1 - Y) / Y;\n\n        if (g === 0) {\n          g = 0.0001;\n        }\n\n        ;\n        oParams.aFuncParams[oParams.oFuncArgTarget.Position] = OldTarget - Y / g;\n      }\n\n      ;\n    }\n\n    ;\n\n    if (Math.abs(Y) > oParams.Tol) {\n      return null;\n    }\n\n    ;\n  };\n} // end class GSeek","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/math_functs.js"],"names":["MathFuncts","mngFee","pBOY","pannPay","pmngFee","balEOY","pEconData","tyrs","myBalance","Math","pow","averageYield","$","sumOfYields","numYears","theTable","annPay","BOYBalance","debug","console","log","avgYield","html","toFixed","css","backgroundColor","fantasyPVonIR","append","fantasyPV","toLocaleString","avgROR","pBOYBalance","round","calcReturn","initVal","endVal","theReturn","abs","calcPVonIR","IR","myCalcPVonIR","calcSimpleFV","mySimpleFV","calcSimpleFVBOY","i","mySimpleFVBOY","randomGen","hi","lo","guess","random","recalcBtn","recalcvalues","recalc","RORTableArray","toggleBtn","x","selector","toggle","changeVal","newVal","id","idArr","split","clearTable","dispNewBal","totMngFee","remove","clearValues","newBalance","Number","BOY","EOYBalance","yrFromStart","weightedAvg","actualYield","idx","length","BOYidx","BOYBal","tolerance","guessCounter","guessLimit","GSResult","hiTest","loTest","flag","median","mathfuncts","adj","breakFlag","GSResultTest","goalSeekROR","isNaN","targetNumberLowerLimit","targetNumberUpperLimit","debugMsg","whichTable","e","inRange","actROR","pBeginningBal","GS","GSeek","tol","maxIt","goalSeek","Func","aFuncParams","oFuncArgTarget","Position","Goal","Tol","maxIter","oParams","g","Y","Y1","OldTarget","apply","This"],"mappings":"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","sourcesContent":["// +++++++++++++++++++++++++ //\n// Mathematical Calculations //\n// +++++++++++++++++++++++++ //\n\nfunction MathFuncts()  {\n\n\t\t\t//calc management fee\n\t\t\tthis.mngFee = function(pBOY, pannPay, pmngFee) {\n\t\t\t\treturn (pBOY + pannPay) * pmngFee;\n\t\t\t}\n\n\t\t\t// End-of-Year Balance Calculation //\n\t\t\tthis.balEOY = function(pBOY, pannPay, pmngFee, pEconData, tyrs) {\n\t\t\t\tif ( tyrs < 1 ) {tyrs = 1};\n\t\t\t\t// take out management fee at END of the year\n\t\t\t\tthis.myBalance = ((pBOY + pannPay) * Math.pow((1 + (pEconData / 1)), tyrs)) - ((pBOY+pannPay) * pmngFee);\n\t\t\t\t//console.log(\"myBalance is: \" + myBalance + \" | Year: \" + tyrs);\n\t\t\t\treturn this.myBalance;\n\t\t\t};\n\n\t\t\tthis.averageYield = function( $, sumOfYields, numYears, theTable, annPay, BOYBalance ) {\n\t\t\t\tif (debug) console.log(\"CALCULATE AVERAGE YIELD: \", sumOfYields, numYears, theTable, annPay, BOYBalance);\n\n\t\t\t\tavgYield = sumOfYields / numYears;\n\t\t\t\t$('.'+theTable+'-yields div.avgYield').html(\"<p>Average Yield: \" + avgYield.toFixed(2) + \"% </p>\");\n\t\t\t\tif (avgYield <= 0) {\n\t\t\t\t\t$('.'+theTable+'-yields div.avgYield').css({ backgroundColor: '#f2a2a2'});\n\t\t\t\t};\n\n\t\t\t\t\tthis.fantasyPVonIR(avgYield, annPay, numYears, BOYBalance[0]);\n\t\t\t\t\t$('.'+theTable+'-yields div.avgYield').append(\"<p style='font-size:0.7em;'>If True, Total Value Would Be: $\" + this.fantasyPV.toLocaleString() + \" </p>\");\n\t\t\t};\n\n\n\n\t\t\tthis.fantasyPVonIR = function(avgROR, annPay, numYears, pBOYBalance) {\n\t\t\t\t\t// calculate the value of the account,\n\t\t\t\t\t// IF Average ROR was true...\n\t\t\t\t\tvar avgROR = avgROR/100;\n\t\t\t\t\tthis.fantasyPV = Math.round((1+avgROR)*annPay*(Math.pow((1+avgROR),numYears)-1)/avgROR + pBOYBalance * Math.pow((1+avgROR),numYears));\n\t\t\t\t\treturn this.fantasyPV;\n\t\t\t};\n\n\n\t\t\tthis.calcReturn = function(initVal, endVal) {\n\t\t\t\tthis.theReturn = Math.abs((initVal - endVal) / initVal);\n\t\t\t\treturn this.theReturn;\n\t\t\t};\n\n\t\t\tthis.calcPVonIR = function(IR, annPay, numYears, pBOYBalance) {\n\t\t\t\tthis.myCalcPVonIR = Math.round((1+IR)*annPay*((Math.pow((1+IR),numYears)-1)/IR)  + pBOYBalance*Math.pow((1+IR/1),numYears));\n\t\t\t\t//alert(Number(this.myCalcPVonIR));\n\t\t\t\treturn this.myCalcPVonIR;\n\t\t\t};\n\n\t\t\tthis.calcSimpleFV  = function(IR, annPay, numYears, pBOYBalance) {\n\t\t\t\tthis.mySimpleFV = Math.round(pBOYBalance*Math.pow((1+IR),numYears))+(annPay*numYears);\n\t\t\t\treturn this.mySimpleFV;\n\t\t\t};\n\n\t\t\tthis.calcSimpleFVBOY  = function(IR, annPay, numYears, pBOYBalance, i) {\n\t\t\t\tif (i == 0) { pBOYBalance += annPay; numYears--; };\n\t\t\t\tthis.mySimpleFVBOY = (annPay) + Math.round(pBOYBalance*((1+IR)**numYears));\n\t\t\t\treturn this.mySimpleFVBOY;\n\t\t\t};\n\n\n\t\t\t// generate a random number within a range\n\t\t\tthis.randomGen = function(hi, lo) {\n\t\t\t\tvar guess = Math.random() * (hi - lo) + lo;\n\t\t\t\treturn guess;\n\t\t\t};\n\n\n\t\t\t// these functions recalculate table values\n\t\t\t// when annual contribution/payment has been changed\n\n\t\t\t\t//add a function to handle refresh buttons\n\t\t\t\tthis.recalcBtn = function() {\n\t\t\t\t\tconsole.log('RECALC');\n\t\t\t\t\trecalcvalues.recalc(RORTableArray);\n\t\t\t\t};\n\n\t\t\t\tthis.toggleBtn = function(x) {\n\t\t\t\t\tvar selector = \".ann-pay-table .recalc-btn, #annPayInput-\" + x + \", #annPayAmt-\" + x + \", #editBtn-\" + x + \", #recalcBtn-\" + x;\n\t\t\t\t\t$(selector).toggle();\n\t\t\t\t}\n\n\t\t\t\tthis.changeVal = function(newVal, id) {\n\t\t\t\t\tconsole.log(\"Value Changed to: \" + newVal + \" in field: \" + id);\n\t\t\t\t\tvar idArr = id.split(\"-\");\n\t\t\t\t\tconsole.log('Row: ' + idArr[1]);\n\t\t\t\t\tRORTableArray[4+(6*idArr[1])] = newVal;\n\n\t\t\t\t\trecalcvalues.recalc(RORTableArray, newVal, idArr[1]);\n\t\t\t\t};\n\n\t\t\t\tthis.clearTable = function(pBOYBalance) {\n\t\t\t\t\tdispNewBal = pBOYBalance^0;\n\t\t\t\t\ttotMngFee = (dispNewBal + annPay) * mngFee;\n\t\t\t\t\t$('.output-data-row').remove();\n\t\t\t\t};\n\n\t\t\t\tthis.clearValues = function() {\n\t\t\t\t\t newBalance = new Number(BOY);\n\t\t\t\t\t myBalance = new Number(0);\n\t\t\t\t\t BOYBalance = [];\n\t\t\t\t\t EOYBalance = [];\n\t\t\t\t\t sumOfYields = null;\n\t\t\t\t\t dispNewBal = null;\n           yrFromStart = null;\n\t\t\t\t};\n\n\t\t\t\tthis.weightedAvg = function() {\n\n\t\t\t\t};\n\n\t\t\t// ++++++++++++++++++++++ //\n\t\t\t// Goal-Seeking Functions //\n\t\t\t// ++++++++++++++++++++++ //\n\n\t\t\tthis.actualYield = function(theTable, idx) {\n\t\t\t\t//console.log (\"actualYield() called by: \" + this.actualYield.caller);\n\n\t\t\t\tif (BOYBalance.length) {\n\t\t\t\t\tvar BOYidx = BOYBalance.length-1;\n\t\t\t\t\tvar BOYBal = Number(BOYBalance[0]);\n\t\t\t\t};\n\n\t\t\t  console.log(\"idx=\" + idx, \"BOYBal=\" + BOYBal);\n\n\t\t\t\t// deal with \"zero\" bug....\n\t\t\t\tif ( BOYBal <= 1 ) BOYBal = 1;\n\t\t\t\tif ( BOYBal <= 10 && numYears >= 10 ) {\n\t\t\t\t\tBOYBal = 10; // seed a number so that larger calcs work\n\t\t\t\t};\n\t\t\t\t//endif \"zero\" bug\n\n\t\t\t\tvar IR = 0;\n\n\t\t\t\t// let's tweak accuracy depending on total of account values\n\t\t\t\t// tolerance is a percentage of the target.\n\t\t\t\tvar tolerance = Number();\n\t\t\t\tswitch (true) {\n\n\t\t\t\t\tcase ( newBalance >= 1 && newBalance < 5000 ) :\n\t\t\t\t\t\ttolerance = .001;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance >= 5000 && newBalance < 10000 ) :\n\t\t\t\t\t\ttolerance = .005;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance >= 10000 && newBalance < 50000 ) :\n\t\t\t\t\t\ttolerance = .007;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance >= 50000 && newBalance < 200000 ) :\n\t\t\t\t\t\ttolerance = .02;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance >= 200000 && newBalance < 500000 ) :\n\t\t\t\t\t\ttolerance = .025;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance >= 500000 && newBalance < 1000000 ) :\n\t\t\t\t\t\ttolerance = .03;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance >= 1000000 && newBalance < 2500000 ) :\n\t\t\t\t\t\ttolerance = .04;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance >= 2500000 && newBalance < 5000000 ) :\n\t\t\t\t\t\ttolerance = .05;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ( newBalance > 5000000 ) :\n\t\t\t\t\t\ttolerance = .055;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault :\n\t\t\t\t\t\ttolerance = .007;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}; // end switch\n\n\n\t\t\t\t\tvar guessCounter = 0; // set a counter to track number of guesses\n\t\t\t\t\tvar guessLimit = 0.25;\n\t\t\t\t\tvar hi = guessLimit, lo = guessLimit * -1; //set initial range of random numbers to test\n\n\t\t\t\t\tGSResult = null;\n\n\t\t\t\tdo {\n\t\t\t\t\t// first, store the values for lo and hi into hiTest and loTest to compare\n\t\t\t\t\tvar hiTest = hi, loTest = lo;\n\t\t\t\t\tvar flag = true; //reset flag each guess\n\n\t\t\t\t\tvar median = (hi + lo)/2;\n\n\t\t\t\t\t// generate a new random IR within a range to test\n\t\t\t\t\t//console.log(mathfuncts.randomGen(hi, lo));\n\t\t\t\t\tIR = mathfuncts.randomGen(hi, lo)\n\n\t\t\t\t\t// prevent hi and lo from switching places...\n\t\t\t\t\tswitch (true) {\n\t\t\t\t\t\tcase ( hi < lo ) :\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\thi = hiTest;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ( lo > hi ) :\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\tlo = loTest;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\n\t\t\t\t\t// need to tweak things for big, ridiculous numbers\n\t\t\t\t\tswitch (true) {\n\t\t\t\t\t\tcase (newBalance >= 100000 && numYears < 500000) :\n\t\t\t\t\t\t\tvar adj = .0000001;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase (newBalance >= 500000 && numYears < 1000000) :\n\t\t\t\t\t\t\tvar adj = .00000001;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase (newBalance >= 1000000 && numYears < 5000000) :\n\t\t\t\t\t\t\tvar adj = .000000001;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase (newBalance >= 5000000 && numYears < 10000000) :\n\t\t\t\t\t\t\tvar adj = .0000000001;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase (newBalance >= 10000000) :\n\t\t\t\t\t\t\tvar adj = .00000000001;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tvar adj = .0000001;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t }\n\n\t\t\t\t\tvar breakFlag = 0;\n\n\t\t\t\t\t// only run the calculations if the guess is in proper range\n\t\t\t\t\tif ( flag === true ) {\n\t\t\t\t\t\tGSResultTest = GSResult;\n\n\t\t\t\t\t\t// run the goalSeek on beginning balance\n\t\t\t\t\t\t// to test IR | pass null to the beginning balance\n\t\t\t\t\t\tmathfuncts.goalSeekROR(IR, annPay, numYears, null);\n\n\t\t\t\t\t\tif ( ( GSResult > 0 && GSResultTest > 0) && ( !isNaN(GSResult) ) ) { //  we don't count it if GSResult < 0, NaN\n\t\t\t\t\t\t\tguessCounter += 1;\n\t\t\t\t\t\t\tvar targetNumberLowerLimit = BOYBal - (newBalance.toFixed(2) * ((tolerance/100) + (numYears * adj)));\n\t\t\t\t\t\t\tvar targetNumberUpperLimit = BOYBal + (newBalance.toFixed(2) * ((tolerance/100) + (numYears * adj)));\n\n\t\t\t\t\t\t\tif ( GSResultTest !== null) GSResultTest = GSResultTest.toFixed(4);\n\t\t\t\t\t\t\tif (GSResult !== null) {\n\t\t\t\t\t\t\t\tif (GSResult.toFixed(4) == GSResultTest) breakFlag = 1;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfunction debugMsg() {\n\t\t\t\t\t\t\t\tvar whichTable;\n\n\t\t\t\t\t\t\t\t// For Debugging..\n\t\t\t\t\t\t\t\tswitch (idx) {\n\t\t\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\t\t\twhichTable = \"STOCKS\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\twhichTable = \"BONDS\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\twhichTable = \"TREASURIES\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t\twhichTable = \"COMPOSITE\";\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tdefault :\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}; // / debugging...\n\n\t\t\t\t\t\t\t\ttry {console.log(guessCounter + \" : [\" + whichTable + \"] IR: \" + (IR*100).toFixed(2) + \" -> GSResult: \" + GSResult.toFixed(4) + \" || Hi: \" + (hi*100).toFixed(4) + \" | Lo: \" + (lo*100).toFixed(4) + \" | distance: \" + (hiTest - loTest).toFixed(4) + \" --> BREAKFLAG = \" + breakFlag  ); } catch(e) { console.log(\"----> ERROR in GSResult: \" + GSResult + \" or IR: \" + (IR*100) + \">>>> || Hi: \" + (hi*100).toFixed(4) + \" | Lo: \" + (lo*100).toFixed(4) ); }\n\n\t\t\t\t\t\t\t\tconsole.log(\"GSResultTest: \" + GSResultTest + \" | targetLow: \" + targetNumberLowerLimit + \",  targetHi: \" + targetNumberUpperLimit  + \" || median: \" + (median*100).toFixed(4) + \" hiTest: \" + (hiTest*100).toFixed(4) + \", loTest: \" + (loTest*100).toFixed(4));\n\t\t\t\t\t\t\t\tconsole.log('----------------------------------------------------------------------------------------------------------------------');\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif ( debug ) debugMsg();\n\n\t\t\t\t\t\t\t// narrow hi/lo range of random numbers to generate on next iteration based on guessed number\n\t\t\t\t\t\t\tif ( IR < median ) {\n\t\t\t\t\t\t\t\tif (GSResult > targetNumberLowerLimit && IR > loTest && IR < hiTest )  { lo = IR };\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (GSResult < targetNumberUpperLimit && IR < hiTest && IR > loTest )  { hi = IR };\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// check to see if the hi and lo are too close and need to be adjusted upwards to find the target zone,\n\t\t\t\t\t\t\t\t// no further than the limits\n\t\t\t\t\t\t\t\tif ( (hiTest - loTest) < 0.001 && (hi - lo) > -0.001 ) { lo -= .005; hi += .005; console.log('too close!')};\n\t\t\t\t\t\t\t\tif ( hi > guessLimit ) hi = guessLimit;\n\t\t\t\t\t\t\t\tif ( lo < guessLimit * -1 ) lo = guessLimit * -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\tvar inRange = false;\n\t\t\t\t\tif ((( !(GSResult > targetNumberLowerLimit && GSResult < targetNumberUpperLimit) || isNaN(GSResult) || GSResult === null) && guessCounter < 5000 ) ) {\n\t\t\t\t\t\tinRange = true;\n\t\t\t\t\t};\n\n\t\t\t\t} while (\n\t\t\t\t\t\tinRange == true || ( inRange == true && breakFlag == 1 )\n\t\t\t\t); // end do/while loop\n\n\t\t\t\thi = guessLimit, lo = guessLimit * -1; //reset initial range of random numbers to test\n\n\n\t\t\t\tactROR = IR*100;\n\t\t\t\tconsole.log(\"===========================================================\");\n\t\t\t\tconsole.log(\"ACTUAL ROR = \" + actROR.toFixed(2) + \"%\");\n\t\t\t\tconsole.log(\"===========================================================\");\n\t\t\t\tconsole.log(\" \");\n\n\t\t\t\t$('.'+theTable+'-yields div.actYield').html(\"<p style='font-weight: bold;'>ACTUAL Yield: \" + actROR.toFixed(2) + \"% </p>\");\n\t\t\t\tif (actROR <= 0) {\n\t\t\t\t\t$('.'+theTable+'-yields div.actYield').css({ backgroundColor: '#f2a2a2' });\n\t\t\t\t};\n\n\t\t\t\treturn actROR;\n\t\t\t};\n\n\t\t\tthis.goalSeekROR = function(IR, annPay, numYears, pBeginningBal) {\n\t\t\t\t const GS = new GSeek();\n\n\t\t\t\t// need to tweak things for big, ridiculous numbers\n\t\t\t\tswitch (true) {\n\t\t\t\t\tcase (numYears > 20 && numYears < 40) :\n\t\t\t\t\t\tvar tol = 1.5;\n\t\t\t\t\t\tvar maxIt = 10000000;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase (numYears >= 40) :\n\t\t\t\t\t\tvar tol = 3;\n\t\t\t\t\t\tvar maxIt = 100000000;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvar tol = .75;\n\t\t\t\t\t\tvar maxIt = 100000;\n\t\t\t\t\t\tbreak;\n\t\t\t\t }\n\n\t\t\t\t GSResult = GS.goalSeek({\n\t\t\t\t\tFunc: mathfuncts.calcPVonIR,\n\t\t\t\t\taFuncParams: [IR, annPay, numYears, pBeginningBal],\n\t\t\t\t\toFuncArgTarget: {\n\t\t\t\t\t  Position: 3\n\t\t\t\t\t},\n\t\t\t\t\tGoal: newBalance,\n\t\t\t\t\tTol: tol,\n\t\t\t\t\tmaxIter: maxIt\n\t\t\t\t  });\n\n\t\t\t\treturn GSResult;\n\n\t\t\t};\n\n\n} // end class MathFuncts\n\n\n/* =========================================================\n   ================= GOAL SEEKING FUNCTIONS ================\n   ========================================================= */\n\n   function GSeek() {\n\n\n\t\t\tthis.goalSeek = function(oParams) {\n\t\t\t\tvar g, Y, Y1, OldTarget;\n\n\t\t\t\toParams.Tol = (oParams.Tol || 0.001 * Goal);\n\t\t\t\toParams.maxIter = (oParams.maxIter || 1000);\n\n\n\t\t\t\t\t//Iterate through the guesses\n\t\t\t\t\tfor (var i = 0; i < oParams.maxIter; i++) {\n\t\t\t\t\t\t//define the root of the function as the error\n\t\t\t\t\t\tY = oParams.Func.apply(oParams.This, oParams.aFuncParams) - oParams.Goal;\n\t\t\t\t\t\t//was our initial guess a good one?\n\t\t\t\t\t\tif (Math.abs(Y) <= oParams.Tol) {\n\t\t\t\t\t\t\treturn oParams.aFuncParams[oParams.oFuncArgTarget.Position];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tOldTarget = oParams.aFuncParams[oParams.oFuncArgTarget.Position];\n\t\t\t\t\t\t\toParams.aFuncParams[oParams.oFuncArgTarget.Position] = OldTarget + Y;\n\t\t\t\t\t\t\tY1 = oParams.Func.apply(oParams.This, oParams.aFuncParams) - oParams.Goal;\n\t\t\t\t\t\t\tg = (Y1 - Y) / Y;\n\n\t\t\t\t\t\t\tif (g === 0) {\n\t\t\t\t\t\t\t\tg = 0.0001;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\toParams.aFuncParams[oParams.oFuncArgTarget.Position] = OldTarget - Y / g;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t};\n\t\t\t\t\tif (Math.abs(Y) > oParams.Tol) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t};\n\t\t\t\t};\n\n\n   }// end class GSeek\n"]},"metadata":{},"sourceType":"module"}