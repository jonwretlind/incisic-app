{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n    this.finance = new Finance();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length; // number of periods\n\n    let rate = .1; // initial guess for the rate of return\n    // calculate the net present value of the investments at the initial guess for the rate of return\n\n    let fval = this.calcfval(rate, dataTable, n);\n    console.log(\"initialValue:\", initialValue, \" fval:\", fval, \" targetValue:\", targetValue); // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n    const tolerance = 1e-4; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 1e+4; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs(fval - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate -= (targetValue - fval) / fval; // recalculate the net present value at the new rate of return\n\n      fval = this.calcfval(rate, dataTable, n);\n      console.log(fval, iterations);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    return rate;\n  }\n\n  calcfval(r, dataTable, n) {\n    let fval = initialValue;\n\n    for (var i = 0; i < n; i++) {\n      fval = this.finance.FV(r, dataTable[i].balEOY - dataTable[i].mngFee, 1);\n    }\n\n    return fval;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","finance","seek","initialValue","dataTable","targetValue","n","length","rate","fval","calcfval","console","log","tolerance","maxIterations","iterations","Math","abs","Error","r","i","FV","balEOY","mngFee"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;AACA,SAAKC,OAAL,GAAe,IAAIH,OAAJ,EAAf;AACD;;AACDI,EAAAA,IAAI,CAACC,YAAD,EAAeC,SAAf,EAA0BC,WAA1B,EAAuC;AACzC,UAAMC,CAAC,GAAGF,SAAS,CAACG,MAApB,CADyC,CACZ;;AAC7B,QAAIC,IAAI,GAAG,EAAX,CAFyC,CAEzB;AAEhB;;AACA,QAAIC,IAAI,GAAG,KAAKC,QAAL,CAAcF,IAAd,EAAoBJ,SAApB,EAA+BE,CAA/B,CAAX;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BT,YAA7B,EAA2C,QAA3C,EAAqDM,IAArD,EAA2D,eAA3D,EAA4EJ,WAA5E,EANyC,CAQzC;;AACA,UAAMQ,SAAS,GAAG,IAAlB,CATyC,CAShB;;AACzB,UAAMC,aAAa,GAAG,IAAtB,CAVyC,CAUZ;;AAC7B,QAAIC,UAAU,GAAG,CAAjB,CAXyC,CAWpB;;AACrB,WAAOC,IAAI,CAACC,GAAL,CAASR,IAAI,GAAGJ,WAAhB,IAA+BQ,SAA/B,IAA4CE,UAAU,GAAGD,aAAhE,EAA+E;AAC7E;AACAN,MAAAA,IAAI,IAAI,CAACH,WAAW,GAAGI,IAAf,IAAuBA,IAA/B,CAF6E,CAI7E;;AACAA,MAAAA,IAAI,GAAG,KAAKC,QAAL,CAAcF,IAAd,EAAoBJ,SAApB,EAA+BE,CAA/B,CAAP;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBM,UAAlB;AACAA,MAAAA,UAAU;AACX;;AAED,QAAIA,UAAU,KAAKD,aAAnB,EAAkC;AAChC,YAAM,IAAII,KAAJ,CAAU,mEAAV,CAAN;AACD;;AACD,WAAOV,IAAP;AAED;;AAEDE,EAAAA,QAAQ,CAACS,CAAD,EAAIf,SAAJ,EAAeE,CAAf,EAAkB;AACxB,QAAIG,IAAI,GAAGN,YAAX;;AACA,SAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,CAApB,EAAuBc,CAAC,EAAxB,EAA4B;AAC1BX,MAAAA,IAAI,GAAG,KAAKR,OAAL,CAAaoB,EAAb,CAAgBF,CAAhB,EAAmBf,SAAS,CAACgB,CAAD,CAAT,CAAaE,MAAb,GAAsBlB,SAAS,CAACgB,CAAD,CAAT,CAAaG,MAAtD,EAA8D,CAA9D,CAAP;AACD;;AACD,WAAOd,IAAP;AACD;;AAzCoC;;AA4CvC,eAAeV,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n    this.finance = new Finance();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length;  // number of periods\n    let rate = .1;  // initial guess for the rate of return\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let fval = this.calcfval(rate, dataTable, n);\n    console.log(\"initialValue:\", initialValue, \" fval:\", fval, \" targetValue:\", targetValue);\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-4;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 1e+4;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs(fval - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate -= (targetValue - fval) / fval;\n\n      // recalculate the net present value at the new rate of return\n      fval = this.calcfval(rate, dataTable, n);\n      console.log(fval, iterations);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n    return rate;\n\n  }\n\n  calcfval(r, dataTable, n) {\n    let fval = initialValue;\n    for (var i = 0; i < n; i++) {\n      fval = this.finance.FV(r, dataTable[i].balEOY - dataTable[i].mngFee, 1);\n    }\n    return fval;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}