{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getWhileStatement(node, context, id) {\n  const test = (0, _parseExpression.default)(node.test, context);\n\n  const _context$dynamicBlock = context.dynamicBlock(childContext => {\n    return (0, _visitors.visitExpressions)(node.block.nodes, context).map(exp => _babelTypes.default.expressionStatement(_babelTypes.default.assignmentExpression('=', _babelTypes.default.memberExpression(id, _babelTypes.default.memberExpression(id, _babelTypes.default.identifier('length')), true), exp)));\n  }),\n        body = _context$dynamicBlock.result,\n        variables = _context$dynamicBlock.variables;\n\n  if (variables.length) {\n    body.unshift(_babelTypes.default.variableDeclaration('let', variables.map(id => _babelTypes.default.variableDeclarator(id))));\n  }\n\n  return _babelTypes.default.whileStatement(test, _babelTypes.default.blockStatement(body));\n}\n\nconst WhileVisitor = {\n  expression(node, context) {\n    const id = context.generateUidIdentifier('pug_nodes');\n    return _babelTypes.default.callExpression(_babelTypes.default.arrowFunctionExpression([id], _babelTypes.default.blockStatement([getWhileStatement(node, context, id), _babelTypes.default.returnStatement(id)])), [_babelTypes.default.arrayExpression([])]);\n  }\n\n};\nvar _default = WhileVisitor;\nexports.default = _default;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/visitors/While.js"],"names":["Object","defineProperty","exports","value","default","_parseExpression","_interopRequireDefault","require","_babelTypes","_visitors","obj","__esModule","getWhileStatement","node","context","id","test","_context$dynamicBlock","dynamicBlock","childContext","visitExpressions","block","nodes","map","exp","expressionStatement","assignmentExpression","memberExpression","identifier","body","result","variables","length","unshift","variableDeclaration","variableDeclarator","whileStatement","blockStatement","WhileVisitor","expression","generateUidIdentifier","callExpression","arrowFunctionExpression","returnStatement","arrayExpression","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getWhileStatement(node, context, id) {\n  const test = (0, _parseExpression.default)(node.test, context);\n\n  const _context$dynamicBlock = context.dynamicBlock(childContext => {\n    return (0, _visitors.visitExpressions)(node.block.nodes, context).map(exp => _babelTypes.default.expressionStatement(_babelTypes.default.assignmentExpression('=', _babelTypes.default.memberExpression(id, _babelTypes.default.memberExpression(id, _babelTypes.default.identifier('length')), true), exp)));\n  }),\n        body = _context$dynamicBlock.result,\n        variables = _context$dynamicBlock.variables;\n\n  if (variables.length) {\n    body.unshift(_babelTypes.default.variableDeclaration('let', variables.map(id => _babelTypes.default.variableDeclarator(id))));\n  }\n\n  return _babelTypes.default.whileStatement(test, _babelTypes.default.blockStatement(body));\n}\n\nconst WhileVisitor = {\n  expression(node, context) {\n    const id = context.generateUidIdentifier('pug_nodes');\n    return _babelTypes.default.callExpression(_babelTypes.default.arrowFunctionExpression([id], _babelTypes.default.blockStatement([getWhileStatement(node, context, id), _babelTypes.default.returnStatement(id)])), [_babelTypes.default.arrayExpression([])]);\n  }\n\n};\nvar _default = WhileVisitor;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}