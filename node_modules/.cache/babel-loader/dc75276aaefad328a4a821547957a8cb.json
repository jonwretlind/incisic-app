{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parse;\n\nvar _core = require(\"@babel/core\");\n\nfunction parse(src, context) {\n  try {\n    return (0, _core.transform)(src, {\n      ast: true,\n      babelrc: false,\n      configFile: false,\n      code: false,\n      parserOpts: context.file.parserOpts,\n      plugins: [_ref => {\n        let {\n          types: t\n        } = _ref;\n        return {\n          visitor: {\n            ReferencedIdentifier(path) {\n              const node = path.node,\n                    scope = path.scope;\n              const name = node.name,\n                    type = node.type;\n              if (scope.getBindingIdentifier(name)) return;\n              const variable = context.getVariable(name);\n\n              if (variable) {\n                path.replaceWith(type === 'JSXIdentifier' ? t.jSXIdentifier(variable.id.name) : variable.id);\n              }\n            },\n\n            AssignmentExpression(path) {\n              if (t.isIdentifier(path.node.left)) {\n                const variable = context.getVariable(path.node.left.name);\n\n                if (variable) {\n                  if (variable.kind === 'const') {\n                    const err = context.error('CONSTANT_VARIABLE_MUTATION', `You cannot update \"${path.node.left.name}\" because it is constant`);\n                    throw err;\n                  }\n\n                  path.get('left').replaceWith(variable.id);\n                }\n              }\n            },\n\n            UpdateExpression(path) {\n              if (t.isIdentifier(path.node.argument)) {\n                const variable = context.getVariable(path.node.argument.name);\n\n                if (variable && variable.kind === 'const') {\n                  const err = context.error('CONSTANT_VARIABLE_MUTATION', `You cannot update \"${path.node.argument.name}\" because it is constant`);\n                  throw err;\n                }\n              }\n            }\n\n          }\n        };\n      }]\n    }).ast.program.body;\n  } catch (ex) {\n    const err = context.error('JS_SYNTAX_ERROR', ex.message.replace(/^unknown\\: /, ''));\n    throw err;\n  }\n}","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/utils/parse.js"],"names":["Object","defineProperty","exports","value","default","parse","_core","require","src","context","transform","ast","babelrc","configFile","code","parserOpts","file","plugins","types","t","visitor","ReferencedIdentifier","path","node","scope","name","type","getBindingIdentifier","variable","getVariable","replaceWith","jSXIdentifier","id","AssignmentExpression","isIdentifier","left","kind","err","error","get","UpdateExpression","argument","program","body","ex","message","replace"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parse;\n\nvar _core = require(\"@babel/core\");\n\nfunction parse(src, context) {\n  try {\n    return (0, _core.transform)(src, {\n      ast: true,\n      babelrc: false,\n      configFile: false,\n      code: false,\n      parserOpts: context.file.parserOpts,\n      plugins: [({\n        types: t\n      }) => {\n        return {\n          visitor: {\n            ReferencedIdentifier(path) {\n              const node = path.node,\n                    scope = path.scope;\n              const name = node.name,\n                    type = node.type;\n              if (scope.getBindingIdentifier(name)) return;\n              const variable = context.getVariable(name);\n\n              if (variable) {\n                path.replaceWith(type === 'JSXIdentifier' ? t.jSXIdentifier(variable.id.name) : variable.id);\n              }\n            },\n\n            AssignmentExpression(path) {\n              if (t.isIdentifier(path.node.left)) {\n                const variable = context.getVariable(path.node.left.name);\n\n                if (variable) {\n                  if (variable.kind === 'const') {\n                    const err = context.error('CONSTANT_VARIABLE_MUTATION', `You cannot update \"${path.node.left.name}\" because it is constant`);\n                    throw err;\n                  }\n\n                  path.get('left').replaceWith(variable.id);\n                }\n              }\n            },\n\n            UpdateExpression(path) {\n              if (t.isIdentifier(path.node.argument)) {\n                const variable = context.getVariable(path.node.argument.name);\n\n                if (variable && variable.kind === 'const') {\n                  const err = context.error('CONSTANT_VARIABLE_MUTATION', `You cannot update \"${path.node.argument.name}\" because it is constant`);\n                  throw err;\n                }\n              }\n            }\n\n          }\n        };\n      }]\n    }).ast.program.body;\n  } catch (ex) {\n    const err = context.error('JS_SYNTAX_ERROR', ex.message.replace(/^unknown\\: /, ''));\n    throw err;\n  }\n}"]},"metadata":{},"sourceType":"script"}