{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildJSXElement = buildJSXElement;\nexports.buildJSXFragment = buildJSXFragment;\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction buildJSXElement(tag, attrs, children) {\n  const noChildren = children.length === 0;\n\n  const open = _babelTypes.default.jSXOpeningElement(tag, attrs, noChildren);\n\n  const close = noChildren ? null : _babelTypes.default.jSXClosingElement(tag);\n  return _babelTypes.default.jSXElement(open, close, children, noChildren);\n}\n\nconst isAllowedChild = item => ['JSXText', 'JSXExpressionContainer', 'JSXSpreadChild', 'JSXElement'].includes(item.type); // TODO: This can be replaced when migrating to Babel 7 as JSXFragment\n// has been added in v7.0.0-beta.30.\n\n\nfunction buildJSXFragment(children) {\n  const fragmentExpression = _babelTypes.default.jSXMemberExpression(_babelTypes.default.jSXIdentifier('React'), _babelTypes.default.jSXIdentifier('Fragment'));\n\n  const jSXChildren = children.map(item => {\n    if (!isAllowedChild(item)) {\n      if (item.type === 'StringLiteral') {\n        return _babelTypes.default.jSXText(item.value);\n      }\n\n      return _babelTypes.default.jSXExpressionContainer(item);\n    }\n\n    return item;\n  });\n  return buildJSXElement(fragmentExpression, [], jSXChildren);\n}","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/utils/jsx.js"],"names":["Object","defineProperty","exports","value","buildJSXElement","buildJSXFragment","_babelTypes","_interopRequireDefault","require","obj","__esModule","default","tag","attrs","children","noChildren","length","open","jSXOpeningElement","close","jSXClosingElement","jSXElement","isAllowedChild","item","includes","type","fragmentExpression","jSXMemberExpression","jSXIdentifier","jSXChildren","map","jSXText","jSXExpressionContainer"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BA,eAA1B;AACAF,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASL,eAAT,CAAyBQ,GAAzB,EAA8BC,KAA9B,EAAqCC,QAArC,EAA+C;AAC7C,QAAMC,UAAU,GAAGD,QAAQ,CAACE,MAAT,KAAoB,CAAvC;;AAEA,QAAMC,IAAI,GAAGX,WAAW,CAACK,OAAZ,CAAoBO,iBAApB,CAAsCN,GAAtC,EAA2CC,KAA3C,EAAkDE,UAAlD,CAAb;;AAEA,QAAMI,KAAK,GAAGJ,UAAU,GAAG,IAAH,GAAUT,WAAW,CAACK,OAAZ,CAAoBS,iBAApB,CAAsCR,GAAtC,CAAlC;AACA,SAAON,WAAW,CAACK,OAAZ,CAAoBU,UAApB,CAA+BJ,IAA/B,EAAqCE,KAArC,EAA4CL,QAA5C,EAAsDC,UAAtD,CAAP;AACD;;AAED,MAAMO,cAAc,GAAGC,IAAI,IAAI,CAAC,SAAD,EAAY,wBAAZ,EAAsC,gBAAtC,EAAwD,YAAxD,EAAsEC,QAAtE,CAA+ED,IAAI,CAACE,IAApF,CAA/B,C,CAA0H;AAC1H;;;AAGA,SAASpB,gBAAT,CAA0BS,QAA1B,EAAoC;AAClC,QAAMY,kBAAkB,GAAGpB,WAAW,CAACK,OAAZ,CAAoBgB,mBAApB,CAAwCrB,WAAW,CAACK,OAAZ,CAAoBiB,aAApB,CAAkC,OAAlC,CAAxC,EAAoFtB,WAAW,CAACK,OAAZ,CAAoBiB,aAApB,CAAkC,UAAlC,CAApF,CAA3B;;AAEA,QAAMC,WAAW,GAAGf,QAAQ,CAACgB,GAAT,CAAaP,IAAI,IAAI;AACvC,QAAI,CAACD,cAAc,CAACC,IAAD,CAAnB,EAA2B;AACzB,UAAIA,IAAI,CAACE,IAAL,KAAc,eAAlB,EAAmC;AACjC,eAAOnB,WAAW,CAACK,OAAZ,CAAoBoB,OAApB,CAA4BR,IAAI,CAACpB,KAAjC,CAAP;AACD;;AAED,aAAOG,WAAW,CAACK,OAAZ,CAAoBqB,sBAApB,CAA2CT,IAA3C,CAAP;AACD;;AAED,WAAOA,IAAP;AACD,GAVmB,CAApB;AAWA,SAAOnB,eAAe,CAACsB,kBAAD,EAAqB,EAArB,EAAyBG,WAAzB,CAAtB;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildJSXElement = buildJSXElement;\nexports.buildJSXFragment = buildJSXFragment;\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction buildJSXElement(tag, attrs, children) {\n  const noChildren = children.length === 0;\n\n  const open = _babelTypes.default.jSXOpeningElement(tag, attrs, noChildren);\n\n  const close = noChildren ? null : _babelTypes.default.jSXClosingElement(tag);\n  return _babelTypes.default.jSXElement(open, close, children, noChildren);\n}\n\nconst isAllowedChild = item => ['JSXText', 'JSXExpressionContainer', 'JSXSpreadChild', 'JSXElement'].includes(item.type); // TODO: This can be replaced when migrating to Babel 7 as JSXFragment\n// has been added in v7.0.0-beta.30.\n\n\nfunction buildJSXFragment(children) {\n  const fragmentExpression = _babelTypes.default.jSXMemberExpression(_babelTypes.default.jSXIdentifier('React'), _babelTypes.default.jSXIdentifier('Fragment'));\n\n  const jSXChildren = children.map(item => {\n    if (!isAllowedChild(item)) {\n      if (item.type === 'StringLiteral') {\n        return _babelTypes.default.jSXText(item.value);\n      }\n\n      return _babelTypes.default.jSXExpressionContainer(item);\n    }\n\n    return item;\n  });\n  return buildJSXElement(fragmentExpression, [], jSXChildren);\n}"]},"metadata":{},"sourceType":"script"}