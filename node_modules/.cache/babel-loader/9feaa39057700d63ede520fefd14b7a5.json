{"ast":null,"code":"'use strict';\n\nvar doctypes = require('doctypes');\n\nvar makeError = require('pug-error');\n\nvar buildRuntime = require('pug-runtime/build');\n\nvar runtime = require('pug-runtime');\n\nvar compileAttrs = require('pug-attrs');\n\nvar selfClosing = require('void-elements');\n\nvar constantinople = require('constantinople');\n\nvar stringify = require('js-stringify');\n\nvar addWith = require('with'); // This is used to prevent pretty printing inside certain tags\n\n\nvar WHITE_SPACE_SENSITIVE_TAGS = {\n  pre: true,\n  textarea: true\n};\nvar INTERNAL_VARIABLES = ['pug', 'pug_mixins', 'pug_interp', 'pug_debug_filename', 'pug_debug_line', 'pug_debug_sources', 'pug_html'];\nmodule.exports = generateCode;\nmodule.exports.CodeGenerator = Compiler;\n\nfunction generateCode(ast, options) {\n  return new Compiler(ast, options).compile();\n}\n\nfunction isConstant(src) {\n  return constantinople(src, {\n    pug: runtime,\n    pug_interp: undefined\n  });\n}\n\nfunction toConstant(src) {\n  return constantinople.toConstant(src, {\n    pug: runtime,\n    pug_interp: undefined\n  });\n}\n/**\n * Initialize `Compiler` with the given `node`.\n *\n * @param {Node} node\n * @param {Object} options\n * @api public\n */\n\n\nfunction Compiler(node, options) {\n  this.options = options = options || {};\n  this.node = node;\n  this.bufferedConcatenationCount = 0;\n  this.hasCompiledDoctype = false;\n  this.hasCompiledTag = false;\n  this.pp = options.pretty || false;\n\n  if (this.pp && typeof this.pp !== 'string') {\n    this.pp = '  ';\n  }\n\n  if (this.pp && !/^\\s+$/.test(this.pp)) {\n    throw new Error('The pretty parameter should either be a boolean or whitespace only string');\n  }\n\n  this.debug = false !== options.compileDebug;\n  this.indents = 0;\n  this.parentIndents = 0;\n  this.terse = false;\n  this.mixins = {};\n  this.dynamicMixins = false;\n  this.eachCount = 0;\n  if (options.doctype) this.setDoctype(options.doctype);\n  this.runtimeFunctionsUsed = [];\n  this.inlineRuntimeFunctions = options.inlineRuntimeFunctions || false;\n\n  if (this.debug && this.inlineRuntimeFunctions) {\n    this.runtimeFunctionsUsed.push('rethrow');\n  }\n}\n/**\n * Compiler prototype.\n */\n\n\nCompiler.prototype = {\n  runtime: function (name) {\n    if (this.inlineRuntimeFunctions) {\n      this.runtimeFunctionsUsed.push(name);\n      return 'pug_' + name;\n    } else {\n      return 'pug.' + name;\n    }\n  },\n  error: function (message, code, node) {\n    var err = makeError(code, message, {\n      line: node.line,\n      column: node.column,\n      filename: node.filename\n    });\n    throw err;\n  },\n\n  /**\n   * Compile parse tree to JavaScript.\n   *\n   * @api public\n   */\n  compile: function () {\n    this.buf = [];\n    if (this.pp) this.buf.push('var pug_indent = [];');\n    this.lastBufferedIdx = -1;\n    this.visit(this.node);\n\n    if (!this.dynamicMixins) {\n      // if there are no dynamic mixins we can remove any un-used mixins\n      var mixinNames = Object.keys(this.mixins);\n\n      for (var i = 0; i < mixinNames.length; i++) {\n        var mixin = this.mixins[mixinNames[i]];\n\n        if (!mixin.used) {\n          for (var x = 0; x < mixin.instances.length; x++) {\n            for (var y = mixin.instances[x].start; y < mixin.instances[x].end; y++) {\n              this.buf[y] = '';\n            }\n          }\n        }\n      }\n    }\n\n    var js = this.buf.join('\\n');\n    var globals = this.options.globals ? this.options.globals.concat(INTERNAL_VARIABLES) : INTERNAL_VARIABLES;\n\n    if (this.options.self) {\n      js = 'var self = locals || {};' + js;\n    } else {\n      js = addWith('locals || {}', js, globals.concat(this.runtimeFunctionsUsed.map(function (name) {\n        return 'pug_' + name;\n      })));\n    }\n\n    if (this.debug) {\n      if (this.options.includeSources) {\n        js = 'var pug_debug_sources = ' + stringify(this.options.includeSources) + ';\\n' + js;\n      }\n\n      js = 'var pug_debug_filename, pug_debug_line;' + 'try {' + js + '} catch (err) {' + (this.inlineRuntimeFunctions ? 'pug_rethrow' : 'pug.rethrow') + '(err, pug_debug_filename, pug_debug_line' + (this.options.includeSources ? ', pug_debug_sources[pug_debug_filename]' : '') + ');' + '}';\n    }\n\n    return buildRuntime(this.runtimeFunctionsUsed) + 'function ' + (this.options.templateName || 'template') + '(locals) {var pug_html = \"\", pug_mixins = {}, pug_interp;' + js + ';return pug_html;}';\n  },\n\n  /**\n   * Sets the default doctype `name`. Sets terse mode to `true` when\n   * html 5 is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {string} name\n   * @api public\n   */\n  setDoctype: function (name) {\n    this.doctype = doctypes[name.toLowerCase()] || '<!DOCTYPE ' + name + '>';\n    this.terse = this.doctype.toLowerCase() == '<!doctype html>';\n    this.xml = 0 == this.doctype.indexOf('<?xml');\n  },\n\n  /**\n   * Buffer the given `str` exactly as is or with interpolation\n   *\n   * @param {String} str\n   * @param {Boolean} interpolate\n   * @api public\n   */\n  buffer: function (str) {\n    var self = this;\n    str = stringify(str);\n    str = str.substr(1, str.length - 2);\n\n    if (this.lastBufferedIdx == this.buf.length && this.bufferedConcatenationCount < 100) {\n      if (this.lastBufferedType === 'code') {\n        this.lastBuffered += ' + \"';\n        this.bufferedConcatenationCount++;\n      }\n\n      this.lastBufferedType = 'text';\n      this.lastBuffered += str;\n      this.buf[this.lastBufferedIdx - 1] = 'pug_html = pug_html + ' + this.bufferStartChar + this.lastBuffered + '\";';\n    } else {\n      this.bufferedConcatenationCount = 0;\n      this.buf.push('pug_html = pug_html + \"' + str + '\";');\n      this.lastBufferedType = 'text';\n      this.bufferStartChar = '\"';\n      this.lastBuffered = str;\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer the given `src` so it is evaluated at run time\n   *\n   * @param {String} src\n   * @api public\n   */\n  bufferExpression: function (src) {\n    if (isConstant(src)) {\n      return this.buffer(toConstant(src) + '');\n    }\n\n    if (this.lastBufferedIdx == this.buf.length && this.bufferedConcatenationCount < 100) {\n      this.bufferedConcatenationCount++;\n      if (this.lastBufferedType === 'text') this.lastBuffered += '\"';\n      this.lastBufferedType = 'code';\n      this.lastBuffered += ' + (' + src + ')';\n      this.buf[this.lastBufferedIdx - 1] = 'pug_html = pug_html + (' + this.bufferStartChar + this.lastBuffered + ');';\n    } else {\n      this.bufferedConcatenationCount = 0;\n      this.buf.push('pug_html = pug_html + (' + src + ');');\n      this.lastBufferedType = 'code';\n      this.bufferStartChar = '';\n      this.lastBuffered = '(' + src + ')';\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer an indent based on the current `indent`\n   * property and an additional `offset`.\n   *\n   * @param {Number} offset\n   * @param {Boolean} newline\n   * @api public\n   */\n  prettyIndent: function (offset, newline) {\n    offset = offset || 0;\n    newline = newline ? '\\n' : '';\n    this.buffer(newline + Array(this.indents + offset).join(this.pp));\n    if (this.parentIndents) this.buf.push('pug_html = pug_html + pug_indent.join(\"\");');\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n  visit: function (node, parent) {\n    var debug = this.debug;\n\n    if (!node) {\n      var msg;\n\n      if (parent) {\n        msg = 'A child of ' + parent.type + ' (' + (parent.filename || 'Pug') + ':' + parent.line + ')';\n      } else {\n        msg = 'A top-level node';\n      }\n\n      msg += ' is ' + node + ', expected a Pug AST Node.';\n      throw new TypeError(msg);\n    }\n\n    if (debug && node.debug !== false && node.type !== 'Block') {\n      if (node.line) {\n        var js = ';pug_debug_line = ' + node.line;\n        if (node.filename) js += ';pug_debug_filename = ' + stringify(node.filename);\n        this.buf.push(js + ';');\n      }\n    }\n\n    if (!this['visit' + node.type]) {\n      var msg;\n\n      if (parent) {\n        msg = 'A child of ' + parent.type;\n      } else {\n        msg = 'A top-level node';\n      }\n\n      msg += ' (' + (node.filename || 'Pug') + ':' + node.line + ')' + ' is of type ' + node.type + ',' + ' which is not supported by pug-code-gen.';\n\n      switch (node.type) {\n        case 'Filter':\n          msg += ' Please use pug-filters to preprocess this AST.';\n          break;\n\n        case 'Extends':\n        case 'Include':\n        case 'NamedBlock':\n        case 'FileReference':\n          // unlikely but for the sake of completeness\n          msg += ' Please use pug-linker to preprocess this AST.';\n          break;\n      }\n\n      throw new TypeError(msg);\n    }\n\n    this.visitNode(node);\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n  visitNode: function (node) {\n    return this['visit' + node.type](node);\n  },\n\n  /**\n   * Visit case `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n  visitCase: function (node) {\n    this.buf.push('switch (' + node.expr + '){');\n    this.visit(node.block, node);\n    this.buf.push('}');\n  },\n\n  /**\n   * Visit when `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n  visitWhen: function (node) {\n    if ('default' == node.expr) {\n      this.buf.push('default:');\n    } else {\n      this.buf.push('case ' + node.expr + ':');\n    }\n\n    if (node.block) {\n      this.visit(node.block, node);\n      this.buf.push('  break;');\n    }\n  },\n\n  /**\n   * Visit literal `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n  visitLiteral: function (node) {\n    this.buffer(node.str);\n  },\n  visitNamedBlock: function (block) {\n    return this.visitBlock(block);\n  },\n\n  /**\n   * Visit all nodes in `block`.\n   *\n   * @param {Block} block\n   * @api public\n   */\n  visitBlock: function (block) {\n    var escapePrettyMode = this.escapePrettyMode;\n    var pp = this.pp; // Pretty print multi-line text\n\n    if (pp && block.nodes.length > 1 && !escapePrettyMode && block.nodes[0].type === 'Text' && block.nodes[1].type === 'Text') {\n      this.prettyIndent(1, true);\n    }\n\n    for (var i = 0; i < block.nodes.length; ++i) {\n      // Pretty print text\n      if (pp && i > 0 && !escapePrettyMode && block.nodes[i].type === 'Text' && block.nodes[i - 1].type === 'Text' && /\\n$/.test(block.nodes[i - 1].val)) {\n        this.prettyIndent(1, false);\n      }\n\n      this.visit(block.nodes[i], block);\n    }\n  },\n\n  /**\n   * Visit a mixin's `block` keyword.\n   *\n   * @param {MixinBlock} block\n   * @api public\n   */\n  visitMixinBlock: function (block) {\n    if (this.pp) this.buf.push('pug_indent.push(' + stringify(Array(this.indents + 1).join(this.pp)) + ');');\n    this.buf.push('block && block();');\n    if (this.pp) this.buf.push('pug_indent.pop();');\n  },\n\n  /**\n   * Visit `doctype`. Sets terse mode to `true` when html 5\n   * is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {Doctype} doctype\n   * @api public\n   */\n  visitDoctype: function (doctype) {\n    if (doctype && (doctype.val || !this.doctype)) {\n      this.setDoctype(doctype.val || 'html');\n    }\n\n    if (this.doctype) this.buffer(this.doctype);\n    this.hasCompiledDoctype = true;\n  },\n\n  /**\n   * Visit `mixin`, generating a function that\n   * may be called within the template.\n   *\n   * @param {Mixin} mixin\n   * @api public\n   */\n  visitMixin: function (mixin) {\n    var name = 'pug_mixins[';\n    var args = mixin.args || '';\n    var block = mixin.block;\n    var attrs = mixin.attrs;\n    var attrsBlocks = this.attributeBlocks(mixin.attributeBlocks);\n    var pp = this.pp;\n    var dynamic = mixin.name[0] === '#';\n    var key = mixin.name;\n    if (dynamic) this.dynamicMixins = true;\n    name += (dynamic ? mixin.name.substr(2, mixin.name.length - 3) : '\"' + mixin.name + '\"') + ']';\n    this.mixins[key] = this.mixins[key] || {\n      used: false,\n      instances: []\n    };\n\n    if (mixin.call) {\n      this.mixins[key].used = true;\n      if (pp) this.buf.push('pug_indent.push(' + stringify(Array(this.indents + 1).join(pp)) + ');');\n\n      if (block || attrs.length || attrsBlocks.length) {\n        this.buf.push(name + '.call({');\n\n        if (block) {\n          this.buf.push('block: function(){'); // Render block with no indents, dynamically added when rendered\n\n          this.parentIndents++;\n          var _indents = this.indents;\n          this.indents = 0;\n          this.visit(mixin.block, mixin);\n          this.indents = _indents;\n          this.parentIndents--;\n\n          if (attrs.length || attrsBlocks.length) {\n            this.buf.push('},');\n          } else {\n            this.buf.push('}');\n          }\n        }\n\n        if (attrsBlocks.length) {\n          if (attrs.length) {\n            var val = this.attrs(attrs);\n            attrsBlocks.unshift(val);\n          }\n\n          if (attrsBlocks.length > 1) {\n            this.buf.push('attributes: ' + this.runtime('merge') + '([' + attrsBlocks.join(',') + '])');\n          } else {\n            this.buf.push('attributes: ' + attrsBlocks[0]);\n          }\n        } else if (attrs.length) {\n          var val = this.attrs(attrs);\n          this.buf.push('attributes: ' + val);\n        }\n\n        if (args) {\n          this.buf.push('}, ' + args + ');');\n        } else {\n          this.buf.push('});');\n        }\n      } else {\n        this.buf.push(name + '(' + args + ');');\n      }\n\n      if (pp) this.buf.push('pug_indent.pop();');\n    } else {\n      var mixin_start = this.buf.length;\n      args = args ? args.split(',') : [];\n      var rest;\n\n      if (args.length && /^\\.\\.\\./.test(args[args.length - 1].trim())) {\n        rest = args.pop().trim().replace(/^\\.\\.\\./, '');\n      } // we need use pug_interp here for v8: https://code.google.com/p/v8/issues/detail?id=4165\n      // once fixed, use this: this.buf.push(name + ' = function(' + args.join(',') + '){');\n\n\n      this.buf.push(name + ' = pug_interp = function(' + args.join(',') + '){');\n      this.buf.push('var block = (this && this.block), attributes = (this && this.attributes) || {};');\n\n      if (rest) {\n        this.buf.push('var ' + rest + ' = [];');\n        this.buf.push('for (pug_interp = ' + args.length + '; pug_interp < arguments.length; pug_interp++) {');\n        this.buf.push('  ' + rest + '.push(arguments[pug_interp]);');\n        this.buf.push('}');\n      }\n\n      this.parentIndents++;\n      this.visit(block, mixin);\n      this.parentIndents--;\n      this.buf.push('};');\n      var mixin_end = this.buf.length;\n      this.mixins[key].instances.push({\n        start: mixin_start,\n        end: mixin_end\n      });\n    }\n  },\n\n  /**\n   * Visit `tag` buffering tag markup, generating\n   * attributes, visiting the `tag`'s code and block.\n   *\n   * @param {Tag} tag\n   * @param {boolean} interpolated\n   * @api public\n   */\n  visitTag: function (tag, interpolated) {\n    this.indents++;\n    var name = tag.name,\n        pp = this.pp,\n        self = this;\n\n    function bufferName() {\n      if (interpolated) self.bufferExpression(tag.expr);else self.buffer(name);\n    }\n\n    if (WHITE_SPACE_SENSITIVE_TAGS[tag.name] === true) this.escapePrettyMode = true;\n\n    if (!this.hasCompiledTag) {\n      if (!this.hasCompiledDoctype && 'html' == name) {\n        this.visitDoctype();\n      }\n\n      this.hasCompiledTag = true;\n    } // pretty print\n\n\n    if (pp && !tag.isInline) this.prettyIndent(0, true);\n\n    if (tag.selfClosing || !this.xml && selfClosing[tag.name]) {\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(tag.attrs, this.attributeBlocks(tag.attributeBlocks));\n\n      if (this.terse && !tag.selfClosing) {\n        this.buffer('>');\n      } else {\n        this.buffer('/>');\n      } // if it is non-empty throw an error\n\n\n      if (tag.code || tag.block && !(tag.block.type === 'Block' && tag.block.nodes.length === 0) && tag.block.nodes.some(function (tag) {\n        return tag.type !== 'Text' || !/^\\s*$/.test(tag.val);\n      })) {\n        this.error(name + ' is a self closing element: <' + name + '/> but contains nested content.', 'SELF_CLOSING_CONTENT', tag);\n      }\n    } else {\n      // Optimize attributes buffering\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(tag.attrs, this.attributeBlocks(tag.attributeBlocks));\n      this.buffer('>');\n      if (tag.code) this.visitCode(tag.code);\n      this.visit(tag.block, tag); // pretty print\n\n      if (pp && !tag.isInline && WHITE_SPACE_SENSITIVE_TAGS[tag.name] !== true && !tagCanInline(tag)) this.prettyIndent(0, true);\n      this.buffer('</');\n      bufferName();\n      this.buffer('>');\n    }\n\n    if (WHITE_SPACE_SENSITIVE_TAGS[tag.name] === true) this.escapePrettyMode = false;\n    this.indents--;\n  },\n\n  /**\n   * Visit InterpolatedTag.\n   *\n   * @param {InterpolatedTag} tag\n   * @api public\n   */\n  visitInterpolatedTag: function (tag) {\n    return this.visitTag(tag, true);\n  },\n\n  /**\n   * Visit `text` node.\n   *\n   * @param {Text} text\n   * @api public\n   */\n  visitText: function (text) {\n    this.buffer(text.val);\n  },\n\n  /**\n   * Visit a `comment`, only buffering when the buffer flag is set.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n  visitComment: function (comment) {\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + comment.val + '-->');\n  },\n\n  /**\n   * Visit a `YieldBlock`.\n   *\n   * This is necessary since we allow compiling a file with `yield`.\n   *\n   * @param {YieldBlock} block\n   * @api public\n   */\n  visitYieldBlock: function (block) {},\n\n  /**\n   * Visit a `BlockComment`.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n  visitBlockComment: function (comment) {\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + (comment.val || ''));\n    this.visit(comment.block, comment);\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('-->');\n  },\n\n  /**\n   * Visit `code`, respecting buffer / escape flags.\n   * If the code is followed by a block, wrap it in\n   * a self-calling function.\n   *\n   * @param {Code} code\n   * @api public\n   */\n  visitCode: function (code) {\n    // Wrap code blocks with {}.\n    // we only wrap unbuffered code blocks ATM\n    // since they are usually flow control\n    // Buffer code\n    if (code.buffer) {\n      var val = code.val.trim();\n      val = 'null == (pug_interp = ' + val + ') ? \"\" : pug_interp';\n      if (code.mustEscape !== false) val = this.runtime('escape') + '(' + val + ')';\n      this.bufferExpression(val);\n    } else {\n      this.buf.push(code.val);\n    } // Block support\n\n\n    if (code.block) {\n      if (!code.buffer) this.buf.push('{');\n      this.visit(code.block, code);\n      if (!code.buffer) this.buf.push('}');\n    }\n  },\n\n  /**\n   * Visit `Conditional`.\n   *\n   * @param {Conditional} cond\n   * @api public\n   */\n  visitConditional: function (cond) {\n    var test = cond.test;\n    this.buf.push('if (' + test + ') {');\n    this.visit(cond.consequent, cond);\n    this.buf.push('}');\n\n    if (cond.alternate) {\n      if (cond.alternate.type === 'Conditional') {\n        this.buf.push('else');\n        this.visitConditional(cond.alternate);\n      } else {\n        this.buf.push('else {');\n        this.visit(cond.alternate, cond);\n        this.buf.push('}');\n      }\n    }\n  },\n\n  /**\n   * Visit `While`.\n   *\n   * @param {While} loop\n   * @api public\n   */\n  visitWhile: function (loop) {\n    var test = loop.test;\n    this.buf.push('while (' + test + ') {');\n    this.visit(loop.block, loop);\n    this.buf.push('}');\n  },\n\n  /**\n   * Visit `each` block.\n   *\n   * @param {Each} each\n   * @api public\n   */\n  visitEach: function (each) {\n    var indexVarName = each.key || 'pug_index' + this.eachCount;\n    this.eachCount++;\n    this.buf.push('' + '// iterate ' + each.obj + '\\n' + ';(function(){\\n' + '  var $$obj = ' + each.obj + ';\\n' + \"  if ('number' == typeof $$obj.length) {\");\n\n    if (each.alternate) {\n      this.buf.push('    if ($$obj.length) {');\n    }\n\n    this.buf.push('' + '      for (var ' + indexVarName + ' = 0, $$l = $$obj.length; ' + indexVarName + ' < $$l; ' + indexVarName + '++) {\\n' + '        var ' + each.val + ' = $$obj[' + indexVarName + '];');\n    this.visit(each.block, each);\n    this.buf.push('      }');\n\n    if (each.alternate) {\n      this.buf.push('    } else {');\n      this.visit(each.alternate, each);\n      this.buf.push('    }');\n    }\n\n    this.buf.push('' + '  } else {\\n' + '    var $$l = 0;\\n' + '    for (var ' + indexVarName + ' in $$obj) {\\n' + '      $$l++;\\n' + '      var ' + each.val + ' = $$obj[' + indexVarName + '];');\n    this.visit(each.block, each);\n    this.buf.push('    }');\n\n    if (each.alternate) {\n      this.buf.push('    if ($$l === 0) {');\n      this.visit(each.alternate, each);\n      this.buf.push('    }');\n    }\n\n    this.buf.push('  }\\n}).call(this);\\n');\n  },\n  visitEachOf: function (each) {\n    this.buf.push('' + '// iterate ' + each.obj + '\\n' + 'for (const ' + each.val + ' of ' + each.obj + ') {\\n');\n    this.visit(each.block, each);\n    this.buf.push('}\\n');\n  },\n\n  /**\n   * Visit `attrs`.\n   *\n   * @param {Array} attrs\n   * @api public\n   */\n  visitAttributes: function (attrs, attributeBlocks) {\n    if (attributeBlocks.length) {\n      if (attrs.length) {\n        var val = this.attrs(attrs);\n        attributeBlocks.unshift(val);\n      }\n\n      if (attributeBlocks.length > 1) {\n        this.bufferExpression(this.runtime('attrs') + '(' + this.runtime('merge') + '([' + attributeBlocks.join(',') + ']), ' + stringify(this.terse) + ')');\n      } else {\n        this.bufferExpression(this.runtime('attrs') + '(' + attributeBlocks[0] + ', ' + stringify(this.terse) + ')');\n      }\n    } else if (attrs.length) {\n      this.attrs(attrs, true);\n    }\n  },\n\n  /**\n   * Compile attributes.\n   */\n  attrs: function (attrs, buffer) {\n    var res = compileAttrs(attrs, {\n      terse: this.terse,\n      format: buffer ? 'html' : 'object',\n      runtime: this.runtime.bind(this)\n    });\n\n    if (buffer) {\n      this.bufferExpression(res);\n    }\n\n    return res;\n  },\n\n  /**\n   * Compile attribute blocks.\n   */\n  attributeBlocks: function (attributeBlocks) {\n    return attributeBlocks && attributeBlocks.slice().map(function (attrBlock) {\n      return attrBlock.val;\n    });\n  }\n};\n\nfunction tagCanInline(tag) {\n  function isInline(node) {\n    // Recurse if the node is a block\n    if (node.type === 'Block') return node.nodes.every(isInline); // When there is a YieldBlock here, it is an indication that the file is\n    // expected to be included but is not. If this is the case, the block\n    // must be empty.\n\n    if (node.type === 'YieldBlock') return true;\n    return node.type === 'Text' && !/\\n/.test(node.val) || node.isInline;\n  }\n\n  return tag.block.nodes.every(isInline);\n}","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/pug-code-gen/index.js"],"names":["doctypes","require","makeError","buildRuntime","runtime","compileAttrs","selfClosing","constantinople","stringify","addWith","WHITE_SPACE_SENSITIVE_TAGS","pre","textarea","INTERNAL_VARIABLES","module","exports","generateCode","CodeGenerator","Compiler","ast","options","compile","isConstant","src","pug","pug_interp","undefined","toConstant","node","bufferedConcatenationCount","hasCompiledDoctype","hasCompiledTag","pp","pretty","test","Error","debug","compileDebug","indents","parentIndents","terse","mixins","dynamicMixins","eachCount","doctype","setDoctype","runtimeFunctionsUsed","inlineRuntimeFunctions","push","prototype","name","error","message","code","err","line","column","filename","buf","lastBufferedIdx","visit","mixinNames","Object","keys","i","length","mixin","used","x","instances","y","start","end","js","join","globals","concat","self","map","includeSources","templateName","toLowerCase","xml","indexOf","buffer","str","substr","lastBufferedType","lastBuffered","bufferStartChar","bufferExpression","prettyIndent","offset","newline","Array","parent","msg","type","TypeError","visitNode","visitCase","expr","block","visitWhen","visitLiteral","visitNamedBlock","visitBlock","escapePrettyMode","nodes","val","visitMixinBlock","visitDoctype","visitMixin","args","attrs","attrsBlocks","attributeBlocks","dynamic","key","call","_indents","unshift","mixin_start","split","rest","trim","pop","replace","mixin_end","visitTag","tag","interpolated","bufferName","isInline","visitAttributes","some","visitCode","tagCanInline","visitInterpolatedTag","visitText","text","visitComment","comment","visitYieldBlock","visitBlockComment","mustEscape","visitConditional","cond","consequent","alternate","visitWhile","loop","visitEach","each","indexVarName","obj","visitEachOf","res","format","bind","slice","attrBlock","every"],"mappings":"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","sourcesContent":["'use strict';\n\nvar doctypes = require('doctypes');\nvar makeError = require('pug-error');\nvar buildRuntime = require('pug-runtime/build');\nvar runtime = require('pug-runtime');\nvar compileAttrs = require('pug-attrs');\nvar selfClosing = require('void-elements');\nvar constantinople = require('constantinople');\nvar stringify = require('js-stringify');\nvar addWith = require('with');\n\n// This is used to prevent pretty printing inside certain tags\nvar WHITE_SPACE_SENSITIVE_TAGS = {\n  pre: true,\n  textarea: true,\n};\n\nvar INTERNAL_VARIABLES = [\n  'pug',\n  'pug_mixins',\n  'pug_interp',\n  'pug_debug_filename',\n  'pug_debug_line',\n  'pug_debug_sources',\n  'pug_html',\n];\n\nmodule.exports = generateCode;\nmodule.exports.CodeGenerator = Compiler;\nfunction generateCode(ast, options) {\n  return new Compiler(ast, options).compile();\n}\n\nfunction isConstant(src) {\n  return constantinople(src, {pug: runtime, pug_interp: undefined});\n}\nfunction toConstant(src) {\n  return constantinople.toConstant(src, {pug: runtime, pug_interp: undefined});\n}\n\n/**\n * Initialize `Compiler` with the given `node`.\n *\n * @param {Node} node\n * @param {Object} options\n * @api public\n */\n\nfunction Compiler(node, options) {\n  this.options = options = options || {};\n  this.node = node;\n  this.bufferedConcatenationCount = 0;\n  this.hasCompiledDoctype = false;\n  this.hasCompiledTag = false;\n  this.pp = options.pretty || false;\n  if (this.pp && typeof this.pp !== 'string') {\n    this.pp = '  ';\n  }\n  if (this.pp && !/^\\s+$/.test(this.pp)) {\n    throw new Error(\n      'The pretty parameter should either be a boolean or whitespace only string'\n    );\n  }\n  this.debug = false !== options.compileDebug;\n  this.indents = 0;\n  this.parentIndents = 0;\n  this.terse = false;\n  this.mixins = {};\n  this.dynamicMixins = false;\n  this.eachCount = 0;\n  if (options.doctype) this.setDoctype(options.doctype);\n  this.runtimeFunctionsUsed = [];\n  this.inlineRuntimeFunctions = options.inlineRuntimeFunctions || false;\n  if (this.debug && this.inlineRuntimeFunctions) {\n    this.runtimeFunctionsUsed.push('rethrow');\n  }\n}\n\n/**\n * Compiler prototype.\n */\n\nCompiler.prototype = {\n  runtime: function(name) {\n    if (this.inlineRuntimeFunctions) {\n      this.runtimeFunctionsUsed.push(name);\n      return 'pug_' + name;\n    } else {\n      return 'pug.' + name;\n    }\n  },\n\n  error: function(message, code, node) {\n    var err = makeError(code, message, {\n      line: node.line,\n      column: node.column,\n      filename: node.filename,\n    });\n    throw err;\n  },\n\n  /**\n   * Compile parse tree to JavaScript.\n   *\n   * @api public\n   */\n\n  compile: function() {\n    this.buf = [];\n    if (this.pp) this.buf.push('var pug_indent = [];');\n    this.lastBufferedIdx = -1;\n    this.visit(this.node);\n    if (!this.dynamicMixins) {\n      // if there are no dynamic mixins we can remove any un-used mixins\n      var mixinNames = Object.keys(this.mixins);\n      for (var i = 0; i < mixinNames.length; i++) {\n        var mixin = this.mixins[mixinNames[i]];\n        if (!mixin.used) {\n          for (var x = 0; x < mixin.instances.length; x++) {\n            for (\n              var y = mixin.instances[x].start;\n              y < mixin.instances[x].end;\n              y++\n            ) {\n              this.buf[y] = '';\n            }\n          }\n        }\n      }\n    }\n    var js = this.buf.join('\\n');\n    var globals = this.options.globals\n      ? this.options.globals.concat(INTERNAL_VARIABLES)\n      : INTERNAL_VARIABLES;\n    if (this.options.self) {\n      js = 'var self = locals || {};' + js;\n    } else {\n      js = addWith(\n        'locals || {}',\n        js,\n        globals.concat(\n          this.runtimeFunctionsUsed.map(function(name) {\n            return 'pug_' + name;\n          })\n        )\n      );\n    }\n    if (this.debug) {\n      if (this.options.includeSources) {\n        js =\n          'var pug_debug_sources = ' +\n          stringify(this.options.includeSources) +\n          ';\\n' +\n          js;\n      }\n      js =\n        'var pug_debug_filename, pug_debug_line;' +\n        'try {' +\n        js +\n        '} catch (err) {' +\n        (this.inlineRuntimeFunctions ? 'pug_rethrow' : 'pug.rethrow') +\n        '(err, pug_debug_filename, pug_debug_line' +\n        (this.options.includeSources\n          ? ', pug_debug_sources[pug_debug_filename]'\n          : '') +\n        ');' +\n        '}';\n    }\n    return (\n      buildRuntime(this.runtimeFunctionsUsed) +\n      'function ' +\n      (this.options.templateName || 'template') +\n      '(locals) {var pug_html = \"\", pug_mixins = {}, pug_interp;' +\n      js +\n      ';return pug_html;}'\n    );\n  },\n\n  /**\n   * Sets the default doctype `name`. Sets terse mode to `true` when\n   * html 5 is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {string} name\n   * @api public\n   */\n\n  setDoctype: function(name) {\n    this.doctype = doctypes[name.toLowerCase()] || '<!DOCTYPE ' + name + '>';\n    this.terse = this.doctype.toLowerCase() == '<!doctype html>';\n    this.xml = 0 == this.doctype.indexOf('<?xml');\n  },\n\n  /**\n   * Buffer the given `str` exactly as is or with interpolation\n   *\n   * @param {String} str\n   * @param {Boolean} interpolate\n   * @api public\n   */\n\n  buffer: function(str) {\n    var self = this;\n\n    str = stringify(str);\n    str = str.substr(1, str.length - 2);\n\n    if (\n      this.lastBufferedIdx == this.buf.length &&\n      this.bufferedConcatenationCount < 100\n    ) {\n      if (this.lastBufferedType === 'code') {\n        this.lastBuffered += ' + \"';\n        this.bufferedConcatenationCount++;\n      }\n      this.lastBufferedType = 'text';\n      this.lastBuffered += str;\n      this.buf[this.lastBufferedIdx - 1] =\n        'pug_html = pug_html + ' +\n        this.bufferStartChar +\n        this.lastBuffered +\n        '\";';\n    } else {\n      this.bufferedConcatenationCount = 0;\n      this.buf.push('pug_html = pug_html + \"' + str + '\";');\n      this.lastBufferedType = 'text';\n      this.bufferStartChar = '\"';\n      this.lastBuffered = str;\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer the given `src` so it is evaluated at run time\n   *\n   * @param {String} src\n   * @api public\n   */\n\n  bufferExpression: function(src) {\n    if (isConstant(src)) {\n      return this.buffer(toConstant(src) + '');\n    }\n    if (\n      this.lastBufferedIdx == this.buf.length &&\n      this.bufferedConcatenationCount < 100\n    ) {\n      this.bufferedConcatenationCount++;\n      if (this.lastBufferedType === 'text') this.lastBuffered += '\"';\n      this.lastBufferedType = 'code';\n      this.lastBuffered += ' + (' + src + ')';\n      this.buf[this.lastBufferedIdx - 1] =\n        'pug_html = pug_html + (' +\n        this.bufferStartChar +\n        this.lastBuffered +\n        ');';\n    } else {\n      this.bufferedConcatenationCount = 0;\n      this.buf.push('pug_html = pug_html + (' + src + ');');\n      this.lastBufferedType = 'code';\n      this.bufferStartChar = '';\n      this.lastBuffered = '(' + src + ')';\n      this.lastBufferedIdx = this.buf.length;\n    }\n  },\n\n  /**\n   * Buffer an indent based on the current `indent`\n   * property and an additional `offset`.\n   *\n   * @param {Number} offset\n   * @param {Boolean} newline\n   * @api public\n   */\n\n  prettyIndent: function(offset, newline) {\n    offset = offset || 0;\n    newline = newline ? '\\n' : '';\n    this.buffer(newline + Array(this.indents + offset).join(this.pp));\n    if (this.parentIndents)\n      this.buf.push('pug_html = pug_html + pug_indent.join(\"\");');\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n\n  visit: function(node, parent) {\n    var debug = this.debug;\n\n    if (!node) {\n      var msg;\n      if (parent) {\n        msg =\n          'A child of ' +\n          parent.type +\n          ' (' +\n          (parent.filename || 'Pug') +\n          ':' +\n          parent.line +\n          ')';\n      } else {\n        msg = 'A top-level node';\n      }\n      msg += ' is ' + node + ', expected a Pug AST Node.';\n      throw new TypeError(msg);\n    }\n\n    if (debug && node.debug !== false && node.type !== 'Block') {\n      if (node.line) {\n        var js = ';pug_debug_line = ' + node.line;\n        if (node.filename)\n          js += ';pug_debug_filename = ' + stringify(node.filename);\n        this.buf.push(js + ';');\n      }\n    }\n\n    if (!this['visit' + node.type]) {\n      var msg;\n      if (parent) {\n        msg = 'A child of ' + parent.type;\n      } else {\n        msg = 'A top-level node';\n      }\n      msg +=\n        ' (' +\n        (node.filename || 'Pug') +\n        ':' +\n        node.line +\n        ')' +\n        ' is of type ' +\n        node.type +\n        ',' +\n        ' which is not supported by pug-code-gen.';\n      switch (node.type) {\n        case 'Filter':\n          msg += ' Please use pug-filters to preprocess this AST.';\n          break;\n        case 'Extends':\n        case 'Include':\n        case 'NamedBlock':\n        case 'FileReference': // unlikely but for the sake of completeness\n          msg += ' Please use pug-linker to preprocess this AST.';\n          break;\n      }\n      throw new TypeError(msg);\n    }\n\n    this.visitNode(node);\n  },\n\n  /**\n   * Visit `node`.\n   *\n   * @param {Node} node\n   * @api public\n   */\n\n  visitNode: function(node) {\n    return this['visit' + node.type](node);\n  },\n\n  /**\n   * Visit case `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitCase: function(node) {\n    this.buf.push('switch (' + node.expr + '){');\n    this.visit(node.block, node);\n    this.buf.push('}');\n  },\n\n  /**\n   * Visit when `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitWhen: function(node) {\n    if ('default' == node.expr) {\n      this.buf.push('default:');\n    } else {\n      this.buf.push('case ' + node.expr + ':');\n    }\n    if (node.block) {\n      this.visit(node.block, node);\n      this.buf.push('  break;');\n    }\n  },\n\n  /**\n   * Visit literal `node`.\n   *\n   * @param {Literal} node\n   * @api public\n   */\n\n  visitLiteral: function(node) {\n    this.buffer(node.str);\n  },\n\n  visitNamedBlock: function(block) {\n    return this.visitBlock(block);\n  },\n  /**\n   * Visit all nodes in `block`.\n   *\n   * @param {Block} block\n   * @api public\n   */\n\n  visitBlock: function(block) {\n    var escapePrettyMode = this.escapePrettyMode;\n    var pp = this.pp;\n\n    // Pretty print multi-line text\n    if (\n      pp &&\n      block.nodes.length > 1 &&\n      !escapePrettyMode &&\n      block.nodes[0].type === 'Text' &&\n      block.nodes[1].type === 'Text'\n    ) {\n      this.prettyIndent(1, true);\n    }\n    for (var i = 0; i < block.nodes.length; ++i) {\n      // Pretty print text\n      if (\n        pp &&\n        i > 0 &&\n        !escapePrettyMode &&\n        block.nodes[i].type === 'Text' &&\n        block.nodes[i - 1].type === 'Text' &&\n        /\\n$/.test(block.nodes[i - 1].val)\n      ) {\n        this.prettyIndent(1, false);\n      }\n      this.visit(block.nodes[i], block);\n    }\n  },\n\n  /**\n   * Visit a mixin's `block` keyword.\n   *\n   * @param {MixinBlock} block\n   * @api public\n   */\n\n  visitMixinBlock: function(block) {\n    if (this.pp)\n      this.buf.push(\n        'pug_indent.push(' +\n          stringify(Array(this.indents + 1).join(this.pp)) +\n          ');'\n      );\n    this.buf.push('block && block();');\n    if (this.pp) this.buf.push('pug_indent.pop();');\n  },\n\n  /**\n   * Visit `doctype`. Sets terse mode to `true` when html 5\n   * is used, causing self-closing tags to end with \">\" vs \"/>\",\n   * and boolean attributes are not mirrored.\n   *\n   * @param {Doctype} doctype\n   * @api public\n   */\n\n  visitDoctype: function(doctype) {\n    if (doctype && (doctype.val || !this.doctype)) {\n      this.setDoctype(doctype.val || 'html');\n    }\n\n    if (this.doctype) this.buffer(this.doctype);\n    this.hasCompiledDoctype = true;\n  },\n\n  /**\n   * Visit `mixin`, generating a function that\n   * may be called within the template.\n   *\n   * @param {Mixin} mixin\n   * @api public\n   */\n\n  visitMixin: function(mixin) {\n    var name = 'pug_mixins[';\n    var args = mixin.args || '';\n    var block = mixin.block;\n    var attrs = mixin.attrs;\n    var attrsBlocks = this.attributeBlocks(mixin.attributeBlocks);\n    var pp = this.pp;\n    var dynamic = mixin.name[0] === '#';\n    var key = mixin.name;\n    if (dynamic) this.dynamicMixins = true;\n    name +=\n      (dynamic\n        ? mixin.name.substr(2, mixin.name.length - 3)\n        : '\"' + mixin.name + '\"') + ']';\n\n    this.mixins[key] = this.mixins[key] || {used: false, instances: []};\n    if (mixin.call) {\n      this.mixins[key].used = true;\n      if (pp)\n        this.buf.push(\n          'pug_indent.push(' +\n            stringify(Array(this.indents + 1).join(pp)) +\n            ');'\n        );\n      if (block || attrs.length || attrsBlocks.length) {\n        this.buf.push(name + '.call({');\n\n        if (block) {\n          this.buf.push('block: function(){');\n\n          // Render block with no indents, dynamically added when rendered\n          this.parentIndents++;\n          var _indents = this.indents;\n          this.indents = 0;\n          this.visit(mixin.block, mixin);\n          this.indents = _indents;\n          this.parentIndents--;\n\n          if (attrs.length || attrsBlocks.length) {\n            this.buf.push('},');\n          } else {\n            this.buf.push('}');\n          }\n        }\n\n        if (attrsBlocks.length) {\n          if (attrs.length) {\n            var val = this.attrs(attrs);\n            attrsBlocks.unshift(val);\n          }\n          if (attrsBlocks.length > 1) {\n            this.buf.push(\n              'attributes: ' +\n                this.runtime('merge') +\n                '([' +\n                attrsBlocks.join(',') +\n                '])'\n            );\n          } else {\n            this.buf.push('attributes: ' + attrsBlocks[0]);\n          }\n        } else if (attrs.length) {\n          var val = this.attrs(attrs);\n          this.buf.push('attributes: ' + val);\n        }\n\n        if (args) {\n          this.buf.push('}, ' + args + ');');\n        } else {\n          this.buf.push('});');\n        }\n      } else {\n        this.buf.push(name + '(' + args + ');');\n      }\n      if (pp) this.buf.push('pug_indent.pop();');\n    } else {\n      var mixin_start = this.buf.length;\n      args = args ? args.split(',') : [];\n      var rest;\n      if (args.length && /^\\.\\.\\./.test(args[args.length - 1].trim())) {\n        rest = args\n          .pop()\n          .trim()\n          .replace(/^\\.\\.\\./, '');\n      }\n      // we need use pug_interp here for v8: https://code.google.com/p/v8/issues/detail?id=4165\n      // once fixed, use this: this.buf.push(name + ' = function(' + args.join(',') + '){');\n      this.buf.push(name + ' = pug_interp = function(' + args.join(',') + '){');\n      this.buf.push(\n        'var block = (this && this.block), attributes = (this && this.attributes) || {};'\n      );\n      if (rest) {\n        this.buf.push('var ' + rest + ' = [];');\n        this.buf.push(\n          'for (pug_interp = ' +\n            args.length +\n            '; pug_interp < arguments.length; pug_interp++) {'\n        );\n        this.buf.push('  ' + rest + '.push(arguments[pug_interp]);');\n        this.buf.push('}');\n      }\n      this.parentIndents++;\n      this.visit(block, mixin);\n      this.parentIndents--;\n      this.buf.push('};');\n      var mixin_end = this.buf.length;\n      this.mixins[key].instances.push({start: mixin_start, end: mixin_end});\n    }\n  },\n\n  /**\n   * Visit `tag` buffering tag markup, generating\n   * attributes, visiting the `tag`'s code and block.\n   *\n   * @param {Tag} tag\n   * @param {boolean} interpolated\n   * @api public\n   */\n\n  visitTag: function(tag, interpolated) {\n    this.indents++;\n    var name = tag.name,\n      pp = this.pp,\n      self = this;\n\n    function bufferName() {\n      if (interpolated) self.bufferExpression(tag.expr);\n      else self.buffer(name);\n    }\n\n    if (WHITE_SPACE_SENSITIVE_TAGS[tag.name] === true)\n      this.escapePrettyMode = true;\n\n    if (!this.hasCompiledTag) {\n      if (!this.hasCompiledDoctype && 'html' == name) {\n        this.visitDoctype();\n      }\n      this.hasCompiledTag = true;\n    }\n\n    // pretty print\n    if (pp && !tag.isInline) this.prettyIndent(0, true);\n    if (tag.selfClosing || (!this.xml && selfClosing[tag.name])) {\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(\n        tag.attrs,\n        this.attributeBlocks(tag.attributeBlocks)\n      );\n      if (this.terse && !tag.selfClosing) {\n        this.buffer('>');\n      } else {\n        this.buffer('/>');\n      }\n      // if it is non-empty throw an error\n      if (\n        tag.code ||\n        (tag.block &&\n          !(tag.block.type === 'Block' && tag.block.nodes.length === 0) &&\n          tag.block.nodes.some(function(tag) {\n            return tag.type !== 'Text' || !/^\\s*$/.test(tag.val);\n          }))\n      ) {\n        this.error(\n          name +\n            ' is a self closing element: <' +\n            name +\n            '/> but contains nested content.',\n          'SELF_CLOSING_CONTENT',\n          tag\n        );\n      }\n    } else {\n      // Optimize attributes buffering\n      this.buffer('<');\n      bufferName();\n      this.visitAttributes(\n        tag.attrs,\n        this.attributeBlocks(tag.attributeBlocks)\n      );\n      this.buffer('>');\n      if (tag.code) this.visitCode(tag.code);\n      this.visit(tag.block, tag);\n\n      // pretty print\n      if (\n        pp &&\n        !tag.isInline &&\n        WHITE_SPACE_SENSITIVE_TAGS[tag.name] !== true &&\n        !tagCanInline(tag)\n      )\n        this.prettyIndent(0, true);\n\n      this.buffer('</');\n      bufferName();\n      this.buffer('>');\n    }\n\n    if (WHITE_SPACE_SENSITIVE_TAGS[tag.name] === true)\n      this.escapePrettyMode = false;\n\n    this.indents--;\n  },\n\n  /**\n   * Visit InterpolatedTag.\n   *\n   * @param {InterpolatedTag} tag\n   * @api public\n   */\n\n  visitInterpolatedTag: function(tag) {\n    return this.visitTag(tag, true);\n  },\n\n  /**\n   * Visit `text` node.\n   *\n   * @param {Text} text\n   * @api public\n   */\n\n  visitText: function(text) {\n    this.buffer(text.val);\n  },\n\n  /**\n   * Visit a `comment`, only buffering when the buffer flag is set.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n\n  visitComment: function(comment) {\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + comment.val + '-->');\n  },\n\n  /**\n   * Visit a `YieldBlock`.\n   *\n   * This is necessary since we allow compiling a file with `yield`.\n   *\n   * @param {YieldBlock} block\n   * @api public\n   */\n\n  visitYieldBlock: function(block) {},\n\n  /**\n   * Visit a `BlockComment`.\n   *\n   * @param {Comment} comment\n   * @api public\n   */\n\n  visitBlockComment: function(comment) {\n    if (!comment.buffer) return;\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('<!--' + (comment.val || ''));\n    this.visit(comment.block, comment);\n    if (this.pp) this.prettyIndent(1, true);\n    this.buffer('-->');\n  },\n\n  /**\n   * Visit `code`, respecting buffer / escape flags.\n   * If the code is followed by a block, wrap it in\n   * a self-calling function.\n   *\n   * @param {Code} code\n   * @api public\n   */\n\n  visitCode: function(code) {\n    // Wrap code blocks with {}.\n    // we only wrap unbuffered code blocks ATM\n    // since they are usually flow control\n\n    // Buffer code\n    if (code.buffer) {\n      var val = code.val.trim();\n      val = 'null == (pug_interp = ' + val + ') ? \"\" : pug_interp';\n      if (code.mustEscape !== false)\n        val = this.runtime('escape') + '(' + val + ')';\n      this.bufferExpression(val);\n    } else {\n      this.buf.push(code.val);\n    }\n\n    // Block support\n    if (code.block) {\n      if (!code.buffer) this.buf.push('{');\n      this.visit(code.block, code);\n      if (!code.buffer) this.buf.push('}');\n    }\n  },\n\n  /**\n   * Visit `Conditional`.\n   *\n   * @param {Conditional} cond\n   * @api public\n   */\n\n  visitConditional: function(cond) {\n    var test = cond.test;\n    this.buf.push('if (' + test + ') {');\n    this.visit(cond.consequent, cond);\n    this.buf.push('}');\n    if (cond.alternate) {\n      if (cond.alternate.type === 'Conditional') {\n        this.buf.push('else');\n        this.visitConditional(cond.alternate);\n      } else {\n        this.buf.push('else {');\n        this.visit(cond.alternate, cond);\n        this.buf.push('}');\n      }\n    }\n  },\n\n  /**\n   * Visit `While`.\n   *\n   * @param {While} loop\n   * @api public\n   */\n\n  visitWhile: function(loop) {\n    var test = loop.test;\n    this.buf.push('while (' + test + ') {');\n    this.visit(loop.block, loop);\n    this.buf.push('}');\n  },\n\n  /**\n   * Visit `each` block.\n   *\n   * @param {Each} each\n   * @api public\n   */\n\n  visitEach: function(each) {\n    var indexVarName = each.key || 'pug_index' + this.eachCount;\n    this.eachCount++;\n\n    this.buf.push(\n      '' +\n        '// iterate ' +\n        each.obj +\n        '\\n' +\n        ';(function(){\\n' +\n        '  var $$obj = ' +\n        each.obj +\n        ';\\n' +\n        \"  if ('number' == typeof $$obj.length) {\"\n    );\n\n    if (each.alternate) {\n      this.buf.push('    if ($$obj.length) {');\n    }\n\n    this.buf.push(\n      '' +\n        '      for (var ' +\n        indexVarName +\n        ' = 0, $$l = $$obj.length; ' +\n        indexVarName +\n        ' < $$l; ' +\n        indexVarName +\n        '++) {\\n' +\n        '        var ' +\n        each.val +\n        ' = $$obj[' +\n        indexVarName +\n        '];'\n    );\n\n    this.visit(each.block, each);\n\n    this.buf.push('      }');\n\n    if (each.alternate) {\n      this.buf.push('    } else {');\n      this.visit(each.alternate, each);\n      this.buf.push('    }');\n    }\n\n    this.buf.push(\n      '' +\n        '  } else {\\n' +\n        '    var $$l = 0;\\n' +\n        '    for (var ' +\n        indexVarName +\n        ' in $$obj) {\\n' +\n        '      $$l++;\\n' +\n        '      var ' +\n        each.val +\n        ' = $$obj[' +\n        indexVarName +\n        '];'\n    );\n\n    this.visit(each.block, each);\n\n    this.buf.push('    }');\n    if (each.alternate) {\n      this.buf.push('    if ($$l === 0) {');\n      this.visit(each.alternate, each);\n      this.buf.push('    }');\n    }\n    this.buf.push('  }\\n}).call(this);\\n');\n  },\n\n  visitEachOf: function(each) {\n    this.buf.push(\n      '' +\n        '// iterate ' +\n        each.obj +\n        '\\n' +\n        'for (const ' +\n        each.val +\n        ' of ' +\n        each.obj +\n        ') {\\n'\n    );\n\n    this.visit(each.block, each);\n\n    this.buf.push('}\\n');\n  },\n\n  /**\n   * Visit `attrs`.\n   *\n   * @param {Array} attrs\n   * @api public\n   */\n\n  visitAttributes: function(attrs, attributeBlocks) {\n    if (attributeBlocks.length) {\n      if (attrs.length) {\n        var val = this.attrs(attrs);\n        attributeBlocks.unshift(val);\n      }\n      if (attributeBlocks.length > 1) {\n        this.bufferExpression(\n          this.runtime('attrs') +\n            '(' +\n            this.runtime('merge') +\n            '([' +\n            attributeBlocks.join(',') +\n            ']), ' +\n            stringify(this.terse) +\n            ')'\n        );\n      } else {\n        this.bufferExpression(\n          this.runtime('attrs') +\n            '(' +\n            attributeBlocks[0] +\n            ', ' +\n            stringify(this.terse) +\n            ')'\n        );\n      }\n    } else if (attrs.length) {\n      this.attrs(attrs, true);\n    }\n  },\n\n  /**\n   * Compile attributes.\n   */\n\n  attrs: function(attrs, buffer) {\n    var res = compileAttrs(attrs, {\n      terse: this.terse,\n      format: buffer ? 'html' : 'object',\n      runtime: this.runtime.bind(this),\n    });\n    if (buffer) {\n      this.bufferExpression(res);\n    }\n    return res;\n  },\n\n  /**\n   * Compile attribute blocks.\n   */\n\n  attributeBlocks: function(attributeBlocks) {\n    return (\n      attributeBlocks &&\n      attributeBlocks.slice().map(function(attrBlock) {\n        return attrBlock.val;\n      })\n    );\n  },\n};\n\nfunction tagCanInline(tag) {\n  function isInline(node) {\n    // Recurse if the node is a block\n    if (node.type === 'Block') return node.nodes.every(isInline);\n    // When there is a YieldBlock here, it is an indication that the file is\n    // expected to be included but is not. If this is the case, the block\n    // must be empty.\n    if (node.type === 'YieldBlock') return true;\n    return (node.type === 'Text' && !/\\n/.test(node.val)) || node.isInline;\n  }\n\n  return tag.block.nodes.every(isInline);\n}\n"]},"metadata":{},"sourceType":"script"}