{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const finance = new Finance();\n    const n = dataTable.length; // number of periods\n\n    let rate = 0.001; // initial guess for the rate of return\n\n    let investments = [];\n    let ir = [];\n\n    for (let i = 0; i < n; i++) {\n      ir.push(dataTable[i].intRate);\n      investments.push(dataTable[i].annPay);\n    } // calculate the net present value of the investments at the initial guess for the rate of return\n\n\n    let npv = initialValue;\n\n    for (let i = 0; i < n; i++) {\n      npv += finance.PV(ir[i] * 100, investments[i]);\n    }\n\n    let testNpv = npv; // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n    const tolerance = 1e-6; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 1e+6; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs(testNpv - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate += (targetValue - testNpv) / testNpv; // recalculate the net present value at the new rate of return\n\n      testNpv = initialValue;\n\n      for (let i = 0; i < n; i++) {\n        testNpv += finance.PV(rate * 100, investments[i]);\n      }\n\n      console.log(testNpv, Math.abs(testNpv - targetValue), rate);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    return rate;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","seek","initialValue","dataTable","targetValue","finance","n","length","rate","investments","ir","i","push","intRate","annPay","npv","PV","testNpv","tolerance","maxIterations","iterations","Math","abs","console","log","Error"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;AACD;;AACDC,EAAAA,IAAI,CAACC,YAAD,EAAeC,SAAf,EAA0BC,WAA1B,EAAuC;AACzC,UAAMC,OAAO,GAAG,IAAIP,OAAJ,EAAhB;AACA,UAAMQ,CAAC,GAAGH,SAAS,CAACI,MAApB,CAFyC,CAEZ;;AAC7B,QAAIC,IAAI,GAAG,KAAX,CAHyC,CAGtB;;AAEnB,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,EAAE,GAAG,EAAT;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuBK,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,EAAE,CAACE,IAAH,CAAQT,SAAS,CAACQ,CAAD,CAAT,CAAaE,OAArB;AACAJ,MAAAA,WAAW,CAACG,IAAZ,CAAiBT,SAAS,CAACQ,CAAD,CAAT,CAAaG,MAA9B;AACD,KAVwC,CAYzC;;;AACA,QAAIC,GAAG,GAAGb,YAAV;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuBK,CAAC,EAAxB,EAA4B;AAC1BI,MAAAA,GAAG,IAAIV,OAAO,CAACW,EAAR,CAAWN,EAAE,CAACC,CAAD,CAAF,GAAQ,GAAnB,EAAwBF,WAAW,CAACE,CAAD,CAAnC,CAAP;AACD;;AACD,QAAIM,OAAO,GAAGF,GAAd,CAjByC,CAmBzC;;AACA,UAAMG,SAAS,GAAG,IAAlB,CApByC,CAoBhB;;AACzB,UAAMC,aAAa,GAAG,IAAtB,CArByC,CAqBZ;;AAC7B,QAAIC,UAAU,GAAG,CAAjB,CAtByC,CAsBpB;;AACrB,WAAOC,IAAI,CAACC,GAAL,CAASL,OAAO,GAAGb,WAAnB,IAAkCc,SAAlC,IAA+CE,UAAU,GAAGD,aAAnE,EAAkF;AAChF;AACAX,MAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGa,OAAf,IAA0BA,OAAlC,CAFgF,CAIhF;;AACAA,MAAAA,OAAO,GAAGf,YAAV;;AACA,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuBK,CAAC,EAAxB,EAA4B;AAC1BM,QAAAA,OAAO,IAAIZ,OAAO,CAACW,EAAR,CAAWR,IAAI,GAAG,GAAlB,EAAuBC,WAAW,CAACE,CAAD,CAAlC,CAAX;AACD;;AACDY,MAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ,EAAqBI,IAAI,CAACC,GAAL,CAASL,OAAO,GAAGb,WAAnB,CAArB,EAAsDI,IAAtD;AACAY,MAAAA,UAAU;AACX;;AAED,QAAIA,UAAU,KAAKD,aAAnB,EAAkC;AAChC,YAAM,IAAIM,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAED,WAAOjB,IAAP;AACD;;AA9CoC;;AAiDvC,eAAeT,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const finance = new Finance();\n    const n = dataTable.length;  // number of periods\n    let rate = 0.001;  // initial guess for the rate of return\n\n    let investments = [];\n    let ir = [];\n    for (let i = 0; i < n; i++) {\n      ir.push(dataTable[i].intRate);\n      investments.push(dataTable[i].annPay);\n    }\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let npv = initialValue;\n    for (let i = 0; i < n; i++) {\n      npv += finance.PV(ir[i] * 100, investments[i]);\n    }\n    let testNpv = npv;\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-6;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 1e+6;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs(testNpv - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate += (targetValue - testNpv) / testNpv;\n\n      // recalculate the net present value at the new rate of return\n      testNpv = initialValue;\n      for (let i = 0; i < n; i++) {\n        testNpv += finance.PV(rate * 100, investments[i]);\n      }\n      console.log(testNpv, Math.abs(testNpv - targetValue), rate);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    return rate;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}