{"ast":null,"code":"// +++++++++++++++++++++++++ //\n// Mathematical Calculations //\n// +++++++++++++++++++++++++ //\nclass MathFuncts {\n  constructor() {//\n\n    this.mngFee = function (pBOY, pannPay, pmngFee) {\n      return (pBOY + pannPay) * pmngFee;\n    };\n\n    this.balEOY = function (pBOY, pannPay, pmngFee, pEconData, tyrs) {\n      if (tyrs < 1) {\n        tyrs = 1;\n      }\n\n      ; // take out management fee at END of the year\n\n      let myBalance = (pBOY + pannPay) * Math.pow(1 + pEconData / 1, tyrs) - (pBOY + pannPay) * pmngFee; //console.log(\"myBalance is: \" + myBalance + \" | Year: \" + tyrs);\n\n      return myBalance;\n    };\n\n    this.averageYield = function ($, sumOfYields, numYears, theTable, annPay, BOYBalance) {\n      let avgYield = sumOfYields / numYears;\n      this.fantasyPVonIR(avgYield, annPay, numYears, BOYBalance[0]);\n      return avgYield;\n    };\n\n    this.fantasyPVonIR = function (avgROR, annPay, numYears, pBOYBalance) {\n      // calculate the value of the account,\n      // IF Average ROR was true...\n      avgROR = avgROR / 100;\n      let fantasyPV = Math.round((1 + avgROR) * annPay * (Math.pow(1 + avgROR, numYears) - 1) / avgROR + pBOYBalance * Math.pow(1 + avgROR, numYears));\n      return fantasyPV;\n    };\n\n    this.calcReturn = function (initVal, endVal) {\n      let theReturn = Math.abs((initVal - endVal) / initVal);\n      return theReturn;\n    };\n\n    this.calcPVonIR = function (IR, annPay, numYears, pBOYBalance) {\n      let myCalcPVonIR = Math.round((1 + IR) * annPay * ((Math.pow(1 + IR, numYears) - 1) / IR) + pBOYBalance * Math.pow(1 + IR / 1, numYears));\n      return myCalcPVonIR;\n    };\n\n    this.calcSimpleFV = function (IR, annPay, numYears, pBOYBalance) {\n      let mySimpleFV = Math.round(pBOYBalance * Math.pow(1 + IR, numYears)) + annPay * numYears;\n      return mySimpleFV;\n    };\n\n    this.calcSimpleFVBOY = function (IR, annPay, numYears, pBOYBalance, i) {\n      if (i == 0) {\n        pBOYBalance += annPay;\n        numYears--;\n      }\n\n      ;\n      let mySimpleFVBOY = annPay + Math.round(pBOYBalance * (1 + IR) ** numYears);\n      return mySimpleFVBOY;\n    };\n\n    this.randomGen = function (hi, lo) {\n      let guess = Math.random() * (hi - lo) + lo;\n      return guess;\n    };\n  } //calc management fee\n\n\n}\n\nexport default MathFuncts;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/mathfuncts.js"],"names":["MathFuncts","constructor","mngFee","pBOY","pannPay","pmngFee","balEOY","pEconData","tyrs","myBalance","Math","pow","averageYield","$","sumOfYields","numYears","theTable","annPay","BOYBalance","avgYield","fantasyPVonIR","avgROR","pBOYBalance","fantasyPV","round","calcReturn","initVal","endVal","theReturn","abs","calcPVonIR","IR","myCalcPVonIR","calcSimpleFV","mySimpleFV","calcSimpleFVBOY","i","mySimpleFVBOY","randomGen","hi","lo","guess","random"],"mappings":"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","sourcesContent":["// +++++++++++++++++++++++++ //\n// Mathematical Calculations //\n// +++++++++++++++++++++++++ //\n\nclass MathFuncts {\n    constructor() {\n        //\n    }\n\n    //calc management fee\n    mngFee = function (pBOY, pannPay, pmngFee) {\n        return (pBOY + pannPay) * pmngFee;\n    }\n\n    // End-of-Year Balance Calculation //\n    balEOY = function (pBOY, pannPay, pmngFee, pEconData, tyrs) {\n        if (tyrs < 1) { tyrs = 1 };\n        // take out management fee at END of the year\n        let myBalance = ((pBOY + pannPay) * Math.pow((1 + (pEconData / 1)), tyrs)) - ((pBOY + pannPay) * pmngFee);\n        //console.log(\"myBalance is: \" + myBalance + \" | Year: \" + tyrs);\n        return myBalance;\n    };\n\n    averageYield = function ($, sumOfYields, numYears, theTable, annPay, BOYBalance) {\n        let avgYield = sumOfYields / numYears;\n        this.fantasyPVonIR(avgYield, annPay, numYears, BOYBalance[0]);\n        return avgYield;\n    };\n\n    fantasyPVonIR = function (avgROR, annPay, numYears, pBOYBalance) {\n        // calculate the value of the account,\n        // IF Average ROR was true...\n        avgROR = avgROR / 100;\n        let fantasyPV = Math.round((1 + avgROR) * annPay * (Math.pow((1 + avgROR), numYears) - 1) / avgROR + pBOYBalance * Math.pow((1 + avgROR), numYears));\n        return fantasyPV;\n    };\n\n    calcReturn = function (initVal, endVal) {\n        let theReturn = Math.abs((initVal - endVal) / initVal);\n        return theReturn;\n    };\n\n    calcPVonIR = function (IR, annPay, numYears, pBOYBalance) {\n        let myCalcPVonIR = Math.round((1 + IR) * annPay * ((Math.pow((1 + IR), numYears) - 1) / IR) + pBOYBalance * Math.pow((1 + IR / 1), numYears));\n        return myCalcPVonIR;\n    };\n\n    calcSimpleFV = function (IR, annPay, numYears, pBOYBalance) {\n        let mySimpleFV = Math.round(pBOYBalance * Math.pow((1 + IR), numYears)) + (annPay * numYears);\n        return mySimpleFV;\n    };\n\n    calcSimpleFVBOY = function (IR, annPay, numYears, pBOYBalance, i) {\n        if (i == 0) { pBOYBalance += annPay; numYears--; };\n        let mySimpleFVBOY = (annPay) + Math.round(pBOYBalance * ((1 + IR) ** numYears));\n        return mySimpleFVBOY;\n    };\n\n    // generate a random number within a range\n    randomGen = function (hi, lo) {\n        let guess = Math.random() * (hi - lo) + lo;\n        return guess;\n    };\n\n}\n\nexport default MathFuncts;"]},"metadata":{},"sourceType":"module"}