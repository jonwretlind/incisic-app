{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _jsx = require(\"../utils/jsx\");\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getAlternate(node, context) {\n  return context.staticBlock(childContext => {\n    const children = (0, _visitors.visitExpressions)(node.alternate ? node.alternate.nodes : [], childContext);\n\n    if (children.length === 0) {\n      return _babelTypes.default.identifier('null');\n    }\n\n    if (children.length === 1) {\n      return children[0];\n    }\n\n    return (0, _jsx.buildJSXFragment)(children);\n  });\n}\n\nconst getBody = (node, context) => {\n  const bodyContent = [];\n\n  const _context$dynamicBlock = context.dynamicBlock(childContext => (0, _visitors.visitExpressions)(node.block.nodes, childContext)),\n        result = _context$dynamicBlock.result,\n        variables = _context$dynamicBlock.variables;\n\n  if (variables.length) {\n    bodyContent.unshift(_babelTypes.default.variableDeclaration('let', variables.map(id => _babelTypes.default.variableDeclarator(id))));\n  }\n\n  if (result.length > 1) {\n    bodyContent.push(_babelTypes.default.returnStatement(_babelTypes.default.arrayExpression(result)));\n  } else {\n    bodyContent.push(_babelTypes.default.returnStatement(result[0]));\n  }\n\n  return _babelTypes.default.blockStatement(bodyContent);\n};\n\nconst WhileVisitor = {\n  expression(node, context) {\n    const bodyArgs = [_babelTypes.default.identifier(node.val)];\n\n    if (node.key) {\n      bodyArgs.push(_babelTypes.default.identifier(node.key));\n    }\n\n    const list = (0, _parseExpression.default)(node.obj, context);\n\n    const callExpression = _babelTypes.default.callExpression(_babelTypes.default.memberExpression(list, _babelTypes.default.identifier('map')), [_babelTypes.default.arrowFunctionExpression(bodyArgs, getBody(node, context))]);\n\n    if (node.alternate) {\n      return _babelTypes.default.conditionalExpression(_babelTypes.default.logicalExpression('&&', _babelTypes.default.callExpression(_babelTypes.default.memberExpression(_babelTypes.default.identifier('Array'), _babelTypes.default.identifier('isArray')), [list]), _babelTypes.default.memberExpression(list, _babelTypes.default.identifier('length'))), callExpression, getAlternate(node, context));\n    }\n\n    return callExpression;\n  }\n\n};\nvar _default = WhileVisitor;\nexports.default = _default;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/visitors/Each.js"],"names":["Object","defineProperty","exports","value","default","_parseExpression","_interopRequireDefault","require","_jsx","_babelTypes","_visitors","obj","__esModule","getAlternate","node","context","staticBlock","childContext","children","visitExpressions","alternate","nodes","length","identifier","buildJSXFragment","getBody","bodyContent","_context$dynamicBlock","dynamicBlock","block","result","variables","unshift","variableDeclaration","map","id","variableDeclarator","push","returnStatement","arrayExpression","blockStatement","WhileVisitor","expression","bodyArgs","val","key","list","callExpression","memberExpression","arrowFunctionExpression","conditionalExpression","logicalExpression","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _jsx = require(\"../utils/jsx\");\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getAlternate(node, context) {\n  return context.staticBlock(childContext => {\n    const children = (0, _visitors.visitExpressions)(node.alternate ? node.alternate.nodes : [], childContext);\n\n    if (children.length === 0) {\n      return _babelTypes.default.identifier('null');\n    }\n\n    if (children.length === 1) {\n      return children[0];\n    }\n\n    return (0, _jsx.buildJSXFragment)(children);\n  });\n}\n\nconst getBody = (node, context) => {\n  const bodyContent = [];\n\n  const _context$dynamicBlock = context.dynamicBlock(childContext => (0, _visitors.visitExpressions)(node.block.nodes, childContext)),\n        result = _context$dynamicBlock.result,\n        variables = _context$dynamicBlock.variables;\n\n  if (variables.length) {\n    bodyContent.unshift(_babelTypes.default.variableDeclaration('let', variables.map(id => _babelTypes.default.variableDeclarator(id))));\n  }\n\n  if (result.length > 1) {\n    bodyContent.push(_babelTypes.default.returnStatement(_babelTypes.default.arrayExpression(result)));\n  } else {\n    bodyContent.push(_babelTypes.default.returnStatement(result[0]));\n  }\n\n  return _babelTypes.default.blockStatement(bodyContent);\n};\n\nconst WhileVisitor = {\n  expression(node, context) {\n    const bodyArgs = [_babelTypes.default.identifier(node.val)];\n\n    if (node.key) {\n      bodyArgs.push(_babelTypes.default.identifier(node.key));\n    }\n\n    const list = (0, _parseExpression.default)(node.obj, context);\n\n    const callExpression = _babelTypes.default.callExpression(_babelTypes.default.memberExpression(list, _babelTypes.default.identifier('map')), [_babelTypes.default.arrowFunctionExpression(bodyArgs, getBody(node, context))]);\n\n    if (node.alternate) {\n      return _babelTypes.default.conditionalExpression(_babelTypes.default.logicalExpression('&&', _babelTypes.default.callExpression(_babelTypes.default.memberExpression(_babelTypes.default.identifier('Array'), _babelTypes.default.identifier('isArray')), [list]), _babelTypes.default.memberExpression(list, _babelTypes.default.identifier('length'))), callExpression, getAlternate(node, context));\n    }\n\n    return callExpression;\n  }\n\n};\nvar _default = WhileVisitor;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}