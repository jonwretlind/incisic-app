{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n\n    this.guess = function (hi, lo) {\n      var guess = Math.random() * (hi - lo) + lo;\n      return guess;\n    };\n\n    this.finance = new Finance();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length; // number of periods\n\n    let rate = .1; // initial guess for the rate of return\n    // calculate the net present value of the investments at the initial guess for the rate of return\n\n    let pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue);\n    let avg = this.calcavg(dataTable); // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n    const tolerance = 1e-9; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 1e+6; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs((pvir - targetValue) / pvir) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1); // recalculate the net present value at the new rate of return\n\n      pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue); //pvir = this.calcpval(rate, dataTable[n - 1].balEOY, 1);\n\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    return rate, avg;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n\n    avg = avg / n;\n    return avg;\n  }\n\n  calcpvir(rate, annPay, numYears, initialValue) {\n    let pvir = Math.round((1 + rate) * annPay * ((1 + rate) ** numYears - 1) / rate + initialValue * (1 + rate / 1) ** numYears);\n    return pvir;\n  } // generate a random number within a range\n\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","guess","hi","lo","Math","random","finance","seek","initialValue","dataTable","targetValue","n","length","rate","pvir","calcpvir","annPay","avg","calcavg","tolerance","maxIterations","iterations","abs","Error","i","intRate","numYears","round"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;;AAFY,SAkDdC,KAlDc,GAkDN,UAAUC,EAAV,EAAcC,EAAd,EAAkB;AACxB,UAAIF,KAAK,GAAGG,IAAI,CAACC,MAAL,MAAiBH,EAAE,GAAGC,EAAtB,IAA4BA,EAAxC;AACA,aAAOF,KAAP;AACD,KArDa;;AAGZ,SAAKK,OAAL,GAAe,IAAIR,OAAJ,EAAf;AACD;;AACDS,EAAAA,IAAI,CAACC,YAAD,EAAeC,SAAf,EAA0BC,WAA1B,EAAuC;AACzC,UAAMC,CAAC,GAAGF,SAAS,CAACG,MAApB,CADyC,CACZ;;AAC7B,QAAIC,IAAI,GAAG,EAAX,CAFyC,CAEzB;AAEhB;;AACA,QAAIC,IAAI,GAAG,KAAKC,QAAL,CAAcF,IAAd,EAAoBJ,SAAS,CAACE,CAAC,GAAG,CAAL,CAAT,CAAiBK,MAArC,EAA6CL,CAA7C,EAAgDH,YAAhD,CAAX;AACA,QAAIS,GAAG,GAAG,KAAKC,OAAL,CAAaT,SAAb,CAAV,CANyC,CAQzC;;AACA,UAAMU,SAAS,GAAG,IAAlB,CATyC,CAShB;;AACzB,UAAMC,aAAa,GAAG,IAAtB,CAVyC,CAUZ;;AAC7B,QAAIC,UAAU,GAAG,CAAjB,CAXyC,CAWpB;;AACrB,WAAOjB,IAAI,CAACkB,GAAL,CAAS,CAACR,IAAI,GAAGJ,WAAR,IAAuBI,IAAhC,IAAwCK,SAAxC,IAAqDE,UAAU,GAAGD,aAAzE,EAAwF;AACtF;AACAP,MAAAA,IAAI,GAAG,KAAKZ,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP,CAFsF,CAItF;;AACAa,MAAAA,IAAI,GAAG,KAAKC,QAAL,CAAcF,IAAd,EAAoBJ,SAAS,CAACE,CAAC,GAAG,CAAL,CAAT,CAAiBK,MAArC,EAA6CL,CAA7C,EAAgDH,YAAhD,CAAP,CALsF,CAMtF;;AAEAa,MAAAA,UAAU;AACX;;AAED,QAAIA,UAAU,KAAKD,aAAnB,EAAkC;AAChC,YAAM,IAAIG,KAAJ,CAAU,mEAAV,CAAN;AACD;;AACD,WAAOV,IAAI,EAAEI,GAAb;AACD;;AAEDC,EAAAA,OAAO,CAACT,SAAD,EAAY;AACjB,QAAIQ,GAAG,GAAG,CAAV;AACA,QAAIN,CAAC,GAAGF,SAAS,CAACG,MAAlB;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,CAApB,EAAuBa,CAAC,EAAxB,EAA4B;AAC1BP,MAAAA,GAAG,IAAIR,SAAS,CAACe,CAAD,CAAT,CAAaC,OAApB;AACD;;AACDR,IAAAA,GAAG,GAAGA,GAAG,GAAGN,CAAZ;AACA,WAAOM,GAAP;AACD;;AAEDF,EAAAA,QAAQ,CAACF,IAAD,EAAOG,MAAP,EAAeU,QAAf,EAAyBlB,YAAzB,EAAuC;AAC7C,QAAIM,IAAI,GAAGV,IAAI,CAACuB,KAAL,CAAY,CAAC,IAAId,IAAL,IAAaG,MAAb,IAAwB,CAAC,IAAIH,IAAL,KAAca,QAAf,GAA2B,CAAlD,IAAuDb,IAAxD,GAAgEL,YAAY,GAAI,CAAC,IAAIK,IAAI,GAAG,CAAZ,KAAkBa,QAA7G,CAAX;AACA,WAAOZ,IAAP;AACD,GAhDoC,CAkDrC;;;AAlDqC;;AAyDvC,eAAef,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n    this.finance = new Finance();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length;  // number of periods\n    let rate = .1;  // initial guess for the rate of return\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue);\n    let avg = this.calcavg(dataTable);\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-9;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 1e+6;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs((pvir - targetValue) / pvir) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1);\n\n      // recalculate the net present value at the new rate of return\n      pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue);\n      //pvir = this.calcpval(rate, dataTable[n - 1].balEOY, 1);\n\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n    return rate, avg;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n    avg = avg / n;\n    return avg;\n  }\n\n  calcpvir(rate, annPay, numYears, initialValue) {\n    let pvir = Math.round(((1 + rate) * annPay * (((1 + rate) ** numYears) - 1) / rate) + initialValue * ((1 + rate / 1) ** numYears));\n    return pvir;\n  }\n\n  // generate a random number within a range\n  guess = function (hi, lo) {\n    var guess = Math.random() * (hi - lo) + lo;\n    return guess;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}