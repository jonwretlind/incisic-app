{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getPlainShorthandValue(classes) {\n  if (classes.length) {\n    return classes.map(item => item.value).filter(Boolean).join(' ');\n  }\n\n  return null;\n}\n\nfunction getPlainClassNameValue(classes) {\n  if (classes.every(item => _babelTypes.default.isStringLiteral(item))) {\n    return classes.map(item => item.value).filter(Boolean).join(' ');\n  }\n\n  if (classes.every(item => _babelTypes.default.isArrayExpression(item))) {\n    return classes.reduce((all, item) => all.concat(item.elements), []);\n  }\n\n  if (Array.isArray(classes)) {\n    return classes[0];\n  }\n\n  return null;\n}\n\nfunction mergeStringWithClassName(shorthand, attribute) {\n  // There are several branches:\n  // - when attribute exists\n  // - when shorthand only exists\n  // - otherwise\n  if (attribute) {\n    if (typeof attribute === 'string') {\n      if (shorthand) {\n        return _babelTypes.default.stringLiteral(shorthand + ' ' + attribute);\n      }\n\n      return _babelTypes.default.stringLiteral(attribute);\n    }\n\n    if (Array.isArray(attribute)) {\n      if (shorthand) {\n        return _babelTypes.default.jSXExpressionContainer(_babelTypes.default.arrayExpression([_babelTypes.default.stringLiteral(shorthand)].concat(attribute)));\n      }\n\n      return _babelTypes.default.jSXExpressionContainer(_babelTypes.default.arrayExpression(attribute));\n    }\n\n    if (shorthand) {\n      return _babelTypes.default.jSXExpressionContainer(_babelTypes.default.binaryExpression('+', _babelTypes.default.stringLiteral(shorthand + ' '), attribute));\n    }\n\n    return _babelTypes.default.jSXExpressionContainer(attribute);\n  }\n\n  if (shorthand) {\n    if (typeof shorthand === 'string') {\n      return _babelTypes.default.stringLiteral(shorthand);\n    }\n\n    return _babelTypes.default.jSXExpressionContainer(shorthand);\n  }\n\n  return null;\n}\n\nfunction getClassNameValue(classesViaShorthand, classesViaAttribute) {\n  const shorthandValue = getPlainShorthandValue(classesViaShorthand);\n  const attributeValue = getPlainClassNameValue(classesViaAttribute);\n  return mergeStringWithClassName(shorthandValue, attributeValue);\n}\n\nvar _default = getClassNameValue;\nexports.default = _default;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/utils/get-class-name-value.js"],"names":["Object","defineProperty","exports","value","default","_babelTypes","_interopRequireDefault","require","obj","__esModule","getPlainShorthandValue","classes","length","map","item","filter","Boolean","join","getPlainClassNameValue","every","isStringLiteral","isArrayExpression","reduce","all","concat","elements","Array","isArray","mergeStringWithClassName","shorthand","attribute","stringLiteral","jSXExpressionContainer","arrayExpression","binaryExpression","getClassNameValue","classesViaShorthand","classesViaAttribute","shorthandValue","attributeValue","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getPlainShorthandValue(classes) {\n  if (classes.length) {\n    return classes.map(item => item.value).filter(Boolean).join(' ');\n  }\n\n  return null;\n}\n\nfunction getPlainClassNameValue(classes) {\n  if (classes.every(item => _babelTypes.default.isStringLiteral(item))) {\n    return classes.map(item => item.value).filter(Boolean).join(' ');\n  }\n\n  if (classes.every(item => _babelTypes.default.isArrayExpression(item))) {\n    return classes.reduce((all, item) => all.concat(item.elements), []);\n  }\n\n  if (Array.isArray(classes)) {\n    return classes[0];\n  }\n\n  return null;\n}\n\nfunction mergeStringWithClassName(shorthand, attribute) {\n  // There are several branches:\n  // - when attribute exists\n  // - when shorthand only exists\n  // - otherwise\n  if (attribute) {\n    if (typeof attribute === 'string') {\n      if (shorthand) {\n        return _babelTypes.default.stringLiteral(shorthand + ' ' + attribute);\n      }\n\n      return _babelTypes.default.stringLiteral(attribute);\n    }\n\n    if (Array.isArray(attribute)) {\n      if (shorthand) {\n        return _babelTypes.default.jSXExpressionContainer(_babelTypes.default.arrayExpression([_babelTypes.default.stringLiteral(shorthand)].concat(attribute)));\n      }\n\n      return _babelTypes.default.jSXExpressionContainer(_babelTypes.default.arrayExpression(attribute));\n    }\n\n    if (shorthand) {\n      return _babelTypes.default.jSXExpressionContainer(_babelTypes.default.binaryExpression('+', _babelTypes.default.stringLiteral(shorthand + ' '), attribute));\n    }\n\n    return _babelTypes.default.jSXExpressionContainer(attribute);\n  }\n\n  if (shorthand) {\n    if (typeof shorthand === 'string') {\n      return _babelTypes.default.stringLiteral(shorthand);\n    }\n\n    return _babelTypes.default.jSXExpressionContainer(shorthand);\n  }\n\n  return null;\n}\n\nfunction getClassNameValue(classesViaShorthand, classesViaAttribute) {\n  const shorthandValue = getPlainShorthandValue(classesViaShorthand);\n  const attributeValue = getPlainClassNameValue(classesViaAttribute);\n  return mergeStringWithClassName(shorthandValue, attributeValue);\n}\n\nvar _default = getClassNameValue;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}