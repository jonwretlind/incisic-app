{"ast":null,"code":"import Finance from 'financejs';\n\nfunction GoalSeek(initialValue, investments, targetValue) {\n  const finance = new Finance();\n  const n = investments.length; // number of periods\n\n  let rate = 0.1; // initial guess for the rate of return\n  // calculate the net present value of the investments at the initial guess for the rate of return\n\n  let npv = initialValue;\n\n  for (let i = 0; i < n; i++) {\n    npv += finance.PV(rate, investments[i].balBOY);\n  } // iterate until the net present value is close enough to the target value\n\n\n  const tolerance = 1e-2; // tolerance for the error between the net present value and the target value\n\n  while (Math.abs(npv - targetValue) > tolerance) {\n    // adjust the rate of return based on the error between the net present value and the target value\n    rate += (targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n\n    npv = initialValue;\n\n    for (let i = 0; i < n; i++) {\n      npv += finance.PV(rate, investments[i].balBOY);\n    }\n  }\n\n  return rate;\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["Finance","GoalSeek","initialValue","investments","targetValue","finance","n","length","rate","npv","i","PV","balBOY","tolerance","Math","abs"],"mappings":"AACA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,QAAT,CAAkBC,YAAlB,EAAgCC,WAAhC,EAA6CC,WAA7C,EAA0D;AACxD,QAAMC,OAAO,GAAG,IAAIL,OAAJ,EAAhB;AACA,QAAMM,CAAC,GAAGH,WAAW,CAACI,MAAtB,CAFwD,CAEzB;;AAC/B,MAAIC,IAAI,GAAG,GAAX,CAHwD,CAGvC;AAEjB;;AACA,MAAIC,GAAG,GAAGP,YAAV;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,IAAAA,GAAG,IAAIJ,OAAO,CAACM,EAAR,CAAWH,IAAX,EAAiBL,WAAW,CAACO,CAAD,CAAX,CAAeE,MAAhC,CAAP;AACD,GATuD,CAWxD;;;AACA,QAAMC,SAAS,GAAG,IAAlB,CAZwD,CAY/B;;AACzB,SAAOC,IAAI,CAACC,GAAL,CAASN,GAAG,GAAGL,WAAf,IAA8BS,SAArC,EAAgD;AAC9C;AACAL,IAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGK,GAAf,IAAsBA,GAA9B,CAF8C,CAI9C;;AACAA,IAAAA,GAAG,GAAGP,YAAN;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,GAAG,IAAIJ,OAAO,CAACM,EAAR,CAAWH,IAAX,EAAiBL,WAAW,CAACO,CAAD,CAAX,CAAeE,MAAhC,CAAP;AACD;AACF;;AAED,SAAOJ,IAAP;AACD;;AAED,eAAeP,QAAf","sourcesContent":["\nimport Finance from 'financejs';\n\nfunction GoalSeek(initialValue, investments, targetValue) {\n  const finance = new Finance();\n  const n = investments.length;  // number of periods\n  let rate = 0.1;  // initial guess for the rate of return\n\n  // calculate the net present value of the investments at the initial guess for the rate of return\n  let npv = initialValue;\n  for (let i = 0; i < n; i++) {\n    npv += finance.PV(rate, investments[i].balBOY);\n  }\n\n  // iterate until the net present value is close enough to the target value\n  const tolerance = 1e-2;  // tolerance for the error between the net present value and the target value\n  while (Math.abs(npv - targetValue) > tolerance) {\n    // adjust the rate of return based on the error between the net present value and the target value\n    rate += (targetValue - npv) / npv;\n\n    // recalculate the net present value at the new rate of return\n    npv = initialValue;\n    for (let i = 0; i < n; i++) {\n      npv += finance.PV(rate, investments[i].balBOY);\n    }\n  }\n\n  return rate;\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}