{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountArr: props.accountArr,\n      targetValue: props.targetValue\n    };\n  }\n\n  seek() {\n    const finance = new Finance();\n    const n = this.state.account.length; // number of periods\n\n    let rate = .001; // initial guess for the rate of return\n    // calculate the net present value of the investments at the initial guess for the rate of return\n\n    let npv = 0;\n\n    for (let i = 0; i < n; i++) {\n      npv = this.npv(this.state.accountArr[i].balEOY, rate);\n    } // iterate until the net present value is close enough to the target value\n\n\n    const tolerance = .01; // tolerance for the error between the net present value and the target value\n\n    while (Math.abs(npv - this.state.targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(npv - this.state.targetValue);\n      rate += (this.state.targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n      //npv = account[0].balBOY;\n\n      for (let i = 0; i < n; i++) {\n        npv = this.npv(this.state.accountArr[i].balEOY, rate);\n      }\n\n      return rate;\n    }\n  }\n\n  npv(accountValuesArr, rate) {\n    let npv = 0;\n\n    for (let i = 0; i < accountValuesArr.length; i++) {\n      npv += accountValuesArr[i] / Math.pow(1 + rate, i);\n    }\n\n    return npv;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","props","state","accountArr","targetValue","seek","finance","n","account","length","rate","npv","i","balEOY","tolerance","Math","abs","diff","accountValuesArr","pow"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAEF,KAAK,CAACE,UADP;AAEXC,MAAAA,WAAW,EAAEH,KAAK,CAACG;AAFR,KAAb;AAID;;AACDC,EAAAA,IAAI,GAAG;AACL,UAAMC,OAAO,GAAG,IAAIR,OAAJ,EAAhB;AACA,UAAMS,CAAC,GAAG,KAAKL,KAAL,CAAWM,OAAX,CAAmBC,MAA7B,CAFK,CAEiC;;AACtC,QAAIC,IAAI,GAAG,IAAX,CAHK,CAGa;AAElB;;AACA,QAAIC,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuBK,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,GAAG,GAAG,KAAKA,GAAL,CAAS,KAAKT,KAAL,CAAWC,UAAX,CAAsBS,CAAtB,EAAyBC,MAAlC,EAA0CH,IAA1C,CAAN;AACD,KATI,CAWL;;;AACA,UAAMI,SAAS,GAAG,GAAlB,CAZK,CAYmB;;AACxB,WAAOC,IAAI,CAACC,GAAL,CAASL,GAAG,GAAG,KAAKT,KAAL,CAAWE,WAA1B,IAAyCU,SAAhD,EAA2D;AACzD;AACA,UAAIG,IAAI,GAAGF,IAAI,CAACC,GAAL,CAASL,GAAG,GAAG,KAAKT,KAAL,CAAWE,WAA1B,CAAX;AACAM,MAAAA,IAAI,IAAI,CAAC,KAAKR,KAAL,CAAWE,WAAX,GAAyBO,GAA1B,IAAiCA,GAAzC,CAHyD,CAKzD;AACA;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAApB,EAAuBK,CAAC,EAAxB,EAA4B;AAC1BD,QAAAA,GAAG,GAAG,KAAKA,GAAL,CAAS,KAAKT,KAAL,CAAWC,UAAX,CAAsBS,CAAtB,EAAyBC,MAAlC,EAA0CH,IAA1C,CAAN;AACD;;AACD,aAAOA,IAAP;AACD;AACF;;AACDC,EAAAA,GAAG,CAACO,gBAAD,EAAmBR,IAAnB,EAAyB;AAC1B,QAAIC,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,gBAAgB,CAACT,MAArC,EAA6CG,CAAC,EAA9C,EAAkD;AAChDD,MAAAA,GAAG,IAAIO,gBAAgB,CAACN,CAAD,CAAhB,GAAsBG,IAAI,CAACI,GAAL,CAAS,IAAIT,IAAb,EAAmBE,CAAnB,CAA7B;AACD;;AACD,WAAOD,GAAP;AACD;;AAxCoC;;AA2CvC,eAAeZ,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountArr: props.accountArr,\n      targetValue: props.targetValue\n    };\n  }\n  seek() {\n    const finance = new Finance();\n    const n = this.state.account.length;  // number of periods\n    let rate = .001;  // initial guess for the rate of return\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let npv = 0;\n    for (let i = 0; i < n; i++) {\n      npv = this.npv(this.state.accountArr[i].balEOY, rate);\n    }\n\n    // iterate until the net present value is close enough to the target value\n    const tolerance = .01;  // tolerance for the error between the net present value and the target value\n    while (Math.abs(npv - this.state.targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(npv - this.state.targetValue);\n      rate += (this.state.targetValue - npv) / npv;\n\n      // recalculate the net present value at the new rate of return\n      //npv = account[0].balBOY;\n      for (let i = 0; i < n; i++) {\n        npv = this.npv(this.state.accountArr[i].balEOY, rate);\n      }\n      return rate;\n    }\n  }\n  npv(accountValuesArr, rate) {\n    let npv = 0;\n    for (let i = 0; i < accountValuesArr.length; i++) {\n      npv += accountValuesArr[i] / Math.pow(1 + rate, i);\n    }\n    return npv;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}