{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\nimport { ContactSupportOutlined } from '@material-ui/icons';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n\n  seek(initialValue, accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length; // number of periods\n\n    let rate = .1; // initial guess for the rate of return\n    //populate accountValuesArr\n\n    let investments = [];\n\n    for (let i = 0; i < n; i++) {\n      investments.push(accountArr[i].annPay);\n    } // calculate the net present value of the investments at the initial guess for the rate of return\n\n\n    let npv = initialValue;\n\n    for (let i = 0; i < n; i++) {\n      npv += investments[i] / Math.pow(1 + rate, i + 1);\n    } // iterate until the net present value is close enough to the target value\n\n\n    const tolerance = 1e-2; // tolerance for the error between the net present value and the target value\n\n    npv = initialValue; //reset npv to initial value\n\n    while (Math.abs(npv - targetValue) > tolerance) {\n      console.log(Math.abs(npv - targetValue), Math.abs(npv - targetValue) > tolerance); // adjust the rate of return based on the error between the net present value and the target value\n\n      rate += (targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n\n      for (let i = 0; i < n; i++) {\n        npv += investments[i] / Math.pow(1 + rate, i + 1);\n        console.log(npv, rate);\n      }\n    }\n\n    return rate;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","ContactSupportOutlined","GoalSeek","constructor","seek","initialValue","accountArr","targetValue","finance","n","length","rate","investments","i","push","annPay","npv","Math","pow","tolerance","abs","console","log"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,sBAAT,QAAuC,oBAAvC;;AAEA,MAAMC,QAAN,SAAuBJ,KAAK,CAACC,SAA7B,CAAuC;AACrCI,EAAAA,WAAW,GAAG;AACZ;AACA;AACD;;AACDC,EAAAA,IAAI,CAACC,YAAD,EAAeC,UAAf,EAA2BC,WAA3B,EAAwC;AAC1C,UAAMC,OAAO,GAAG,IAAIR,OAAJ,EAAhB;AACA,UAAMS,CAAC,GAAGH,UAAU,CAACI,MAArB,CAF0C,CAEZ;;AAC9B,QAAIC,IAAI,GAAG,EAAX,CAH0C,CAG1B;AAChB;;AACA,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,WAAW,CAACE,IAAZ,CAAiBR,UAAU,CAACO,CAAD,CAAV,CAAcE,MAA/B;AACD,KARyC,CAS1C;;;AACA,QAAIC,GAAG,GAAGX,YAAV;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,MAAAA,GAAG,IAAIJ,WAAW,CAACC,CAAD,CAAX,GAAiBI,IAAI,CAACC,GAAL,CAAS,IAAIP,IAAb,EAAmBE,CAAC,GAAG,CAAvB,CAAxB;AACD,KAbyC,CAe1C;;;AACA,UAAMM,SAAS,GAAG,IAAlB,CAhB0C,CAgBjB;;AACzBH,IAAAA,GAAG,GAAGX,YAAN,CAjB0C,CAiBtB;;AACpB,WAAOY,IAAI,CAACG,GAAL,CAASJ,GAAG,GAAGT,WAAf,IAA8BY,SAArC,EAAgD;AAC9CE,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACG,GAAL,CAASJ,GAAG,GAAGT,WAAf,CAAZ,EAAyCU,IAAI,CAACG,GAAL,CAASJ,GAAG,GAAGT,WAAf,IAA8BY,SAAvE,EAD8C,CAE9C;;AACAR,MAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGS,GAAf,IAAsBA,GAA9B,CAH8C,CAK9C;;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,QAAAA,GAAG,IAAIJ,WAAW,CAACC,CAAD,CAAX,GAAiBI,IAAI,CAACC,GAAL,CAAS,IAAIP,IAAb,EAAmBE,CAAC,GAAG,CAAvB,CAAxB;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ,EAAiBL,IAAjB;AACD;AACF;;AACD,WAAOA,IAAP;AACD;;AAnCoC;;AAsCvC,eAAeT,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\nimport { ContactSupportOutlined } from '@material-ui/icons';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n  seek(initialValue, accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length;  // number of periods\n    let rate = .1;  // initial guess for the rate of return\n    //populate accountValuesArr\n    let investments = [];\n    for (let i = 0; i < n; i++) {\n      investments.push(accountArr[i].annPay);\n    }\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let npv = initialValue;\n    for (let i = 0; i < n; i++) {\n      npv += investments[i] / Math.pow(1 + rate, i + 1);\n    }\n\n    // iterate until the net present value is close enough to the target value\n    const tolerance = 1e-2;  // tolerance for the error between the net present value and the target value\n    npv = initialValue; //reset npv to initial value\n    while (Math.abs(npv - targetValue) > tolerance) {\n      console.log(Math.abs(npv - targetValue), Math.abs(npv - targetValue) > tolerance);\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate += (targetValue - npv) / npv;\n\n      // recalculate the net present value at the new rate of return\n      for (let i = 0; i < n; i++) {\n        npv += investments[i] / Math.pow(1 + rate, i + 1);\n        console.log(npv, rate);\n      }\n    }\n    return rate;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}