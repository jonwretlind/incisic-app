{"ast":null,"code":"// traverse data object and check to see if there are second\n// level objects and convert to array of values\nclass Traverse {\n  constructor() {\n    this.result = [];\n    this.$result = \"\"; //string\n  }\n\n  run(data) {\n    this.loop(data);\n    console.log(this.$result);\n    return this.$result;\n  }\n\n  loop(data) {\n    var len = Object.keys(data).length;\n\n    for (var i = 0; i < len; i++) {\n      var key = Object.keys(data)[i];\n      var val = Object.values(data)[i];\n      this.result.push(val);\n\n      if (typeof val === 'object') {\n        var val2 = Object.values(data[key]);\n        this.result.push(val2);\n        if (!val2 == \"undefined\") this.loop(val2); //recursive\n      }\n\n      ;\n    }\n\n    for (var n = 0; n < this.result.length; n++) {\n      if (n < this.result.length - 1) {\n        this.$result += this.result[n] + \", \";\n      } else {\n        this.$result += this.result[n]; // don't add comma on last item\n      }\n    }\n  } //loop\n\n\n} //Traverse\n\n\nexport default Traverse;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/traverse.js"],"names":["Traverse","constructor","result","$result","run","data","loop","console","log","len","Object","keys","length","i","key","val","values","push","val2","n"],"mappings":"AAAA;AACA;AACA,MAAMA,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,EAAf,CAFY,CAEO;AACpB;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,SAAKC,IAAL,CAAUD,IAAV;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,OAAjB;AACA,WAAO,KAAKA,OAAZ;AACD;;AAEDG,EAAAA,IAAI,CAACD,IAAD,EAAO;AACP,QAAII,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,MAA5B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;AAC7B,UAAIC,GAAG,GAAGJ,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBQ,CAAlB,CAAV;AACA,UAAIE,GAAG,GAAGL,MAAM,CAACM,MAAP,CAAcX,IAAd,EAAoBQ,CAApB,CAAV;AACA,WAAKX,MAAL,CAAYe,IAAZ,CAAiBF,GAAjB;;AACA,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAIG,IAAI,GAAGR,MAAM,CAACM,MAAP,CAAcX,IAAI,CAACS,GAAD,CAAlB,CAAX;AACA,aAAKZ,MAAL,CAAYe,IAAZ,CAAiBC,IAAjB;AACA,YAAI,CAAEA,IAAF,IAAU,WAAd,EAA2B,KAAKZ,IAAL,CAAUY,IAAV,EAHA,CAGiB;AAC7C;;AAAA;AACD;;AAED,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,MAAL,CAAYU,MAAhC,EAAwCO,CAAC,EAAzC,EAA6C;AAC3C,UAAKA,CAAC,GAAG,KAAKjB,MAAL,CAAYU,MAAZ,GAAoB,CAA7B,EAAiC;AAC/B,aAAKT,OAAL,IAAgB,KAAKD,MAAL,CAAYiB,CAAZ,IAAiB,IAAjC;AACD,OAFD,MAEO;AACL,aAAKhB,OAAL,IAAgB,KAAKD,MAAL,CAAYiB,CAAZ,CAAhB,CADK,CAC2B;AACjC;AACF;AACF,GAhCU,CAgCV;;;AAhCU,C,CAkCb;;;AACF,eAAenB,QAAf","sourcesContent":["// traverse data object and check to see if there are second\n// level objects and convert to array of values\nclass Traverse {\n  constructor() {\n    this.result = [];\n    this.$result = \"\"; //string\n  }\n\n  run(data) {\n    this.loop(data);\n    console.log(this.$result);\n    return this.$result;\n  }\n\n  loop(data) {\n      var len = Object.keys(data).length;\n      for (var i = 0; i < len; i++) {\n       var key = Object.keys(data)[i];\n       var val = Object.values(data)[i];\n       this.result.push(val);\n       if (typeof val === 'object') {\n         var val2 = Object.values(data[key]);\n         this.result.push(val2);\n         if (! val2 == \"undefined\") this.loop(val2); //recursive\n       };\n      }\n\n      for (var n = 0; n < this.result.length; n++) {\n        if ( n < this.result.length -1 ) {\n          this.$result += this.result[n] + \", \";\n        } else {\n          this.$result += this.result[n]; // don't add comma on last item\n        }\n      }\n    }//loop\n\n} //Traverse\nexport default Traverse;\n"]},"metadata":{},"sourceType":"module"}