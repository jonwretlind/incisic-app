{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\nimport { ContactSupportOutlined } from '@material-ui/icons';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n\n  seek(initialValue, accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length; // number of periods\n\n    let rate = .01; // initial guess for the rate of return\n    //populate accountValuesArr\n\n    let accountValuesArr = [];\n\n    for (let i = 0; i < n; i++) {\n      accountValuesArr.push(accountArr[i].balEOY);\n    } // calculate the net present value of the investments at the initial guess for the rate of return\n\n\n    let pv = initialValue;\n\n    for (let i = 0; i < n; i++) {\n      pv = finance.PV(rate, accountValuesArr[i]);\n    } // iterate until the net present value is close enough to the target value\n\n\n    const tolerance = .01; // tolerance for the error between the net present value and the target value\n\n    while (Math.abs(pv - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(pv - targetValue);\n      rate += (targetValue - pv) / pv; // recalculate the net present value at the new rate of return\n\n      pv = initialValue; //reset pv to initial value\n\n      for (let i = 0; i < n; i++) {\n        pv = finance.PV(rate, accountValuesArr[i]);\n        console.log(pv, rate, diff);\n      }\n\n      return rate;\n    }\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","ContactSupportOutlined","GoalSeek","constructor","seek","initialValue","accountArr","targetValue","finance","n","length","rate","accountValuesArr","i","push","balEOY","pv","PV","tolerance","Math","abs","diff","console","log"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,sBAAT,QAAuC,oBAAvC;;AAEA,MAAMC,QAAN,SAAuBJ,KAAK,CAACC,SAA7B,CAAuC;AACrCI,EAAAA,WAAW,GAAG;AACZ;AACA;AACD;;AACDC,EAAAA,IAAI,CAACC,YAAD,EAAeC,UAAf,EAA2BC,WAA3B,EAAwC;AAC1C,UAAMC,OAAO,GAAG,IAAIR,OAAJ,EAAhB;AACA,UAAMS,CAAC,GAAGH,UAAU,CAACI,MAArB,CAF0C,CAEZ;;AAC9B,QAAIC,IAAI,GAAG,GAAX,CAH0C,CAGzB;AACjB;;AACA,QAAIC,gBAAgB,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,gBAAgB,CAACE,IAAjB,CAAsBR,UAAU,CAACO,CAAD,CAAV,CAAcE,MAApC;AACD,KARyC,CAS1C;;;AACA,QAAIC,EAAE,GAAGX,YAAT;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,MAAAA,EAAE,GAAGR,OAAO,CAACS,EAAR,CAAWN,IAAX,EAAiBC,gBAAgB,CAACC,CAAD,CAAjC,CAAL;AACD,KAbyC,CAe1C;;;AACA,UAAMK,SAAS,GAAG,GAAlB,CAhB0C,CAgBlB;;AACxB,WAAOC,IAAI,CAACC,GAAL,CAASJ,EAAE,GAAGT,WAAd,IAA6BW,SAApC,EAA+C;AAC7C;AACA,UAAIG,IAAI,GAAGF,IAAI,CAACC,GAAL,CAASJ,EAAE,GAAGT,WAAd,CAAX;AACAI,MAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGS,EAAf,IAAqBA,EAA7B,CAH6C,CAK7C;;AACAA,MAAAA,EAAE,GAAGX,YAAL,CAN6C,CAM1B;;AACnB,WAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,QAAAA,EAAE,GAAGR,OAAO,CAACS,EAAR,CAAWN,IAAX,EAAiBC,gBAAgB,CAACC,CAAD,CAAjC,CAAL;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ,EAAgBL,IAAhB,EAAsBU,IAAtB;AACD;;AACD,aAAOV,IAAP;AACD;AACF;;AAnCoC;;AAsCvC,eAAeT,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\nimport { ContactSupportOutlined } from '@material-ui/icons';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n  seek(initialValue, accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length;  // number of periods\n    let rate = .01;  // initial guess for the rate of return\n    //populate accountValuesArr\n    let accountValuesArr = [];\n    for (let i = 0; i < n; i++) {\n      accountValuesArr.push(accountArr[i].balEOY);\n    }\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let pv = initialValue;\n    for (let i = 0; i < n; i++) {\n      pv = finance.PV(rate, accountValuesArr[i]);\n    }\n\n    // iterate until the net present value is close enough to the target value\n    const tolerance = .01;  // tolerance for the error between the net present value and the target value\n    while (Math.abs(pv - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(pv - targetValue);\n      rate += (targetValue - pv) / pv;\n\n      // recalculate the net present value at the new rate of return\n      pv = initialValue; //reset pv to initial value\n      for (let i = 0; i < n; i++) {\n        pv = finance.PV(rate, accountValuesArr[i]);\n        console.log(pv, rate, diff);\n      }\n      return rate;\n    }\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}