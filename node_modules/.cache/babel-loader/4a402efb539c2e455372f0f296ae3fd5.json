{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n\n  seek(accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length; // number of periods\n\n    let rate = .001; // initial guess for the rate of return\n    // calculate the net present value of the investments at the initial guess for the rate of return\n\n    let npv = 0;\n\n    for (let i = 0; i < n; i++) {\n      npv = this.npv(accountArr[i].balEOY, rate);\n    } // iterate until the net present value is close enough to the target value\n\n\n    const tolerance = .01; // tolerance for the error between the net present value and the target value\n\n    while (Math.abs(npv - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(npv - targetValue);\n      rate += (targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n      //npv = account[0].balBOY;\n\n      for (let i = 0; i < n; i++) {\n        npv = this.npv(accountArr[i].balEOY, rate);\n      }\n\n      return rate;\n    }\n  }\n\n  npv(accountValuesArr, rate) {\n    let npv = 0;\n\n    for (let i = 0; i < accountValuesArr.length; i++) {\n      npv += accountValuesArr[i] / Math.pow(1 + rate, i);\n    }\n\n    return npv;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","seek","accountArr","targetValue","finance","n","length","rate","npv","i","balEOY","tolerance","Math","abs","diff","accountValuesArr","pow"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;AACD;;AACDC,EAAAA,IAAI,CAACC,UAAD,EAAaC,WAAb,EAA0B;AAC5B,UAAMC,OAAO,GAAG,IAAIN,OAAJ,EAAhB;AACA,UAAMO,CAAC,GAAGH,UAAU,CAACI,MAArB,CAF4B,CAEE;;AAC9B,QAAIC,IAAI,GAAG,IAAX,CAH4B,CAGV;AAElB;;AACA,QAAIC,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,GAAG,GAAG,KAAKA,GAAL,CAASN,UAAU,CAACO,CAAD,CAAV,CAAcC,MAAvB,EAA+BH,IAA/B,CAAN;AACD,KAT2B,CAW5B;;;AACA,UAAMI,SAAS,GAAG,GAAlB,CAZ4B,CAYJ;;AACxB,WAAOC,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGL,WAAf,IAA8BQ,SAArC,EAAgD;AAC9C;AACA,UAAIG,IAAI,GAAGF,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGL,WAAf,CAAX;AACAI,MAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGK,GAAf,IAAsBA,GAA9B,CAH8C,CAK9C;AACA;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,QAAAA,GAAG,GAAG,KAAKA,GAAL,CAASN,UAAU,CAACO,CAAD,CAAV,CAAcC,MAAvB,EAA+BH,IAA/B,CAAN;AACD;;AACD,aAAOA,IAAP;AACD;AACF;;AACDC,EAAAA,GAAG,CAACO,gBAAD,EAAmBR,IAAnB,EAAyB;AAC1B,QAAIC,GAAG,GAAG,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,gBAAgB,CAACT,MAArC,EAA6CG,CAAC,EAA9C,EAAkD;AAChDD,MAAAA,GAAG,IAAIO,gBAAgB,CAACN,CAAD,CAAhB,GAAsBG,IAAI,CAACI,GAAL,CAAS,IAAIT,IAAb,EAAmBE,CAAnB,CAA7B;AACD;;AACD,WAAOD,GAAP;AACD;;AArCoC;;AAwCvC,eAAeT,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n  seek(accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length;  // number of periods\n    let rate = .001;  // initial guess for the rate of return\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let npv = 0;\n    for (let i = 0; i < n; i++) {\n      npv = this.npv(accountArr[i].balEOY, rate);\n    }\n\n    // iterate until the net present value is close enough to the target value\n    const tolerance = .01;  // tolerance for the error between the net present value and the target value\n    while (Math.abs(npv - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(npv - targetValue);\n      rate += (targetValue - npv) / npv;\n\n      // recalculate the net present value at the new rate of return\n      //npv = account[0].balBOY;\n      for (let i = 0; i < n; i++) {\n        npv = this.npv(accountArr[i].balEOY, rate);\n      }\n      return rate;\n    }\n  }\n  npv(accountValuesArr, rate) {\n    let npv = 0;\n    for (let i = 0; i < accountValuesArr.length; i++) {\n      npv += accountValuesArr[i] / Math.pow(1 + rate, i);\n    }\n    return npv;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}