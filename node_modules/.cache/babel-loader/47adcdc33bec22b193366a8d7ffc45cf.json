{"ast":null,"code":"'use strict';\n\nvar jstransformer = require('jstransformer');\n\nvar uglify = require('uglify-js');\n\nvar CleanCSS = require('clean-css');\n\nvar resolve = require('resolve');\n\nmodule.exports = filter;\n\nfunction filter(name, str, options, currentDirectory, funcName) {\n  funcName = funcName || 'render';\n  var trPath;\n\n  try {\n    try {\n      trPath = resolve.sync('jstransformer-' + name, {\n        basedir: currentDirectory || process.cwd()\n      });\n    } catch (ex) {\n      trPath = require.resolve('jstransformer-' + name);\n    }\n  } catch (ex) {\n    var err = new Error('unknown filter \":' + name + '\"');\n    err.code = 'UNKNOWN_FILTER';\n    throw err;\n  }\n\n  var tr = jstransformer(require(trPath)); // TODO: we may want to add a way for people to separately specify \"locals\"\n\n  var result = tr[funcName](str, options, options).body;\n\n  if (options && options.minify) {\n    try {\n      switch (tr.outputFormat) {\n        case 'js':\n          result = uglify.minify(result, {\n            fromString: true\n          }).code;\n          break;\n\n        case 'css':\n          result = new CleanCSS().minify(result).styles;\n          break;\n      }\n    } catch (ex) {// better to fail to minify than output nothing\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/node_modules/pug-filters/lib/run-filter.js"],"names":["jstransformer","require","uglify","CleanCSS","resolve","module","exports","filter","name","str","options","currentDirectory","funcName","trPath","sync","basedir","process","cwd","ex","err","Error","code","tr","result","body","minify","outputFormat","fromString","styles"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAArB;;AAEAI,MAAM,CAACC,OAAP,GAAiBC,MAAjB;;AACA,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,OAA3B,EAAoCC,gBAApC,EAAsDC,QAAtD,EAAgE;AAC9DA,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,QAAvB;AACA,MAAIC,MAAJ;;AACA,MAAI;AACF,QAAI;AACFA,MAAAA,MAAM,GAAGT,OAAO,CAACU,IAAR,CAAa,mBAAmBN,IAAhC,EAAsC;AAACO,QAAAA,OAAO,EAAEJ,gBAAgB,IAAIK,OAAO,CAACC,GAAR;AAA9B,OAAtC,CAAT;AACD,KAFD,CAEE,OAAOC,EAAP,EAAW;AACXL,MAAAA,MAAM,GAAGZ,OAAO,CAACG,OAAR,CAAgB,mBAAmBI,IAAnC,CAAT;AACD;AACF,GAND,CAME,OAAOU,EAAP,EAAW;AACX,QAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAU,sBAAsBZ,IAAtB,GAA6B,GAAvC,CAAV;AACAW,IAAAA,GAAG,CAACE,IAAJ,GAAW,gBAAX;AACA,UAAMF,GAAN;AACD;;AACD,MAAIG,EAAE,GAAGtB,aAAa,CAACC,OAAO,CAACY,MAAD,CAAR,CAAtB,CAd8D,CAe9D;;AACA,MAAIU,MAAM,GAAGD,EAAE,CAACV,QAAD,CAAF,CAAaH,GAAb,EAAkBC,OAAlB,EAA2BA,OAA3B,EAAoCc,IAAjD;;AACA,MAAId,OAAO,IAAIA,OAAO,CAACe,MAAvB,EAA+B;AAC7B,QAAI;AACF,cAAQH,EAAE,CAACI,YAAX;AACE,aAAK,IAAL;AACEH,UAAAA,MAAM,GAAGrB,MAAM,CAACuB,MAAP,CAAcF,MAAd,EAAsB;AAACI,YAAAA,UAAU,EAAE;AAAb,WAAtB,EAA0CN,IAAnD;AACA;;AACF,aAAK,KAAL;AACEE,UAAAA,MAAM,GAAG,IAAIpB,QAAJ,GAAesB,MAAf,CAAsBF,MAAtB,EAA8BK,MAAvC;AACA;AANJ;AAQD,KATD,CASE,OAAOV,EAAP,EAAW,CACX;AACD;AACF;;AACD,SAAOK,MAAP;AACD","sourcesContent":["'use strict';\n\nvar jstransformer = require('jstransformer');\nvar uglify = require('uglify-js');\nvar CleanCSS = require('clean-css');\nvar resolve = require('resolve');\n\nmodule.exports = filter;\nfunction filter(name, str, options, currentDirectory, funcName) {\n  funcName = funcName || 'render';\n  var trPath;\n  try {\n    try {\n      trPath = resolve.sync('jstransformer-' + name, {basedir: currentDirectory || process.cwd()});\n    } catch (ex) {\n      trPath = require.resolve('jstransformer-' + name);\n    }\n  } catch (ex) {\n    var err = new Error('unknown filter \":' + name + '\"');\n    err.code = 'UNKNOWN_FILTER';\n    throw err;\n  }\n  var tr = jstransformer(require(trPath));\n  // TODO: we may want to add a way for people to separately specify \"locals\"\n  var result = tr[funcName](str, options, options).body;\n  if (options && options.minify) {\n    try {\n      switch (tr.outputFormat) {\n        case 'js':\n          result = uglify.minify(result, {fromString: true}).code;\n          break;\n        case 'css':\n          result = new CleanCSS().minify(result).styles;\n          break;\n      }\n    } catch (ex) {\n      // better to fail to minify than output nothing\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}