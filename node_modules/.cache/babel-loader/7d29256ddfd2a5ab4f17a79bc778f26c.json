{"ast":null,"code":"import Finance from 'financejs';\n\nfunction GoalSeek(account, targetValue) {\n  const finance = new Finance();\n  const n = account.length; // number of periods\n\n  let rate = 0; // initial guess for the rate of return\n  // calculate the net present value of the investments at the initial guess for the rate of return\n\n  let npv = finance.PV(rate, account[0].balBOY);\n  /*for (let i = 0; i < n; i++) {\n    npv = finance.PV(rate, account[i].balBOY);\n  }*/\n  // iterate until the net present value is close enough to the target value\n\n  const tolerance = .01; // tolerance for the error between the net present value and the target value\n\n  while (Math.abs(npv - targetValue) > tolerance) {\n    // adjust the rate of return based on the error between the net present value and the target value\n    var diff = Math.abs(npv - targetValue);\n    rate += (targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n    //npv = account[0].balBOY;\n\n    for (let i = 0; i < n; i++) {\n      npv = finance.PV(rate, account[i].balBOY);\n    }\n  }\n\n  return rate;\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["Finance","GoalSeek","account","targetValue","finance","n","length","rate","npv","PV","balBOY","tolerance","Math","abs","diff","i"],"mappings":"AACA,OAAOA,OAAP,MAAoB,WAApB;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,WAA3B,EAAwC;AACtC,QAAMC,OAAO,GAAG,IAAIJ,OAAJ,EAAhB;AACA,QAAMK,CAAC,GAAGH,OAAO,CAACI,MAAlB,CAFsC,CAEX;;AAC3B,MAAIC,IAAI,GAAG,CAAX,CAHsC,CAGvB;AAEf;;AACA,MAAIC,GAAG,GAAGJ,OAAO,CAACK,EAAR,CAAWF,IAAX,EAAiBL,OAAO,CAAC,CAAD,CAAP,CAAWQ,MAA5B,CAAV;AACA;AACF;AACA;AAEE;;AACA,QAAMC,SAAS,GAAG,GAAlB,CAZsC,CAYd;;AACxB,SAAOC,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGL,WAAf,IAA8BQ,SAArC,EAAgD;AAC9C;AACA,QAAIG,IAAI,GAAGF,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGL,WAAf,CAAX;AACAI,IAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGK,GAAf,IAAsBA,GAA9B,CAH8C,CAK9C;AACA;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,CAApB,EAAuBU,CAAC,EAAxB,EAA4B;AAC1BP,MAAAA,GAAG,GAAGJ,OAAO,CAACK,EAAR,CAAWF,IAAX,EAAiBL,OAAO,CAACa,CAAD,CAAP,CAAWL,MAA5B,CAAN;AACD;AACF;;AAED,SAAOH,IAAP;AACD;;AAED,eAAeN,QAAf","sourcesContent":["\nimport Finance from 'financejs';\n\nfunction GoalSeek(account, targetValue) {\n  const finance = new Finance();\n  const n = account.length;  // number of periods\n  let rate = 0;  // initial guess for the rate of return\n\n  // calculate the net present value of the investments at the initial guess for the rate of return\n  let npv = finance.PV(rate, account[0].balBOY);\n  /*for (let i = 0; i < n; i++) {\n    npv = finance.PV(rate, account[i].balBOY);\n  }*/\n\n  // iterate until the net present value is close enough to the target value\n  const tolerance = .01;  // tolerance for the error between the net present value and the target value\n  while (Math.abs(npv - targetValue) > tolerance) {\n    // adjust the rate of return based on the error between the net present value and the target value\n    var diff = Math.abs(npv - targetValue);\n    rate += (targetValue - npv) / npv;\n\n    // recalculate the net present value at the new rate of return\n    //npv = account[0].balBOY;\n    for (let i = 0; i < n; i++) {\n      npv = finance.PV(rate, account[i].balBOY);\n    }\n  }\n\n  return rate;\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}