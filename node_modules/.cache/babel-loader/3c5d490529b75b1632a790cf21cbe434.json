{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterpolationRefs = getInterpolationRefs;\nexports.getInterpolatedTemplate = getInterpolatedTemplate;\nexports.INTERPOLATION_REFERENCE_REGEX = exports.INTERPOLATION_REFERENCE_ID = void 0;\n/**\n * The interpolation reference is used to indicate\n * that an interpolation needs to occur when encountered\n * by a visitor.\n */\n\nconst INTERPOLATION_REFERENCE_ID = '_react_pug_replace_';\n/**\n * Used to check whether a value contains a replace\n * reference or multiple replace references.\n */\n\nexports.INTERPOLATION_REFERENCE_ID = INTERPOLATION_REFERENCE_ID;\nconst INTERPOLATION_REFERENCE_REGEX = /_react_pug_replace_\\d+/g;\n/**\n * Check whether the value is a valid interpolation\n * reference.\n * @param { string } value - The value to check\n * @returns { ?Array<string> } The references within\n * the value or null.\n */\n\nexports.INTERPOLATION_REFERENCE_REGEX = INTERPOLATION_REFERENCE_REGEX;\n\nfunction getInterpolationRefs(value) {\n  return value.match(INTERPOLATION_REFERENCE_REGEX);\n}\n/**\n * Convert pug raw template array into a string\n * containing references to interpolations as well\n * a map containing the interpolations.\n * @param { Array<TemplateElement> } tpl - The template array\n * @param { Array<Expression> } interpolations - The interpolations\n * @returns { Object } - The template with interpolation references\n * and a map containing the reference and the interpolation.\n */\n\n\nfunction getInterpolatedTemplate(tpl, interpolations) {\n  const interpolationRef = new Map();\n  const template = tpl.map((_ref, index) => {\n    let {\n      value\n    } = _ref;\n    const interpolation = interpolations[index];\n    const rawValue = value && typeof value === 'object' ? value.raw : '';\n\n    if (interpolation) {\n      const ref = `${INTERPOLATION_REFERENCE_ID}${index}`;\n      interpolationRef.set(ref, interpolation);\n      return `${String(rawValue)}${ref}`;\n    }\n\n    return rawValue;\n  }).join('');\n  return {\n    template,\n    interpolationRef\n  };\n}","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/utils/interpolation.js"],"names":["Object","defineProperty","exports","value","getInterpolationRefs","getInterpolatedTemplate","INTERPOLATION_REFERENCE_REGEX","INTERPOLATION_REFERENCE_ID","match","tpl","interpolations","interpolationRef","Map","template","map","index","interpolation","rawValue","raw","ref","set","String","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B;AACAF,OAAO,CAACG,uBAAR,GAAkCA,uBAAlC;AACAH,OAAO,CAACI,6BAAR,GAAwCJ,OAAO,CAACK,0BAAR,GAAqC,KAAK,CAAlF;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMA,0BAA0B,GAAG,qBAAnC;AACA;AACA;AACA;AACA;;AAEAL,OAAO,CAACK,0BAAR,GAAqCA,0BAArC;AACA,MAAMD,6BAA6B,GAAG,yBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,OAAO,CAACI,6BAAR,GAAwCA,6BAAxC;;AAEA,SAASF,oBAAT,CAA8BD,KAA9B,EAAqC;AACnC,SAAOA,KAAK,CAACK,KAAN,CAAYF,6BAAZ,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASD,uBAAT,CAAiCI,GAAjC,EAAsCC,cAAtC,EAAsD;AACpD,QAAMC,gBAAgB,GAAG,IAAIC,GAAJ,EAAzB;AACA,QAAMC,QAAQ,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,OAEtBC,KAFsB,KAEZ;AAAA,QAFa;AACxBZ,MAAAA;AADwB,KAEb;AACX,UAAMa,aAAa,GAAGN,cAAc,CAACK,KAAD,CAApC;AACA,UAAME,QAAQ,GAAGd,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,GAAqCA,KAAK,CAACe,GAA3C,GAAiD,EAAlE;;AAEA,QAAIF,aAAJ,EAAmB;AACjB,YAAMG,GAAG,GAAI,GAAEZ,0BAA2B,GAAEQ,KAAM,EAAlD;AACAJ,MAAAA,gBAAgB,CAACS,GAAjB,CAAqBD,GAArB,EAA0BH,aAA1B;AACA,aAAQ,GAAEK,MAAM,CAACJ,QAAD,CAAW,GAAEE,GAAI,EAAjC;AACD;;AAED,WAAOF,QAAP;AACD,GAbgB,EAadK,IAbc,CAaT,EAbS,CAAjB;AAcA,SAAO;AACLT,IAAAA,QADK;AAELF,IAAAA;AAFK,GAAP;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterpolationRefs = getInterpolationRefs;\nexports.getInterpolatedTemplate = getInterpolatedTemplate;\nexports.INTERPOLATION_REFERENCE_REGEX = exports.INTERPOLATION_REFERENCE_ID = void 0;\n\n/**\n * The interpolation reference is used to indicate\n * that an interpolation needs to occur when encountered\n * by a visitor.\n */\nconst INTERPOLATION_REFERENCE_ID = '_react_pug_replace_';\n/**\n * Used to check whether a value contains a replace\n * reference or multiple replace references.\n */\n\nexports.INTERPOLATION_REFERENCE_ID = INTERPOLATION_REFERENCE_ID;\nconst INTERPOLATION_REFERENCE_REGEX = /_react_pug_replace_\\d+/g;\n/**\n * Check whether the value is a valid interpolation\n * reference.\n * @param { string } value - The value to check\n * @returns { ?Array<string> } The references within\n * the value or null.\n */\n\nexports.INTERPOLATION_REFERENCE_REGEX = INTERPOLATION_REFERENCE_REGEX;\n\nfunction getInterpolationRefs(value) {\n  return value.match(INTERPOLATION_REFERENCE_REGEX);\n}\n/**\n * Convert pug raw template array into a string\n * containing references to interpolations as well\n * a map containing the interpolations.\n * @param { Array<TemplateElement> } tpl - The template array\n * @param { Array<Expression> } interpolations - The interpolations\n * @returns { Object } - The template with interpolation references\n * and a map containing the reference and the interpolation.\n */\n\n\nfunction getInterpolatedTemplate(tpl, interpolations) {\n  const interpolationRef = new Map();\n  const template = tpl.map(({\n    value\n  }, index) => {\n    const interpolation = interpolations[index];\n    const rawValue = value && typeof value === 'object' ? value.raw : '';\n\n    if (interpolation) {\n      const ref = `${INTERPOLATION_REFERENCE_ID}${index}`;\n      interpolationRef.set(ref, interpolation);\n      return `${String(rawValue)}${ref}`;\n    }\n\n    return rawValue;\n  }).join('');\n  return {\n    template,\n    interpolationRef\n  };\n}"]},"metadata":{},"sourceType":"script"}