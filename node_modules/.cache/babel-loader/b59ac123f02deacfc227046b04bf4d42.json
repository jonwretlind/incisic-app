{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.ensureBlock = ensureBlock;\nexports.toComputedKey = toComputedKey;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\n\nvar _t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nconst {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super: _super,\n  thisExpression,\n  toExpression,\n  unaryExpression\n} = _t;\n\nfunction toComputedKey() {\n  let key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements = [];\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression() {\n  let {\n    allowInsertArrow = true,\n    specCompliant = false,\n    noNewArrows = !specCompliant\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  const {\n    thisBinding,\n    fnPath: fn\n  } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  fn.ensureBlock();\n  fn.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      fn.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([])\n      });\n    }\n\n    fn.get(\"body\").unshiftContainer(\"body\", expressionStatement(callExpression(this.hub.addHelper(\"newArrowCheck\"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));\n    fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier(\"bind\")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath) {\n  let noNewArrows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let allowInsertArrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let arrowParent;\n  let thisEnvFn = fnPath.findParent(p => {\n    if (p.isArrowFunctionExpression()) {\n      var _arrowParent;\n\n      (_arrowParent = arrowParent) != null ? _arrowParent : arrowParent = p;\n      return false;\n    }\n\n    return p.isFunction() || p.isProgram() || p.isClassProperty({\n      static: false\n    }) || p.isClassPrivateProperty({\n      static: false\n    });\n  });\n  const inConstructor = thisEnvFn.isClassMethod({\n    kind: \"constructor\"\n  });\n\n  if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {\n    if (arrowParent) {\n      thisEnvFn = arrowParent;\n    } else if (allowInsertArrow) {\n      fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), []));\n      thisEnvFn = fnPath.get(\"callee\");\n      fnPath = thisEnvFn.get(\"body\");\n    } else {\n      throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n    }\n  }\n\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    const allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => identifier(\"arguments\");\n\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(binaryExpression(\"===\", unaryExpression(\"typeof\", args()), stringLiteral(\"undefined\")), thisEnvFn.scope.buildUndefinedNode(), args());\n      } else {\n        return args();\n      }\n    });\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () => metaProperty(identifier(\"new\"), identifier(\"target\")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      const isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        const value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      const call = callExpression(identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  let thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return {\n    thisBinding,\n    fnPath\n  };\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    const parts = [assignmentExpression(\"=\", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression(\"=\", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(\"+\", identifier(tmp.name), numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(sequenceExpression(parts));\n    const left = updateExpr.get(\"expressions.0.right\");\n    const right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n    const supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, assignmentExpression(\"=\", identifier(thisBinding), identifier(\"this\"))]);\n      }\n\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n    let fnBody;\n\n    if (propName) {\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = memberExpression(_super(), identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = assignmentExpression(\"=\", fnBody, identifier(valueIdent.name));\n    }\n\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = \"binding:\" + key;\n  let data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse({\n    ClassProperty(child) {\n      child.skip();\n    },\n\n    Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n\n    ThisExpression(child) {\n      thisPaths.push(child);\n    },\n\n    JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n\n    CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n\n    MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n\n    ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      let curr = child.scope;\n\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while (curr = curr.parent);\n\n      argumentsPaths.push(child);\n    },\n\n    MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/@babel/traverse/lib/path/conversion.js"],"names":["Object","defineProperty","exports","value","arrowFunctionToExpression","arrowFunctionToShadowed","ensureBlock","toComputedKey","unwrapFunctionEnvironment","_t","require","_helperFunctionName","arrowFunctionExpression","assignmentExpression","binaryExpression","blockStatement","callExpression","conditionalExpression","expressionStatement","identifier","isIdentifier","jsxIdentifier","memberExpression","metaProperty","numericLiteral","objectExpression","restElement","returnStatement","sequenceExpression","spreadElement","stringLiteral","super","_super","thisExpression","toExpression","unaryExpression","key","isMemberExpression","node","property","isProperty","isMethod","ReferenceError","computed","name","body","get","bodyNode","Array","isArray","Error","isBlockStatement","statements","stringPath","listKey","isStatement","push","isFunction","parentPath","setup","isArrowFunctionExpression","isFunctionExpression","isFunctionDeclaration","buildCodeFrameError","hoistFunctionEnvironment","allowInsertArrow","specCompliant","noNewArrows","thisBinding","fnPath","fn","type","checkBinding","scope","generateUidIdentifier","id","init","unshiftContainer","hub","addHelper","replaceWith","default","arrowParent","thisEnvFn","findParent","p","_arrowParent","isProgram","isClassProperty","static","isClassPrivateProperty","inConstructor","isClassMethod","kind","thisPaths","argumentsPaths","newTargetPaths","superProps","superCalls","getScopeInformation","length","allSuperCalls","traverse","Function","child","skip","ClassProperty","CallExpression","isSuper","superBinding","getSuperBinding","forEach","superCall","callee","loc","argumentsBinding","getBinding","args","path","buildUndefinedNode","argumentsChild","argsRef","newTargetBinding","targetChild","targetRef","flatSuperProps","reduce","acc","superProp","concat","standardizeSuperProperty","isAssignment","isAssignmentExpression","left","isCall","isCallExpression","getSuperPropBinding","right","call","getThisBinding","hasSuperClass","thisChild","thisRef","isJSX","operator","assignmentPath","op","slice","tmp","generateDeclaredUidIdentifier","object","isUpdateExpression","updateExpr","computedKey","parts","prefix","superClass","supers","WeakSet","has","add","replaceWithMultiple","argsBinding","propName","argsList","fnBody","method","unshift","valueIdent","cacheKey","data","getData","setData","ThisExpression","JSXIdentifier","isJSXMemberExpression","isJSXOpeningElement","MemberExpression","ReferencedIdentifier","curr","hasOwnBinding","rename","parent","MetaProperty"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.ensureBlock = ensureBlock;\nexports.toComputedKey = toComputedKey;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\n\nvar _t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nconst {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super: _super,\n  thisExpression,\n  toExpression,\n  unaryExpression\n} = _t;\n\nfunction toComputedKey() {\n  let key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements = [];\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression({\n  allowInsertArrow = true,\n  specCompliant = false,\n  noNewArrows = !specCompliant\n} = {}) {\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  const {\n    thisBinding,\n    fnPath: fn\n  } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  fn.ensureBlock();\n  fn.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      fn.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([])\n      });\n    }\n\n    fn.get(\"body\").unshiftContainer(\"body\", expressionStatement(callExpression(this.hub.addHelper(\"newArrowCheck\"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));\n    fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier(\"bind\")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {\n  let arrowParent;\n  let thisEnvFn = fnPath.findParent(p => {\n    if (p.isArrowFunctionExpression()) {\n      var _arrowParent;\n\n      (_arrowParent = arrowParent) != null ? _arrowParent : arrowParent = p;\n      return false;\n    }\n\n    return p.isFunction() || p.isProgram() || p.isClassProperty({\n      static: false\n    }) || p.isClassPrivateProperty({\n      static: false\n    });\n  });\n  const inConstructor = thisEnvFn.isClassMethod({\n    kind: \"constructor\"\n  });\n\n  if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {\n    if (arrowParent) {\n      thisEnvFn = arrowParent;\n    } else if (allowInsertArrow) {\n      fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), []));\n      thisEnvFn = fnPath.get(\"callee\");\n      fnPath = thisEnvFn.get(\"body\");\n    } else {\n      throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n    }\n  }\n\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    const allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => identifier(\"arguments\");\n\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(binaryExpression(\"===\", unaryExpression(\"typeof\", args()), stringLiteral(\"undefined\")), thisEnvFn.scope.buildUndefinedNode(), args());\n      } else {\n        return args();\n      }\n    });\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () => metaProperty(identifier(\"new\"), identifier(\"target\")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      const isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        const value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      const call = callExpression(identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  let thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return {\n    thisBinding,\n    fnPath\n  };\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    const parts = [assignmentExpression(\"=\", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression(\"=\", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(\"+\", identifier(tmp.name), numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(sequenceExpression(parts));\n    const left = updateExpr.get(\"expressions.0.right\");\n    const right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n    const supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, assignmentExpression(\"=\", identifier(thisBinding), identifier(\"this\"))]);\n      }\n\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n    let fnBody;\n\n    if (propName) {\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = memberExpression(_super(), identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = assignmentExpression(\"=\", fnBody, identifier(valueIdent.name));\n    }\n\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = \"binding:\" + key;\n  let data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse({\n    ClassProperty(child) {\n      child.skip();\n    },\n\n    Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n\n    ThisExpression(child) {\n      thisPaths.push(child);\n    },\n\n    JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n\n    CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n\n    MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n\n    ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      let curr = child.scope;\n\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while (curr = curr.parent);\n\n      argumentsPaths.push(child);\n    },\n\n    MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}"]},"metadata":{},"sourceType":"script"}