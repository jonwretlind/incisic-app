{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n\n    this.guess = function (hi, lo) {\n      var guess = Math.random() * (hi - lo) + lo;\n      return guess;\n    };\n\n    this.finance = new Finance();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length; // number of periods\n\n    let rate = .1; // initial guess for the rate of return\n    // calculate the net present value of the investments at the initial guess for the rate of return\n\n    let pvir = this.calcpval(rate, dataTable[n - 1].balEOY, 1); //let pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue);\n\n    console.log(\"initialValue:\", initialValue, \" pvir:\", pvir, \" targetValue:\", targetValue); // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n    const tolerance = 1e-3; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 1e+6; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs((pvir - targetValue) / pvir) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1); // recalculate the net present value at the new rate of return\n      //pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue);\n\n      pvir = this.calcpval(rate, dataTable[n - 1].balEOY, 1);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      console.log(iterations, Math.abs((pvir - targetValue) / pvir), pvir, rate);\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    console.log(iterations, Math.abs((pvir - targetValue) / pvir), pvir, rate);\n    return rate;\n  }\n\n  calcpval(r, data, n) {\n    let val = this.finance.PV(r, data, n);\n    return val;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n\n    avg = avg / n;\n    return avg;\n  }\n\n  calcpvir(rate, annPay, numYears, initialValue) {\n    let pvir = Math.round((1 + rate) * annPay * ((1 + rate) ** (numYears - 1) / rate) + initialValue * (1 + rate / 1) ** numYears);\n    return pvir;\n  } // generate a random number within a range\n\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","guess","hi","lo","Math","random","finance","seek","initialValue","dataTable","targetValue","n","length","rate","pvir","calcpval","balEOY","console","log","tolerance","maxIterations","iterations","abs","Error","r","data","val","PV","calcavg","avg","i","intRate","calcpvir","annPay","numYears","round"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n    this.finance = new Finance();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length;  // number of periods\n    let rate = .1;  // initial guess for the rate of return\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let pvir = this.calcpval(rate, dataTable[n - 1].balEOY, 1);\n    //let pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue);\n\n    console.log(\"initialValue:\", initialValue, \" pvir:\", pvir, \" targetValue:\", targetValue);\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-3;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 1e+6;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs((pvir - targetValue) / pvir) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1);\n\n      // recalculate the net present value at the new rate of return\n      //pvir = this.calcpvir(rate, dataTable[n - 1].annPay, n, initialValue);\n      pvir = this.calcpval(rate, dataTable[n - 1].balEOY, 1);\n\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      console.log(iterations, Math.abs((pvir - targetValue) / pvir), pvir, rate);\n\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n    console.log(iterations, Math.abs((pvir - targetValue) / pvir), pvir, rate);\n\n    return rate;\n\n  }\n\n  calcpval(r, data, n) {\n    let val = this.finance.PV(r, data, n);\n    return val;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n    avg = avg / n;\n    return avg;\n  }\n\n  calcpvir(rate, annPay, numYears, initialValue) {\n    let pvir = Math.round((1 + rate) * annPay * (((1 + rate) ** (numYears - 1)) / rate) + initialValue * ((1 + rate / 1) ** numYears));\n    return pvir;\n  }\n\n  // generate a random number within a range\n  guess = function (hi, lo) {\n    var guess = Math.random() * (hi - lo) + lo;\n    return guess;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}