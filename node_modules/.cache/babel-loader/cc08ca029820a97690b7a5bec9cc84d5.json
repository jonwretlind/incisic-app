{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n\n    this.guess = function (hi, lo) {\n      var guess = Math.random() * (hi - lo) + lo;\n      return guess;\n    };\n\n    this.finance = new Finance();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length; // number of periods\n\n    let rate = .1; // initial guess for the rate of return\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    //let fval = this.calcfval(rate, dataTable[n - 1].balEOY, 1);\n\n    let fval = this.calcpvir(rate, dataTable[n - 1].annPay, n, dataTable[n - 1].balBOY);\n    console.log(\"initialValue:\", initialValue, \" fval:\", fval, \" targetValue:\", targetValue); // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n    const tolerance = 1e-4; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 1e+6; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs((fval - targetValue) / fval) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1); // recalculate the net present value at the new rate of return\n\n      fval = this.calcfval(rate, dataTable[n - 1].balEOY, 1);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      console.log(iterations, Math.abs((fval - targetValue) / fval), fval, rate);\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    console.log(iterations, Math.abs((fval - targetValue) / fval), fval, rate);\n    return rate;\n  }\n\n  calcfval(r, data, n) {\n    let val = this.finance.PV(r, data, n);\n    return val;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n\n    avg = avg / n;\n    return avg;\n  }\n\n  calcpvir(rate, annPay, numYears, balBOY) {\n    let pvir = Math.round((1 + rate) * annPay * ((1 + rate) ** (numYears - 1) / rate) + balBOY * (1 + rate / 1) ** numYears);\n    return pvir;\n  } // generate a random number within a range\n\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","guess","hi","lo","Math","random","finance","seek","initialValue","dataTable","targetValue","n","length","rate","fval","calcpvir","annPay","balBOY","console","log","tolerance","maxIterations","iterations","abs","calcfval","balEOY","Error","r","data","val","PV","calcavg","avg","i","intRate","numYears","pvir","round"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n    this.finance = new Finance();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length;  // number of periods\n    let rate = .1;  // initial guess for the rate of return\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    //let fval = this.calcfval(rate, dataTable[n - 1].balEOY, 1);\n    let fval = this.calcpvir(rate, dataTable[n - 1].annPay, n, dataTable[n - 1].balBOY);\n\n    console.log(\"initialValue:\", initialValue, \" fval:\", fval, \" targetValue:\", targetValue);\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-4;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 1e+6;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs((fval - targetValue) / fval) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1);\n\n      // recalculate the net present value at the new rate of return\n      fval = this.calcfval(rate, dataTable[n - 1].balEOY, 1);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      console.log(iterations, Math.abs((fval - targetValue) / fval), fval, rate);\n\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n    console.log(iterations, Math.abs((fval - targetValue) / fval), fval, rate);\n\n    return rate;\n\n  }\n\n  calcfval(r, data, n) {\n    let val = this.finance.PV(r, data, n);\n    return val;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n    avg = avg / n;\n    return avg;\n  }\n\n  calcpvir(rate, annPay, numYears, balBOY) {\n    let pvir = Math.round((1 + rate) * annPay * (((1 + rate) ** (numYears - 1)) / rate) + (balBOY * ((1 + rate / 1) ** numYears)));\n    return pvir;\n  }\n\n  // generate a random number within a range\n  guess = function (hi, lo) {\n    var guess = Math.random() * (hi - lo) + lo;\n    return guess;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}