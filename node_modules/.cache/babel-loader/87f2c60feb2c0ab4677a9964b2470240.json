{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _jsx = require(\"../utils/jsx\");\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // [ \"JSXExpressionContainer\", \"ConditionalExpression\", \"IfStatement\" ]\n\n\nconst ConditionalVisitor = {\n  expression(node, context) {\n    if (node.alternate && node.alternate.type === 'Conditional') {\n      node.alternate = {\n        nodes: [node.alternate]\n      };\n    }\n\n    const test = (0, _parseExpression.default)(node.test, context);\n    const consequent = context.staticBlock(childContext => {\n      const children = (0, _visitors.visitExpressions)(node.consequent.nodes, childContext);\n\n      if (children.length === 1) {\n        return children[0];\n      }\n\n      if (children.length === 0) {\n        return _babelTypes.default.identifier('null');\n      }\n\n      return (0, _jsx.buildJSXFragment)(children);\n    });\n    const alternate = context.staticBlock(childContext => {\n      const children = (0, _visitors.visitExpressions)(node.alternate ? node.alternate.type === 'Conditional' ? [node.alternate] : node.alternate.nodes : [], childContext);\n\n      if (children.length === 1) {\n        return children[0];\n      }\n\n      if (children.length === 0) {\n        return _babelTypes.default.identifier('null');\n      }\n\n      return (0, _jsx.buildJSXFragment)(children);\n    });\n    return _babelTypes.default.conditionalExpression(test, consequent, alternate);\n  }\n\n};\nvar _default = ConditionalVisitor;\nexports.default = _default;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/visitors/Conditional.js"],"names":["Object","defineProperty","exports","value","default","_parseExpression","_interopRequireDefault","require","_jsx","_babelTypes","_visitors","obj","__esModule","ConditionalVisitor","expression","node","context","alternate","type","nodes","test","consequent","staticBlock","childContext","children","visitExpressions","length","identifier","buildJSXFragment","conditionalExpression","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,gBAAgB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,2BAAD,CAAR,CAA7C;;AAEA,IAAIC,IAAI,GAAGD,OAAO,CAAC,cAAD,CAAlB;;AAEA,IAAIE,WAAW,GAAGH,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AAEA,SAASD,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEP,IAAAA,OAAO,EAAEO;AAAX,GAArC;AAAwD,C,CAE/F;;;AACA,MAAME,kBAAkB,GAAG;AACzBC,EAAAA,UAAU,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACxB,QAAID,IAAI,CAACE,SAAL,IAAkBF,IAAI,CAACE,SAAL,CAAeC,IAAf,KAAwB,aAA9C,EAA6D;AAC3DH,MAAAA,IAAI,CAACE,SAAL,GAAiB;AACfE,QAAAA,KAAK,EAAE,CAACJ,IAAI,CAACE,SAAN;AADQ,OAAjB;AAGD;;AAED,UAAMG,IAAI,GAAG,CAAC,GAAGf,gBAAgB,CAACD,OAArB,EAA8BW,IAAI,CAACK,IAAnC,EAAyCJ,OAAzC,CAAb;AACA,UAAMK,UAAU,GAAGL,OAAO,CAACM,WAAR,CAAoBC,YAAY,IAAI;AACrD,YAAMC,QAAQ,GAAG,CAAC,GAAGd,SAAS,CAACe,gBAAd,EAAgCV,IAAI,CAACM,UAAL,CAAgBF,KAAhD,EAAuDI,YAAvD,CAAjB;;AAEA,UAAIC,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAOF,QAAQ,CAAC,CAAD,CAAf;AACD;;AAED,UAAIA,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAOjB,WAAW,CAACL,OAAZ,CAAoBuB,UAApB,CAA+B,MAA/B,CAAP;AACD;;AAED,aAAO,CAAC,GAAGnB,IAAI,CAACoB,gBAAT,EAA2BJ,QAA3B,CAAP;AACD,KAZkB,CAAnB;AAaA,UAAMP,SAAS,GAAGD,OAAO,CAACM,WAAR,CAAoBC,YAAY,IAAI;AACpD,YAAMC,QAAQ,GAAG,CAAC,GAAGd,SAAS,CAACe,gBAAd,EAAgCV,IAAI,CAACE,SAAL,GAAiBF,IAAI,CAACE,SAAL,CAAeC,IAAf,KAAwB,aAAxB,GAAwC,CAACH,IAAI,CAACE,SAAN,CAAxC,GAA2DF,IAAI,CAACE,SAAL,CAAeE,KAA3F,GAAmG,EAAnI,EAAuII,YAAvI,CAAjB;;AAEA,UAAIC,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAOF,QAAQ,CAAC,CAAD,CAAf;AACD;;AAED,UAAIA,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAOjB,WAAW,CAACL,OAAZ,CAAoBuB,UAApB,CAA+B,MAA/B,CAAP;AACD;;AAED,aAAO,CAAC,GAAGnB,IAAI,CAACoB,gBAAT,EAA2BJ,QAA3B,CAAP;AACD,KAZiB,CAAlB;AAaA,WAAOf,WAAW,CAACL,OAAZ,CAAoByB,qBAApB,CAA0CT,IAA1C,EAAgDC,UAAhD,EAA4DJ,SAA5D,CAAP;AACD;;AApCwB,CAA3B;AAuCA,IAAIa,QAAQ,GAAGjB,kBAAf;AACAX,OAAO,CAACE,OAAR,GAAkB0B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _parseExpression = _interopRequireDefault(require(\"../utils/parse-expression\"));\n\nvar _jsx = require(\"../utils/jsx\");\n\nvar _babelTypes = _interopRequireDefault(require(\"../lib/babel-types\"));\n\nvar _visitors = require(\"../visitors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// [ \"JSXExpressionContainer\", \"ConditionalExpression\", \"IfStatement\" ]\nconst ConditionalVisitor = {\n  expression(node, context) {\n    if (node.alternate && node.alternate.type === 'Conditional') {\n      node.alternate = {\n        nodes: [node.alternate]\n      };\n    }\n\n    const test = (0, _parseExpression.default)(node.test, context);\n    const consequent = context.staticBlock(childContext => {\n      const children = (0, _visitors.visitExpressions)(node.consequent.nodes, childContext);\n\n      if (children.length === 1) {\n        return children[0];\n      }\n\n      if (children.length === 0) {\n        return _babelTypes.default.identifier('null');\n      }\n\n      return (0, _jsx.buildJSXFragment)(children);\n    });\n    const alternate = context.staticBlock(childContext => {\n      const children = (0, _visitors.visitExpressions)(node.alternate ? node.alternate.type === 'Conditional' ? [node.alternate] : node.alternate.nodes : [], childContext);\n\n      if (children.length === 1) {\n        return children[0];\n      }\n\n      if (children.length === 0) {\n        return _babelTypes.default.identifier('null');\n      }\n\n      return (0, _jsx.buildJSXFragment)(children);\n    });\n    return _babelTypes.default.conditionalExpression(test, consequent, alternate);\n  }\n\n};\nvar _default = ConditionalVisitor;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}