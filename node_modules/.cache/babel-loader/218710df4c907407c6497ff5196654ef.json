{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const finance = new Finance();\n    const n = dataTable.length; // number of periods\n\n    let rate = 1; // initial guess for the rate of return\n\n    let investments = [];\n\n    for (let i = 0; i < n; i++) {\n      investments.push(dataTable[i].annPay);\n    } // calculate the net present value of the investments at the initial guess for the rate of return\n\n\n    let npv = initialValue;\n\n    for (let i = 0; i < n; i++) {\n      npv += finance.PV(rate * 100, investments[i]);\n    } // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n\n    const tolerance = 1e-6; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 1e+6; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs(npv - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate -= (targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n\n      npv = initialValue;\n\n      for (let i = 0; i < n; i++) {\n        npv += finance.PV(rate * 100, investments[i]);\n      }\n\n      console.log(npv, Math.abs(npv - targetValue), rate);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    console.log(finance.PV(-28, 1000));\n    return rate;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","seek","initialValue","dataTable","targetValue","finance","n","length","rate","investments","i","push","annPay","npv","PV","tolerance","maxIterations","iterations","Math","abs","console","log","Error"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;AACD;;AACDC,EAAAA,IAAI,CAACC,YAAD,EAAeC,SAAf,EAA0BC,WAA1B,EAAuC;AACzC,UAAMC,OAAO,GAAG,IAAIP,OAAJ,EAAhB;AACA,UAAMQ,CAAC,GAAGH,SAAS,CAACI,MAApB,CAFyC,CAEZ;;AAC7B,QAAIC,IAAI,GAAG,CAAX,CAHyC,CAG1B;;AAEf,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,WAAW,CAACE,IAAZ,CAAiBR,SAAS,CAACO,CAAD,CAAT,CAAaE,MAA9B;AACD,KARwC,CAUzC;;;AACA,QAAIC,GAAG,GAAGX,YAAV;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,MAAAA,GAAG,IAAIR,OAAO,CAACS,EAAR,CAAWN,IAAI,GAAG,GAAlB,EAAuBC,WAAW,CAACC,CAAD,CAAlC,CAAP;AACD,KAdwC,CAgBzC;;;AACA,UAAMK,SAAS,GAAG,IAAlB,CAjByC,CAiBhB;;AACzB,UAAMC,aAAa,GAAG,IAAtB,CAlByC,CAkBZ;;AAC7B,QAAIC,UAAU,GAAG,CAAjB,CAnByC,CAmBpB;;AACrB,WAAOC,IAAI,CAACC,GAAL,CAASN,GAAG,GAAGT,WAAf,IAA8BW,SAA9B,IAA2CE,UAAU,GAAGD,aAA/D,EAA8E;AAC5E;AACAR,MAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGS,GAAf,IAAsBA,GAA9B,CAF4E,CAI5E;;AACAA,MAAAA,GAAG,GAAGX,YAAN;;AACA,WAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,QAAAA,GAAG,IAAIR,OAAO,CAACS,EAAR,CAAWN,IAAI,GAAG,GAAlB,EAAuBC,WAAW,CAACC,CAAD,CAAlC,CAAP;AACD;;AACDU,MAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ,EAAiBK,IAAI,CAACC,GAAL,CAASN,GAAG,GAAGT,WAAf,CAAjB,EAA8CI,IAA9C;AACAS,MAAAA,UAAU;AACX;;AAED,QAAIA,UAAU,KAAKD,aAAnB,EAAkC;AAChC,YAAM,IAAIM,KAAJ,CAAU,mEAAV,CAAN;AACD;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAO,CAACS,EAAR,CAAW,CAAC,EAAZ,EAAgB,IAAhB,CAAZ;AACA,WAAON,IAAP;AACD;;AA3CoC;;AA8CvC,eAAeT,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const finance = new Finance();\n    const n = dataTable.length;  // number of periods\n    let rate = 1;  // initial guess for the rate of return\n\n    let investments = [];\n    for (let i = 0; i < n; i++) {\n      investments.push(dataTable[i].annPay);\n    }\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let npv = initialValue;\n    for (let i = 0; i < n; i++) {\n      npv += finance.PV(rate * 100, investments[i]);\n    }\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-6;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 1e+6;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs(npv - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate -= (targetValue - npv) / npv;\n\n      // recalculate the net present value at the new rate of return\n      npv = initialValue;\n      for (let i = 0; i < n; i++) {\n        npv += finance.PV(rate * 100, investments[i]);\n      }\n      console.log(npv, Math.abs(npv - targetValue), rate);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n    console.log(finance.PV(-28, 1000))\n    return rate;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}