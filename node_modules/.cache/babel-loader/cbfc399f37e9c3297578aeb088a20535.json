{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n\n  seek(accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length; // number of periods\n\n    let rate = .001; // initial guess for the rate of return\n    //populate accountValuesArr\n\n    let accountValuesArr = [];\n\n    for (let i = 0; i < n; i++) {\n      accountValuesArr.push(accountArr[i].balBOY);\n    } // calculate the net present value of the investments at the initial guess for the rate of return\n\n\n    let npv = accountValuesArr[0];\n\n    for (let i = 0; i < n; i++) {\n      npv += this.npv(accountValuesArr[i], rate, i);\n    } // iterate until the net present value is close enough to the target value\n\n\n    const tolerance = .01; // tolerance for the error between the net present value and the target value\n\n    npv = accountValuesArr[0]; //reset npv to initial value\n\n    while (Math.abs(npv - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(npv - targetValue);\n      rate += (targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n\n      for (let i = 0; i < n; i++) {\n        npv += this.npv(accountValuesArr[i], rate, i);\n      }\n\n      return rate;\n    }\n  }\n\n  npv(accountValue, rate, per) {\n    let npv = accountValue / Math.pow(1 + rate, per);\n    return npv;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","seek","accountArr","targetValue","finance","n","length","rate","accountValuesArr","i","push","balBOY","npv","tolerance","Math","abs","diff","accountValue","per","pow"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;AACD;;AACDC,EAAAA,IAAI,CAACC,UAAD,EAAaC,WAAb,EAA0B;AAC5B,UAAMC,OAAO,GAAG,IAAIN,OAAJ,EAAhB;AACA,UAAMO,CAAC,GAAGH,UAAU,CAACI,MAArB,CAF4B,CAEE;;AAC9B,QAAIC,IAAI,GAAG,IAAX,CAH4B,CAGV;AAClB;;AACA,QAAIC,gBAAgB,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,gBAAgB,CAACE,IAAjB,CAAsBR,UAAU,CAACO,CAAD,CAAV,CAAcE,MAApC;AACD,KAR2B,CAS5B;;;AACA,QAAIC,GAAG,GAAGJ,gBAAgB,CAAC,CAAD,CAA1B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,MAAAA,GAAG,IAAI,KAAKA,GAAL,CAASJ,gBAAgB,CAACC,CAAD,CAAzB,EAA8BF,IAA9B,EAAoCE,CAApC,CAAP;AACD,KAb2B,CAe5B;;;AACA,UAAMI,SAAS,GAAG,GAAlB,CAhB4B,CAgBJ;;AACxBD,IAAAA,GAAG,GAAGJ,gBAAgB,CAAC,CAAD,CAAtB,CAjB4B,CAiBD;;AAC3B,WAAOM,IAAI,CAACC,GAAL,CAASH,GAAG,GAAGT,WAAf,IAA8BU,SAArC,EAAgD;AAC9C;AACA,UAAIG,IAAI,GAAGF,IAAI,CAACC,GAAL,CAASH,GAAG,GAAGT,WAAf,CAAX;AACAI,MAAAA,IAAI,IAAI,CAACJ,WAAW,GAAGS,GAAf,IAAsBA,GAA9B,CAH8C,CAK9C;;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,QAAAA,GAAG,IAAI,KAAKA,GAAL,CAASJ,gBAAgB,CAACC,CAAD,CAAzB,EAA8BF,IAA9B,EAAoCE,CAApC,CAAP;AACD;;AACD,aAAOF,IAAP;AACD;AACF;;AACDK,EAAAA,GAAG,CAACK,YAAD,EAAeV,IAAf,EAAqBW,GAArB,EAA0B;AAC3B,QAAIN,GAAG,GAAGK,YAAY,GAAGH,IAAI,CAACK,GAAL,CAAS,IAAIZ,IAAb,EAAmBW,GAAnB,CAAzB;AACA,WAAON,GAAP;AACD;;AAtCoC;;AAyCvC,eAAeb,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n  seek(accountArr, targetValue) {\n    const finance = new Finance();\n    const n = accountArr.length;  // number of periods\n    let rate = .001;  // initial guess for the rate of return\n    //populate accountValuesArr\n    let accountValuesArr = [];\n    for (let i = 0; i < n; i++) {\n      accountValuesArr.push(accountArr[i].balBOY);\n    }\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let npv = accountValuesArr[0];\n    for (let i = 0; i < n; i++) {\n      npv += this.npv(accountValuesArr[i], rate, i);\n    }\n\n    // iterate until the net present value is close enough to the target value\n    const tolerance = .01;  // tolerance for the error between the net present value and the target value\n    npv = accountValuesArr[0]; //reset npv to initial value\n    while (Math.abs(npv - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      var diff = Math.abs(npv - targetValue);\n      rate += (targetValue - npv) / npv;\n\n      // recalculate the net present value at the new rate of return\n      for (let i = 0; i < n; i++) {\n        npv += this.npv(accountValuesArr[i], rate, i);\n      }\n      return rate;\n    }\n  }\n  npv(accountValue, rate, per) {\n    let npv = accountValue / Math.pow(1 + rate, per);\n    return npv;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}