{"ast":null,"code":"// workaround for tty output truncation upon process.exit()\n[process.stdout, process.stderr].forEach(function (stream) {\n  if (stream._handle && stream._handle.setBlocking) stream._handle.setBlocking(true);\n});\n\nvar path = require(\"path\");\n\nvar fs = require(\"fs\");\n\nvar UglifyJS = exports;\nvar FILES = UglifyJS.FILES = [\"../lib/utils.js\", \"../lib/ast.js\", \"../lib/parse.js\", \"../lib/transform.js\", \"../lib/scope.js\", \"../lib/output.js\", \"../lib/compress.js\", \"../lib/sourcemap.js\", \"../lib/mozilla-ast.js\", \"../lib/propmangle.js\", \"./exports.js\"].map(function (file) {\n  return require.resolve(file);\n});\nnew Function(\"MOZ_SourceMap\", \"exports\", FILES.map(function (file) {\n  return fs.readFileSync(file, \"utf8\");\n}).join(\"\\n\\n\"))(require(\"source-map\"), UglifyJS);\n\nUglifyJS.AST_Node.warn_function = function (txt) {\n  console.error(\"WARN: %s\", txt);\n};\n\nfunction read_source_map(code) {\n  var match = /\\n\\/\\/# sourceMappingURL=data:application\\/json(;.*?)?;base64,(.*)/.exec(code);\n\n  if (!match) {\n    UglifyJS.AST_Node.warn(\"inline source map not found\");\n    return null;\n  }\n\n  return JSON.parse(new Buffer(match[2], \"base64\"));\n}\n\nUglifyJS.minify = function (files, options) {\n  options = UglifyJS.defaults(options, {\n    compress: {},\n    fromString: false,\n    inSourceMap: null,\n    mangle: {},\n    mangleProperties: false,\n    nameCache: null,\n    outFileName: null,\n    output: null,\n    outSourceMap: null,\n    parse: {},\n    sourceMapInline: false,\n    sourceMapUrl: null,\n    sourceRoot: null,\n    spidermonkey: false,\n    warnings: false\n  });\n  UglifyJS.base54.reset();\n  var inMap = options.inSourceMap;\n\n  if (typeof inMap == \"string\" && inMap != \"inline\") {\n    inMap = JSON.parse(fs.readFileSync(inMap, \"utf8\"));\n  } // 1. parse\n\n\n  var toplevel = null,\n      sourcesContent = {};\n\n  if (options.spidermonkey) {\n    if (inMap == \"inline\") {\n      throw new Error(\"inline source map only works with built-in parser\");\n    }\n\n    toplevel = UglifyJS.AST_Node.from_mozilla_ast(files);\n  } else {\n    function addFile(file, fileUrl) {\n      var code = options.fromString ? file : fs.readFileSync(file, \"utf8\");\n\n      if (inMap == \"inline\") {\n        inMap = read_source_map(code);\n      }\n\n      sourcesContent[fileUrl] = code;\n      toplevel = UglifyJS.parse(code, {\n        filename: fileUrl,\n        toplevel: toplevel,\n        bare_returns: options.parse ? options.parse.bare_returns : undefined\n      });\n    }\n\n    if (!options.fromString) {\n      files = UglifyJS.simple_glob(files);\n\n      if (inMap == \"inline\" && files.length > 1) {\n        throw new Error(\"inline source map only works with singular input\");\n      }\n    }\n\n    [].concat(files).forEach(function (files, i) {\n      if (typeof files === 'string') {\n        addFile(files, options.fromString ? i : files);\n      } else {\n        for (var fileUrl in files) {\n          addFile(files[fileUrl], fileUrl);\n        }\n      }\n    });\n  }\n\n  if (options.wrap) {\n    toplevel = toplevel.wrap_commonjs(options.wrap, options.exportAll);\n  } // 2. compress\n\n\n  if (options.compress) {\n    var compress = {\n      warnings: options.warnings\n    };\n    UglifyJS.merge(compress, options.compress);\n    toplevel.figure_out_scope(options.mangle);\n    var sq = UglifyJS.Compressor(compress);\n    toplevel = sq.compress(toplevel);\n  } // 3. mangle properties\n\n\n  if (options.mangleProperties || options.nameCache) {\n    options.mangleProperties.cache = UglifyJS.readNameCache(options.nameCache, \"props\");\n    toplevel = UglifyJS.mangle_properties(toplevel, options.mangleProperties);\n    UglifyJS.writeNameCache(options.nameCache, \"props\", options.mangleProperties.cache);\n  } // 4. mangle\n\n\n  if (options.mangle) {\n    toplevel.figure_out_scope(options.mangle);\n    toplevel.compute_char_frequency(options.mangle);\n    toplevel.mangle_names(options.mangle);\n  } // 5. output\n\n\n  var output = {\n    max_line_len: 32000\n  };\n\n  if (options.outSourceMap || options.sourceMapInline) {\n    output.source_map = UglifyJS.SourceMap({\n      // prefer outFileName, otherwise use outSourceMap without .map suffix\n      file: options.outFileName || (typeof options.outSourceMap === 'string' ? options.outSourceMap.replace(/\\.map$/i, '') : null),\n      orig: inMap,\n      root: options.sourceRoot\n    });\n\n    if (options.sourceMapIncludeSources) {\n      for (var file in sourcesContent) {\n        if (sourcesContent.hasOwnProperty(file)) {\n          output.source_map.get().setSourceContent(file, sourcesContent[file]);\n        }\n      }\n    }\n  }\n\n  if (options.output) {\n    UglifyJS.merge(output, options.output);\n  }\n\n  var stream = UglifyJS.OutputStream(output);\n  toplevel.print(stream);\n  var source_map = output.source_map;\n\n  if (source_map) {\n    source_map = source_map + \"\";\n  }\n\n  var mappingUrlPrefix = \"\\n//# sourceMappingURL=\";\n\n  if (options.sourceMapInline) {\n    stream += mappingUrlPrefix + \"data:application/json;charset=utf-8;base64,\" + new Buffer(source_map).toString(\"base64\");\n  } else if (options.outSourceMap && typeof options.outSourceMap === \"string\" && options.sourceMapUrl !== false) {\n    stream += mappingUrlPrefix + (typeof options.sourceMapUrl === \"string\" ? options.sourceMapUrl : options.outSourceMap);\n  }\n\n  return {\n    code: stream + \"\",\n    map: source_map\n  };\n}; // UglifyJS.describe_ast = function() {\n//     function doitem(ctor) {\n//         var sub = {};\n//         ctor.SUBCLASSES.forEach(function(ctor){\n//             sub[ctor.TYPE] = doitem(ctor);\n//         });\n//         var ret = {};\n//         if (ctor.SELF_PROPS.length > 0) ret.props = ctor.SELF_PROPS;\n//         if (ctor.SUBCLASSES.length > 0) ret.sub = sub;\n//         return ret;\n//     }\n//     return doitem(UglifyJS.AST_Node).sub;\n// }\n\n\nUglifyJS.describe_ast = function () {\n  var out = UglifyJS.OutputStream({\n    beautify: true\n  });\n\n  function doitem(ctor) {\n    out.print(\"AST_\" + ctor.TYPE);\n    var props = ctor.SELF_PROPS.filter(function (prop) {\n      return !/^\\$/.test(prop);\n    });\n\n    if (props.length > 0) {\n      out.space();\n      out.with_parens(function () {\n        props.forEach(function (prop, i) {\n          if (i) out.space();\n          out.print(prop);\n        });\n      });\n    }\n\n    if (ctor.documentation) {\n      out.space();\n      out.print_string(ctor.documentation);\n    }\n\n    if (ctor.SUBCLASSES.length > 0) {\n      out.space();\n      out.with_block(function () {\n        ctor.SUBCLASSES.forEach(function (ctor, i) {\n          out.indent();\n          doitem(ctor);\n          out.newline();\n        });\n      });\n    }\n  }\n\n  ;\n  doitem(UglifyJS.AST_Node);\n  return out + \"\";\n};\n\nfunction readReservedFile(filename, reserved) {\n  if (!reserved) {\n    reserved = {\n      vars: [],\n      props: []\n    };\n  }\n\n  var data = fs.readFileSync(filename, \"utf8\");\n  data = JSON.parse(data);\n\n  if (data.vars) {\n    data.vars.forEach(function (name) {\n      UglifyJS.push_uniq(reserved.vars, name);\n    });\n  }\n\n  if (data.props) {\n    data.props.forEach(function (name) {\n      UglifyJS.push_uniq(reserved.props, name);\n    });\n  }\n\n  return reserved;\n}\n\nUglifyJS.readReservedFile = readReservedFile;\n\nUglifyJS.readDefaultReservedFile = function (reserved) {\n  return readReservedFile(require.resolve(\"./domprops.json\"), reserved);\n};\n\nUglifyJS.readNameCache = function (filename, key) {\n  var cache = null;\n\n  if (filename) {\n    try {\n      var cache = fs.readFileSync(filename, \"utf8\");\n      cache = JSON.parse(cache)[key];\n      if (!cache) throw \"init\";\n      cache.props = UglifyJS.Dictionary.fromObject(cache.props);\n    } catch (ex) {\n      cache = {\n        cname: -1,\n        props: new UglifyJS.Dictionary()\n      };\n    }\n  }\n\n  return cache;\n};\n\nUglifyJS.writeNameCache = function (filename, key, cache) {\n  if (filename) {\n    var data;\n\n    try {\n      data = fs.readFileSync(filename, \"utf8\");\n      data = JSON.parse(data);\n    } catch (ex) {\n      data = {};\n    }\n\n    data[key] = {\n      cname: cache.cname,\n      props: cache.props.toObject()\n    };\n    fs.writeFileSync(filename, JSON.stringify(data, null, 2), \"utf8\");\n  }\n}; // A file glob function that only supports \"*\" and \"?\" wildcards in the basename.\n// Example: \"foo/bar/*baz??.*.js\"\n// Argument `glob` may be a string or an array of strings.\n// Returns an array of strings. Garbage in, garbage out.\n\n\nUglifyJS.simple_glob = function simple_glob(glob) {\n  if (Array.isArray(glob)) {\n    return [].concat.apply([], glob.map(simple_glob));\n  }\n\n  if (glob.match(/\\*|\\?/)) {\n    var dir = path.dirname(glob);\n\n    try {\n      var entries = fs.readdirSync(dir);\n    } catch (ex) {}\n\n    if (entries) {\n      var pattern = \"^\" + path.basename(glob).replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\").replace(/\\*/g, \"[^/\\\\\\\\]*\").replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n      var mod = process.platform === \"win32\" ? \"i\" : \"\";\n      var rx = new RegExp(pattern, mod);\n      var results = entries.filter(function (name) {\n        return rx.test(name);\n      }).map(function (name) {\n        return path.join(dir, name);\n      });\n      if (results.length) return results;\n    }\n  }\n\n  return [glob];\n};","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/uglify-js/tools/node.js"],"names":["process","stdout","stderr","forEach","stream","_handle","setBlocking","path","require","fs","UglifyJS","exports","FILES","map","file","resolve","Function","readFileSync","join","AST_Node","warn_function","txt","console","error","read_source_map","code","match","exec","warn","JSON","parse","Buffer","minify","files","options","defaults","compress","fromString","inSourceMap","mangle","mangleProperties","nameCache","outFileName","output","outSourceMap","sourceMapInline","sourceMapUrl","sourceRoot","spidermonkey","warnings","base54","reset","inMap","toplevel","sourcesContent","Error","from_mozilla_ast","addFile","fileUrl","filename","bare_returns","undefined","simple_glob","length","concat","i","wrap","wrap_commonjs","exportAll","merge","figure_out_scope","sq","Compressor","cache","readNameCache","mangle_properties","writeNameCache","compute_char_frequency","mangle_names","max_line_len","source_map","SourceMap","replace","orig","root","sourceMapIncludeSources","hasOwnProperty","get","setSourceContent","OutputStream","print","mappingUrlPrefix","toString","describe_ast","out","beautify","doitem","ctor","TYPE","props","SELF_PROPS","filter","prop","test","space","with_parens","documentation","print_string","SUBCLASSES","with_block","indent","newline","readReservedFile","reserved","vars","data","name","push_uniq","readDefaultReservedFile","key","Dictionary","fromObject","ex","cname","toObject","writeFileSync","stringify","glob","Array","isArray","apply","dir","dirname","entries","readdirSync","pattern","basename","mod","platform","rx","RegExp","results"],"mappings":"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","sourcesContent":["// workaround for tty output truncation upon process.exit()\n[process.stdout, process.stderr].forEach(function(stream){\n    if (stream._handle && stream._handle.setBlocking)\n        stream._handle.setBlocking(true);\n});\n\nvar path = require(\"path\");\nvar fs = require(\"fs\");\n\nvar UglifyJS = exports;\nvar FILES = UglifyJS.FILES = [\n    \"../lib/utils.js\",\n    \"../lib/ast.js\",\n    \"../lib/parse.js\",\n    \"../lib/transform.js\",\n    \"../lib/scope.js\",\n    \"../lib/output.js\",\n    \"../lib/compress.js\",\n    \"../lib/sourcemap.js\",\n    \"../lib/mozilla-ast.js\",\n    \"../lib/propmangle.js\",\n    \"./exports.js\",\n].map(function(file){\n    return require.resolve(file);\n});\n\nnew Function(\"MOZ_SourceMap\", \"exports\", FILES.map(function(file){\n    return fs.readFileSync(file, \"utf8\");\n}).join(\"\\n\\n\"))(\n    require(\"source-map\"),\n    UglifyJS\n);\n\nUglifyJS.AST_Node.warn_function = function(txt) {\n    console.error(\"WARN: %s\", txt);\n};\n\nfunction read_source_map(code) {\n    var match = /\\n\\/\\/# sourceMappingURL=data:application\\/json(;.*?)?;base64,(.*)/.exec(code);\n    if (!match) {\n        UglifyJS.AST_Node.warn(\"inline source map not found\");\n        return null;\n    }\n    return JSON.parse(new Buffer(match[2], \"base64\"));\n}\n\nUglifyJS.minify = function(files, options) {\n    options = UglifyJS.defaults(options, {\n        compress         : {},\n        fromString       : false,\n        inSourceMap      : null,\n        mangle           : {},\n        mangleProperties : false,\n        nameCache        : null,\n        outFileName      : null,\n        output           : null,\n        outSourceMap     : null,\n        parse            : {},\n        sourceMapInline  : false,\n        sourceMapUrl     : null,\n        sourceRoot       : null,\n        spidermonkey     : false,\n        warnings         : false,\n    });\n    UglifyJS.base54.reset();\n\n    var inMap = options.inSourceMap;\n    if (typeof inMap == \"string\" && inMap != \"inline\") {\n        inMap = JSON.parse(fs.readFileSync(inMap, \"utf8\"));\n    }\n\n    // 1. parse\n    var toplevel = null,\n        sourcesContent = {};\n\n    if (options.spidermonkey) {\n        if (inMap == \"inline\") {\n            throw new Error(\"inline source map only works with built-in parser\");\n        }\n        toplevel = UglifyJS.AST_Node.from_mozilla_ast(files);\n    } else {\n        function addFile(file, fileUrl) {\n            var code = options.fromString\n                ? file\n                : fs.readFileSync(file, \"utf8\");\n            if (inMap == \"inline\") {\n                inMap = read_source_map(code);\n            }\n            sourcesContent[fileUrl] = code;\n            toplevel = UglifyJS.parse(code, {\n                filename: fileUrl,\n                toplevel: toplevel,\n                bare_returns: options.parse ? options.parse.bare_returns : undefined\n            });\n        }\n        if (!options.fromString) {\n            files = UglifyJS.simple_glob(files);\n            if (inMap == \"inline\" && files.length > 1) {\n                throw new Error(\"inline source map only works with singular input\");\n            }\n        }\n        [].concat(files).forEach(function (files, i) {\n            if (typeof files === 'string') {\n                addFile(files, options.fromString ? i : files);\n            } else {\n                for (var fileUrl in files) {\n                    addFile(files[fileUrl], fileUrl);\n                }\n            }\n        });\n    }\n    if (options.wrap) {\n      toplevel = toplevel.wrap_commonjs(options.wrap, options.exportAll);\n    }\n\n    // 2. compress\n    if (options.compress) {\n        var compress = { warnings: options.warnings };\n        UglifyJS.merge(compress, options.compress);\n        toplevel.figure_out_scope(options.mangle);\n        var sq = UglifyJS.Compressor(compress);\n        toplevel = sq.compress(toplevel);\n    }\n\n    // 3. mangle properties\n    if (options.mangleProperties || options.nameCache) {\n        options.mangleProperties.cache = UglifyJS.readNameCache(options.nameCache, \"props\");\n        toplevel = UglifyJS.mangle_properties(toplevel, options.mangleProperties);\n        UglifyJS.writeNameCache(options.nameCache, \"props\", options.mangleProperties.cache);\n    }\n\n    // 4. mangle\n    if (options.mangle) {\n        toplevel.figure_out_scope(options.mangle);\n        toplevel.compute_char_frequency(options.mangle);\n        toplevel.mangle_names(options.mangle);\n    }\n\n    // 5. output\n    var output = { max_line_len: 32000 };\n    if (options.outSourceMap || options.sourceMapInline) {\n        output.source_map = UglifyJS.SourceMap({\n            // prefer outFileName, otherwise use outSourceMap without .map suffix\n            file: options.outFileName || (typeof options.outSourceMap === 'string' ? options.outSourceMap.replace(/\\.map$/i, '') : null),\n            orig: inMap,\n            root: options.sourceRoot\n        });\n        if (options.sourceMapIncludeSources) {\n            for (var file in sourcesContent) {\n                if (sourcesContent.hasOwnProperty(file)) {\n                    output.source_map.get().setSourceContent(file, sourcesContent[file]);\n                }\n            }\n        }\n\n    }\n    if (options.output) {\n        UglifyJS.merge(output, options.output);\n    }\n    var stream = UglifyJS.OutputStream(output);\n    toplevel.print(stream);\n\n\n    var source_map = output.source_map;\n    if (source_map) {\n        source_map = source_map + \"\";\n    }\n\n    var mappingUrlPrefix = \"\\n//# sourceMappingURL=\";\n    if (options.sourceMapInline) {\n        stream += mappingUrlPrefix + \"data:application/json;charset=utf-8;base64,\" + new Buffer(source_map).toString(\"base64\");\n    } else if (options.outSourceMap && typeof options.outSourceMap === \"string\" && options.sourceMapUrl !== false) {\n        stream += mappingUrlPrefix + (typeof options.sourceMapUrl === \"string\" ? options.sourceMapUrl : options.outSourceMap);\n    }\n\n    return {\n        code : stream + \"\",\n        map  : source_map\n    };\n};\n\n// UglifyJS.describe_ast = function() {\n//     function doitem(ctor) {\n//         var sub = {};\n//         ctor.SUBCLASSES.forEach(function(ctor){\n//             sub[ctor.TYPE] = doitem(ctor);\n//         });\n//         var ret = {};\n//         if (ctor.SELF_PROPS.length > 0) ret.props = ctor.SELF_PROPS;\n//         if (ctor.SUBCLASSES.length > 0) ret.sub = sub;\n//         return ret;\n//     }\n//     return doitem(UglifyJS.AST_Node).sub;\n// }\n\nUglifyJS.describe_ast = function() {\n    var out = UglifyJS.OutputStream({ beautify: true });\n    function doitem(ctor) {\n        out.print(\"AST_\" + ctor.TYPE);\n        var props = ctor.SELF_PROPS.filter(function(prop){\n            return !/^\\$/.test(prop);\n        });\n        if (props.length > 0) {\n            out.space();\n            out.with_parens(function(){\n                props.forEach(function(prop, i){\n                    if (i) out.space();\n                    out.print(prop);\n                });\n            });\n        }\n        if (ctor.documentation) {\n            out.space();\n            out.print_string(ctor.documentation);\n        }\n        if (ctor.SUBCLASSES.length > 0) {\n            out.space();\n            out.with_block(function(){\n                ctor.SUBCLASSES.forEach(function(ctor, i){\n                    out.indent();\n                    doitem(ctor);\n                    out.newline();\n                });\n            });\n        }\n    };\n    doitem(UglifyJS.AST_Node);\n    return out + \"\";\n};\n\nfunction readReservedFile(filename, reserved) {\n    if (!reserved) {\n        reserved = { vars: [], props: [] };\n    }\n    var data = fs.readFileSync(filename, \"utf8\");\n    data = JSON.parse(data);\n    if (data.vars) {\n        data.vars.forEach(function(name){\n            UglifyJS.push_uniq(reserved.vars, name);\n        });\n    }\n    if (data.props) {\n        data.props.forEach(function(name){\n            UglifyJS.push_uniq(reserved.props, name);\n        });\n    }\n    return reserved;\n}\n\nUglifyJS.readReservedFile = readReservedFile;\n\nUglifyJS.readDefaultReservedFile = function(reserved) {\n    return readReservedFile(require.resolve(\"./domprops.json\"), reserved);\n};\n\nUglifyJS.readNameCache = function(filename, key) {\n    var cache = null;\n    if (filename) {\n        try {\n            var cache = fs.readFileSync(filename, \"utf8\");\n            cache = JSON.parse(cache)[key];\n            if (!cache) throw \"init\";\n            cache.props = UglifyJS.Dictionary.fromObject(cache.props);\n        } catch(ex) {\n            cache = {\n                cname: -1,\n                props: new UglifyJS.Dictionary()\n            };\n        }\n    }\n    return cache;\n};\n\nUglifyJS.writeNameCache = function(filename, key, cache) {\n    if (filename) {\n        var data;\n        try {\n            data = fs.readFileSync(filename, \"utf8\");\n            data = JSON.parse(data);\n        } catch(ex) {\n            data = {};\n        }\n        data[key] = {\n            cname: cache.cname,\n            props: cache.props.toObject()\n        };\n        fs.writeFileSync(filename, JSON.stringify(data, null, 2), \"utf8\");\n    }\n};\n\n// A file glob function that only supports \"*\" and \"?\" wildcards in the basename.\n// Example: \"foo/bar/*baz??.*.js\"\n// Argument `glob` may be a string or an array of strings.\n// Returns an array of strings. Garbage in, garbage out.\nUglifyJS.simple_glob = function simple_glob(glob) {\n    if (Array.isArray(glob)) {\n        return [].concat.apply([], glob.map(simple_glob));\n    }\n    if (glob.match(/\\*|\\?/)) {\n        var dir = path.dirname(glob);\n        try {\n            var entries = fs.readdirSync(dir);\n        } catch (ex) {}\n        if (entries) {\n            var pattern = \"^\" + path.basename(glob)\n                .replace(/[.+^$[\\]\\\\(){}]/g, \"\\\\$&\")\n                .replace(/\\*/g, \"[^/\\\\\\\\]*\")\n                .replace(/\\?/g, \"[^/\\\\\\\\]\") + \"$\";\n            var mod = process.platform === \"win32\" ? \"i\" : \"\";\n            var rx = new RegExp(pattern, mod);\n            var results = entries.filter(function(name) {\n                return rx.test(name);\n            }).map(function(name) {\n                return path.join(dir, name);\n            });\n            if (results.length) return results;\n        }\n    }\n    return [ glob ];\n};\n"]},"metadata":{},"sourceType":"script"}