{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _fs = require(\"fs\");\n\nvar _pugError = _interopRequireDefault(require(\"pug-error\"));\n\nvar _babelTypes = require(\"./lib/babel-types\");\n\nvar _blockKey = require(\"./block-key\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass Context {\n  constructor(params) {\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"file\", void 0);\n\n    _defineProperty(this, \"path\", void 0);\n\n    _defineProperty(this, \"_variables\", new Map());\n\n    _defineProperty(this, \"variablesToDeclare\", []);\n\n    _defineProperty(this, \"_nextBlockID\", 0);\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_interpolations\", void 0);\n\n    _defineProperty(this, \"_options\", void 0);\n\n    if (!params.definesScope && params.parent) {\n      this.variablesToDeclare = params.parent.variablesToDeclare;\n    }\n\n    this._parent = params.parent;\n    this.key = params.key;\n    this.file = params.file;\n    this.path = params.path;\n    this._interpolations = params.interpolations;\n    this._options = params.options;\n  }\n\n  error(code, message) {\n    const options = {\n      filename: this.file.opts.filename,\n      line: (0, _babelTypes.getCurrentLocation)().start.line - 1,\n      src: null\n    };\n\n    if ((0, _fs.existsSync)(options.filename)) {\n      options.src = (0, _fs.readFileSync)(this.file.opts.filename, 'utf8');\n    }\n\n    return (0, _pugError.default)(code, message, options);\n  }\n\n  noKey(fn) {\n    const childContext = new Context({\n      definesScope: false,\n      key: new _blockKey.BaseKey(),\n      parent: this,\n      file: this.file,\n      path: this.path,\n      options: this._options\n    });\n    const result = fn(childContext);\n    childContext.end();\n    return result;\n  }\n\n  staticBlock(fn) {\n    const childContext = new Context({\n      definesScope: false,\n      key: new _blockKey.StaticBlock(this.key, this._nextBlockID++),\n      parent: this,\n      file: this.file,\n      path: this.path,\n      options: this._options\n    });\n    const result = fn(childContext);\n    childContext.end();\n    return result;\n  }\n\n  dynamicBlock(fn) {\n    const childContext = new Context({\n      definesScope: true,\n      key: new _blockKey.DynamicBlock(this.key, 'src', 0),\n      parent: this,\n      file: this.file,\n      path: this.path,\n      options: this._options\n    });\n    const result = fn(childContext);\n    childContext.end();\n    return {\n      result,\n      variables: childContext.variablesToDeclare\n    };\n  }\n\n  end() {\n    this.key.end();\n  }\n\n  getVariable(name) {\n    const variable = this._variables.get(name);\n\n    if (variable) {\n      return variable;\n    }\n\n    if (this._parent) {\n      return this._parent.getVariable(name);\n    } // TODO: maybe actually verify existance/non-const in parent scope?\n\n\n    return null;\n  }\n\n  declareVariable(kind, name) {\n    if (typeof name !== 'string') {\n      throw new Error('variables may only be declared with strings');\n    }\n\n    const oldVariable = this._variables.get(name);\n\n    if (oldVariable) {\n      if (oldVariable.kind !== 'var' || kind !== 'var') {\n        const err = this.error('DUPLICATE_VARIABLE', `Duplicate variable ${name}.`);\n        throw err;\n      }\n\n      return oldVariable;\n    }\n\n    const variable = {\n      kind,\n      id: this.generateUidIdentifier(name)\n    };\n    this.variablesToDeclare.push(variable.id);\n\n    this._variables.set(name, variable);\n\n    return variable;\n  }\n\n  generateUidIdentifier(name) {\n    return this.path.scope.generateUidIdentifier(name);\n  }\n\n  getBaseLine() {\n    return this.path.node.loc.start.line;\n  }\n  /**\n   * Check whether interpolations exist for the context, if not,\n   * recursively check the parent context for the interpolation.\n   * @param { String } reference - The interpolation reference\n   * @returns { ?Expression } The interpolation or nothing.\n   */\n\n\n  getInterpolationByRef(reference) {\n    let interpolation = null;\n\n    if (this._interpolations && (interpolation = this._interpolations.get(reference))) {\n      return interpolation;\n    } else if (this._parent) {\n      return this._parent.getInterpolationByRef(reference);\n    }\n\n    return this.getInterpolationByRef(reference);\n  }\n\n  static create(file, path, interpolations, params) {\n    return new Context({\n      definesScope: true,\n      key: new _blockKey.BaseKey(),\n      parent: null,\n      file,\n      path,\n      options: params.options,\n      interpolations\n    });\n  }\n\n}\n\nvar _default = Context;\nexports.default = _default;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/node_modules/babel-plugin-transform-react-pug/dist/context.js"],"names":["Object","defineProperty","exports","value","default","_fs","require","_pugError","_interopRequireDefault","_babelTypes","_blockKey","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","Context","constructor","params","Map","definesScope","parent","variablesToDeclare","_parent","file","path","_interpolations","interpolations","_options","options","error","code","message","filename","opts","line","getCurrentLocation","start","src","existsSync","readFileSync","noKey","fn","childContext","BaseKey","result","end","staticBlock","StaticBlock","_nextBlockID","dynamicBlock","DynamicBlock","variables","getVariable","name","variable","_variables","get","declareVariable","kind","Error","oldVariable","err","id","generateUidIdentifier","push","set","scope","getBaseLine","node","loc","getInterpolationByRef","reference","interpolation","create","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _fs = require(\"fs\");\n\nvar _pugError = _interopRequireDefault(require(\"pug-error\"));\n\nvar _babelTypes = require(\"./lib/babel-types\");\n\nvar _blockKey = require(\"./block-key\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass Context {\n  constructor(params) {\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"file\", void 0);\n\n    _defineProperty(this, \"path\", void 0);\n\n    _defineProperty(this, \"_variables\", new Map());\n\n    _defineProperty(this, \"variablesToDeclare\", []);\n\n    _defineProperty(this, \"_nextBlockID\", 0);\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_interpolations\", void 0);\n\n    _defineProperty(this, \"_options\", void 0);\n\n    if (!params.definesScope && params.parent) {\n      this.variablesToDeclare = params.parent.variablesToDeclare;\n    }\n\n    this._parent = params.parent;\n    this.key = params.key;\n    this.file = params.file;\n    this.path = params.path;\n    this._interpolations = params.interpolations;\n    this._options = params.options;\n  }\n\n  error(code, message) {\n    const options = {\n      filename: this.file.opts.filename,\n      line: (0, _babelTypes.getCurrentLocation)().start.line - 1,\n      src: null\n    };\n\n    if ((0, _fs.existsSync)(options.filename)) {\n      options.src = (0, _fs.readFileSync)(this.file.opts.filename, 'utf8');\n    }\n\n    return (0, _pugError.default)(code, message, options);\n  }\n\n  noKey(fn) {\n    const childContext = new Context({\n      definesScope: false,\n      key: new _blockKey.BaseKey(),\n      parent: this,\n      file: this.file,\n      path: this.path,\n      options: this._options\n    });\n    const result = fn(childContext);\n    childContext.end();\n    return result;\n  }\n\n  staticBlock(fn) {\n    const childContext = new Context({\n      definesScope: false,\n      key: new _blockKey.StaticBlock(this.key, this._nextBlockID++),\n      parent: this,\n      file: this.file,\n      path: this.path,\n      options: this._options\n    });\n    const result = fn(childContext);\n    childContext.end();\n    return result;\n  }\n\n  dynamicBlock(fn) {\n    const childContext = new Context({\n      definesScope: true,\n      key: new _blockKey.DynamicBlock(this.key, 'src', 0),\n      parent: this,\n      file: this.file,\n      path: this.path,\n      options: this._options\n    });\n    const result = fn(childContext);\n    childContext.end();\n    return {\n      result,\n      variables: childContext.variablesToDeclare\n    };\n  }\n\n  end() {\n    this.key.end();\n  }\n\n  getVariable(name) {\n    const variable = this._variables.get(name);\n\n    if (variable) {\n      return variable;\n    }\n\n    if (this._parent) {\n      return this._parent.getVariable(name);\n    } // TODO: maybe actually verify existance/non-const in parent scope?\n\n\n    return null;\n  }\n\n  declareVariable(kind, name) {\n    if (typeof name !== 'string') {\n      throw new Error('variables may only be declared with strings');\n    }\n\n    const oldVariable = this._variables.get(name);\n\n    if (oldVariable) {\n      if (oldVariable.kind !== 'var' || kind !== 'var') {\n        const err = this.error('DUPLICATE_VARIABLE', `Duplicate variable ${name}.`);\n        throw err;\n      }\n\n      return oldVariable;\n    }\n\n    const variable = {\n      kind,\n      id: this.generateUidIdentifier(name)\n    };\n    this.variablesToDeclare.push(variable.id);\n\n    this._variables.set(name, variable);\n\n    return variable;\n  }\n\n  generateUidIdentifier(name) {\n    return this.path.scope.generateUidIdentifier(name);\n  }\n\n  getBaseLine() {\n    return this.path.node.loc.start.line;\n  }\n  /**\n   * Check whether interpolations exist for the context, if not,\n   * recursively check the parent context for the interpolation.\n   * @param { String } reference - The interpolation reference\n   * @returns { ?Expression } The interpolation or nothing.\n   */\n\n\n  getInterpolationByRef(reference) {\n    let interpolation = null;\n\n    if (this._interpolations && (interpolation = this._interpolations.get(reference))) {\n      return interpolation;\n    } else if (this._parent) {\n      return this._parent.getInterpolationByRef(reference);\n    }\n\n    return this.getInterpolationByRef(reference);\n  }\n\n  static create(file, path, interpolations, params) {\n    return new Context({\n      definesScope: true,\n      key: new _blockKey.BaseKey(),\n      parent: null,\n      file,\n      path,\n      options: params.options,\n      interpolations\n    });\n  }\n\n}\n\nvar _default = Context;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}