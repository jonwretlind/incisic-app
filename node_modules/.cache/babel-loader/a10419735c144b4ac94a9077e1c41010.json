{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length; // number of periods\n\n    let rate = 0.1; // initial guess for the rate of return\n\n    let investments = [];\n\n    for (let i = 0; i < n; i++) {\n      investments.push(dataTable[i].annPay);\n    } // calculate the net present value of the investments at the initial guess for the rate of return\n\n\n    let npv = initialValue;\n\n    for (let i = 0; i < n; i++) {\n      npv += investments[i] / Math.pow(1 + rate, i + 1);\n    } // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n\n    const tolerance = 1e-6; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 100; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs(npv - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate += (targetValue - npv) / npv; // recalculate the net present value at the new rate of return\n\n      npv = initialValue;\n\n      for (let i = 0; i < n; i++) {\n        npv += investments[i] / Math.pow(1 + rate, i + 1);\n      }\n\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    return rate;\n  }\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","seek","initialValue","dataTable","targetValue","n","length","rate","investments","i","push","annPay","npv","Math","pow","tolerance","maxIterations","iterations","abs","Error"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;AACD;;AACDC,EAAAA,IAAI,CAACC,YAAD,EAAeC,SAAf,EAA0BC,WAA1B,EAAuC;AACzC,UAAMC,CAAC,GAAGF,SAAS,CAACG,MAApB,CADyC,CACZ;;AAC7B,QAAIC,IAAI,GAAG,GAAX,CAFyC,CAExB;;AAEjB,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,WAAW,CAACE,IAAZ,CAAiBP,SAAS,CAACM,CAAD,CAAT,CAAaE,MAA9B;AACD,KAPwC,CASzC;;;AACA,QAAIC,GAAG,GAAGV,YAAV;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,MAAAA,GAAG,IAAIJ,WAAW,CAACC,CAAD,CAAX,GAAiBI,IAAI,CAACC,GAAL,CAAS,IAAIP,IAAb,EAAmBE,CAAC,GAAG,CAAvB,CAAxB;AACD,KAbwC,CAezC;;;AACA,UAAMM,SAAS,GAAG,IAAlB,CAhByC,CAgBhB;;AACzB,UAAMC,aAAa,GAAG,GAAtB,CAjByC,CAiBb;;AAC5B,QAAIC,UAAU,GAAG,CAAjB,CAlByC,CAkBpB;;AACrB,WAAOJ,IAAI,CAACK,GAAL,CAASN,GAAG,GAAGR,WAAf,IAA8BW,SAA9B,IAA2CE,UAAU,GAAGD,aAA/D,EAA8E;AAC5E;AACAT,MAAAA,IAAI,IAAI,CAACH,WAAW,GAAGQ,GAAf,IAAsBA,GAA9B,CAF4E,CAI5E;;AACAA,MAAAA,GAAG,GAAGV,YAAN;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1BG,QAAAA,GAAG,IAAIJ,WAAW,CAACC,CAAD,CAAX,GAAiBI,IAAI,CAACC,GAAL,CAAS,IAAIP,IAAb,EAAmBE,CAAC,GAAG,CAAvB,CAAxB;AACD;;AAEDQ,MAAAA,UAAU;AACX;;AAED,QAAIA,UAAU,KAAKD,aAAnB,EAAkC;AAChC,YAAM,IAAIG,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAED,WAAOZ,IAAP;AACD;;AA1CoC;;AA6CvC,eAAeR,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length;  // number of periods\n    let rate = 0.1;  // initial guess for the rate of return\n\n    let investments = [];\n    for (let i = 0; i < n; i++) {\n      investments.push(dataTable[i].annPay);\n    }\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let npv = initialValue;\n    for (let i = 0; i < n; i++) {\n      npv += investments[i] / Math.pow(1 + rate, i + 1);\n    }\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-6;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 100;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs(npv - targetValue) > tolerance && iterations < maxIterations) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate += (targetValue - npv) / npv;\n\n      // recalculate the net present value at the new rate of return\n      npv = initialValue;\n      for (let i = 0; i < n; i++) {\n        npv += investments[i] / Math.pow(1 + rate, i + 1);\n      }\n\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    return rate;\n  }\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}