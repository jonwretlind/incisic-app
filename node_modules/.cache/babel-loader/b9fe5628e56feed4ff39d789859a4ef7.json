{"ast":null,"code":"import React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n\n    this.guess = function (hi, lo) {\n      var guess = Math.random() * (hi - lo) + lo;\n      return guess;\n    };\n\n    this.finance = new Finance();\n  }\n\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length; // number of periods\n\n    let rate = .1; // initial guess for the rate of return\n    // calculate the net present value of the investments at the initial guess for the rate of return\n\n    let fval = initialValue;\n    console.log(\"initialValue:\", initialValue, \" fval:\", fval, \" targetValue:\", targetValue); // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n\n    const tolerance = 1e-2; // tolerance for the error between the net present value and the target value\n\n    const maxIterations = 1e+6; // maximum number of iterations\n\n    let iterations = 0; // current number of iterations\n\n    while (Math.abs(fval - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1); // recalculate the net present value at the new rate of return\n\n      fval = this.calcfval(rate, initialValue, 1);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      console.log(iterations, Math.abs(fval - targetValue), fval, rate);\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n\n    console.log(iterations, Math.abs(fval - targetValue), fval, rate);\n    return rate;\n  }\n\n  calcfval(r, data, n) {\n    let fval = this.finance.PV(r, data, n);\n    return fval;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n\n    avg = avg / n;\n    return avg;\n  } // generate a random number within a range\n\n\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["React","Component","Finance","GoalSeek","constructor","guess","hi","lo","Math","random","finance","seek","initialValue","dataTable","targetValue","n","length","rate","fval","console","log","tolerance","maxIterations","iterations","abs","calcfval","Error","r","data","PV","calcavg","avg","i","intRate"],"mappings":"AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACC,SAA7B,CAAuC;AACrCG,EAAAA,WAAW,GAAG;AACZ;AACA;;AAFY,SAsDdC,KAtDc,GAsDN,UAAUC,EAAV,EAAcC,EAAd,EAAkB;AACxB,UAAIF,KAAK,GAAGG,IAAI,CAACC,MAAL,MAAiBH,EAAE,GAAGC,EAAtB,IAA4BA,EAAxC;AACA,aAAOF,KAAP;AACD,KAzDa;;AAGZ,SAAKK,OAAL,GAAe,IAAIR,OAAJ,EAAf;AACD;;AACDS,EAAAA,IAAI,CAACC,YAAD,EAAeC,SAAf,EAA0BC,WAA1B,EAAuC;AACzC,UAAMC,CAAC,GAAGF,SAAS,CAACG,MAApB,CADyC,CACZ;;AAC7B,QAAIC,IAAI,GAAG,EAAX,CAFyC,CAEzB;AAEhB;;AACA,QAAIC,IAAI,GAAGN,YAAX;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,YAA7B,EAA2C,QAA3C,EAAqDM,IAArD,EAA2D,eAA3D,EAA4EJ,WAA5E,EAPyC,CASzC;;AACA,UAAMO,SAAS,GAAG,IAAlB,CAVyC,CAUhB;;AACzB,UAAMC,aAAa,GAAG,IAAtB,CAXyC,CAWZ;;AAC7B,QAAIC,UAAU,GAAG,CAAjB,CAZyC,CAYpB;;AACrB,WAAOf,IAAI,CAACgB,GAAL,CAASN,IAAI,GAAGJ,WAAhB,IAA+BO,SAAtC,EAAiD;AAC/C;AACAJ,MAAAA,IAAI,GAAG,KAAKZ,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP,CAF+C,CAI/C;;AACAa,MAAAA,IAAI,GAAG,KAAKO,QAAL,CAAcR,IAAd,EAAoBL,YAApB,EAAkC,CAAlC,CAAP;AACAW,MAAAA,UAAU;AACX;;AAED,QAAIA,UAAU,KAAKD,aAAnB,EAAkC;AAChCH,MAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ,EAAwBf,IAAI,CAACgB,GAAL,CAASN,IAAI,GAAGJ,WAAhB,CAAxB,EAAsDI,IAAtD,EAA4DD,IAA5D;AAEA,YAAM,IAAIS,KAAJ,CAAU,mEAAV,CAAN;AACD;;AACDP,IAAAA,OAAO,CAACC,GAAR,CAAYG,UAAZ,EAAwBf,IAAI,CAACgB,GAAL,CAASN,IAAI,GAAGJ,WAAhB,CAAxB,EAAsDI,IAAtD,EAA4DD,IAA5D;AAEA,WAAOA,IAAP;AAED;;AAEDQ,EAAAA,QAAQ,CAACE,CAAD,EAAIC,IAAJ,EAAUb,CAAV,EAAa;AACnB,QAAIG,IAAI,GAAG,KAAKR,OAAL,CAAamB,EAAb,CAAgBF,CAAhB,EAAmBC,IAAnB,EAAyBb,CAAzB,CAAX;AACA,WAAOG,IAAP;AACD;;AAEDY,EAAAA,OAAO,CAACjB,SAAD,EAAY;AACjB,QAAIkB,GAAG,GAAG,CAAV;AACA,QAAIhB,CAAC,GAAGF,SAAS,CAACG,MAAlB;;AACA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,CAApB,EAAuBiB,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,GAAG,IAAIlB,SAAS,CAACmB,CAAD,CAAT,CAAaC,OAApB;AACD;;AACDF,IAAAA,GAAG,GAAGA,GAAG,GAAGhB,CAAZ;AACA,WAAOgB,GAAP;AACD,GApDoC,CAsDrC;;;AAtDqC;;AA6DvC,eAAe5B,QAAf","sourcesContent":["\nimport React, { Component } from 'react';\nimport Finance from 'financejs';\n\nclass GoalSeek extends React.Component {\n  constructor() {\n    //\n    super();\n    this.finance = new Finance();\n  }\n  seek(initialValue, dataTable, targetValue) {\n    const n = dataTable.length;  // number of periods\n    let rate = .1;  // initial guess for the rate of return\n\n    // calculate the net present value of the investments at the initial guess for the rate of return\n    let fval = initialValue;\n\n    console.log(\"initialValue:\", initialValue, \" fval:\", fval, \" targetValue:\", targetValue);\n\n    // iterate until the net present value is close enough to the target value, or until the maximum number of iterations is reached\n    const tolerance = 1e-2;  // tolerance for the error between the net present value and the target value\n    const maxIterations = 1e+6;  // maximum number of iterations\n    let iterations = 0;  // current number of iterations\n    while (Math.abs(fval - targetValue) > tolerance) {\n      // adjust the rate of return based on the error between the net present value and the target value\n      rate = this.guess(1, -1);\n\n      // recalculate the net present value at the new rate of return\n      fval = this.calcfval(rate, initialValue, 1);\n      iterations++;\n    }\n\n    if (iterations === maxIterations) {\n      console.log(iterations, Math.abs(fval - targetValue), fval, rate);\n\n      throw new Error('Could not find a solution within the maximum number of iterations');\n    }\n    console.log(iterations, Math.abs(fval - targetValue), fval, rate);\n\n    return rate;\n\n  }\n\n  calcfval(r, data, n) {\n    let fval = this.finance.PV(r, data, n);\n    return fval;\n  }\n\n  calcavg(dataTable) {\n    let avg = 0;\n    let n = dataTable.length;\n    for (let i = 0; i < n; i++) {\n      avg += dataTable[i].intRate;\n    }\n    avg = avg / n;\n    return avg;\n  }\n\n  // generate a random number within a range\n  guess = function (hi, lo) {\n    var guess = Math.random() * (hi - lo) + lo;\n    return guess;\n  };\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}