{"ast":null,"code":"/*\n\nHere is a sample algorithm that uses a goal-seeking method to find the values of two unknown variables in a formula:\n\n  1. Define a function called \"goalSeek\" that takes in 5 arguments: the target value, the initial values of the two variables, and the function that contains the formula.\n\n  2. Initialize a variable called \"error\" to the difference between the target value and the result of the formula using the initial values of the two variables.\n\n  3. Set the initial values of the two variables as the current values.\n\n  4. Loop through the algorithm until the error is within a certain tolerance (for example, 0.001).\n\n  5. Within the loop, calculate the new values of the two variables using the goal-seeking method. This involves adjusting each variable by a small amount (for example, 0.01) and recalculating the error.\n\n  6. If the error is reduced by adjusting either variable, set the new value as the current value.\n\n  7. If the error is not reduced, decrease the amount that the variables are adjusted by (for example, divide it by 2).\n  After the loop has finished, return the current values of the two variables.\n\n  // Example usage:\n    const formula = (x, y) => x * y;\n    console.log(goalSeek(100, 1, 1, formula));\n  // Outputs { x: 10, y: 10 }, which are the values of x and y that result in a value of 100 when plugged into the formula.\n\n*/\nfunction GoalSeek(target, x, y, formula) {\n  let error = Math.abs(target - formula(x, y));\n  let currentX = x;\n  let currentY = y;\n  let adjustment = 0.01;\n\n  while (error > 0.001) {\n    let newX = currentX + adjustment;\n    let newY = currentY + adjustment;\n    let newErrorX = Math.abs(target - formula(newX, currentY));\n    let newErrorY = Math.abs(target - formula(currentX, newY));\n\n    if (newErrorX < error) {\n      currentX = newX;\n      error = newErrorX;\n    } else if (newErrorY < error) {\n      currentY = newY;\n      error = newErrorY;\n    } else {\n      adjustment /= 2;\n    }\n  } // endwhile\n\n\n  return {\n    x: currentX,\n    y: currentY\n  };\n}\n\nexport default GoalSeek;","map":{"version":3,"sources":["/Users/jonwretlind/Dropbox (1)/__Jon/__Jon Project Files/Code Projects/Incisic/incisic-app/src/helpers/goalseek.js"],"names":["GoalSeek","target","x","y","formula","error","Math","abs","currentX","currentY","adjustment","newX","newY","newErrorX","newErrorY"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,CAA1B,EAA6BC,CAA7B,EAAgCC,OAAhC,EAAyC;AACvC,MAAIC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASN,MAAM,GAAGG,OAAO,CAACF,CAAD,EAAIC,CAAJ,CAAzB,CAAZ;AACA,MAAIK,QAAQ,GAAGN,CAAf;AACA,MAAIO,QAAQ,GAAGN,CAAf;AACA,MAAIO,UAAU,GAAG,IAAjB;;AACA,SAAOL,KAAK,GAAG,KAAf,EAAsB;AACpB,QAAIM,IAAI,GAAGH,QAAQ,GAAGE,UAAtB;AACA,QAAIE,IAAI,GAAGH,QAAQ,GAAGC,UAAtB;AACA,QAAIG,SAAS,GAAGP,IAAI,CAACC,GAAL,CAASN,MAAM,GAAGG,OAAO,CAACO,IAAD,EAAOF,QAAP,CAAzB,CAAhB;AACA,QAAIK,SAAS,GAAGR,IAAI,CAACC,GAAL,CAASN,MAAM,GAAGG,OAAO,CAACI,QAAD,EAAWI,IAAX,CAAzB,CAAhB;;AACA,QAAIC,SAAS,GAAGR,KAAhB,EAAuB;AACrBG,MAAAA,QAAQ,GAAGG,IAAX;AACAN,MAAAA,KAAK,GAAGQ,SAAR;AACD,KAHD,MAGO,IAAIC,SAAS,GAAGT,KAAhB,EAAuB;AAC5BI,MAAAA,QAAQ,GAAGG,IAAX;AACAP,MAAAA,KAAK,GAAGS,SAAR;AACD,KAHM,MAGA;AACLJ,MAAAA,UAAU,IAAI,CAAd;AACD;AACF,GAnBsC,CAmBtC;;;AACD,SAAO;AAAER,IAAAA,CAAC,EAAEM,QAAL;AAAeL,IAAAA,CAAC,EAAEM;AAAlB,GAAP;AACD;;AAED,eAAeT,QAAf","sourcesContent":["/*\n\nHere is a sample algorithm that uses a goal-seeking method to find the values of two unknown variables in a formula:\n\n  1. Define a function called \"goalSeek\" that takes in 5 arguments: the target value, the initial values of the two variables, and the function that contains the formula.\n\n  2. Initialize a variable called \"error\" to the difference between the target value and the result of the formula using the initial values of the two variables.\n\n  3. Set the initial values of the two variables as the current values.\n\n  4. Loop through the algorithm until the error is within a certain tolerance (for example, 0.001).\n\n  5. Within the loop, calculate the new values of the two variables using the goal-seeking method. This involves adjusting each variable by a small amount (for example, 0.01) and recalculating the error.\n\n  6. If the error is reduced by adjusting either variable, set the new value as the current value.\n\n  7. If the error is not reduced, decrease the amount that the variables are adjusted by (for example, divide it by 2).\n  After the loop has finished, return the current values of the two variables.\n\n  // Example usage:\n    const formula = (x, y) => x * y;\n    console.log(goalSeek(100, 1, 1, formula));\n  // Outputs { x: 10, y: 10 }, which are the values of x and y that result in a value of 100 when plugged into the formula.\n\n*/\n\nfunction GoalSeek(target, x, y, formula) {\n  let error = Math.abs(target - formula(x, y));\n  let currentX = x;\n  let currentY = y;\n  let adjustment = 0.01;\n  while (error > 0.001) {\n    let newX = currentX + adjustment;\n    let newY = currentY + adjustment;\n    let newErrorX = Math.abs(target - formula(newX, currentY));\n    let newErrorY = Math.abs(target - formula(currentX, newY));\n    if (newErrorX < error) {\n      currentX = newX;\n      error = newErrorX;\n    } else if (newErrorY < error) {\n      currentY = newY;\n      error = newErrorY;\n    } else {\n      adjustment /= 2;\n    }\n  }// endwhile\n  return { x: currentX, y: currentY };\n}\n\nexport default GoalSeek;\n"]},"metadata":{},"sourceType":"module"}